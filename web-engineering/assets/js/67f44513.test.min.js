/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "../";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	var UIHeader = __webpack_require__(75);

	myHeader = new UIHeader({
	    "title" : "我的导航"
	});
	myHeader.show();

/***/ },

/***/ 75:
/***/ function(module, exports, __webpack_require__) {

	var UIView = __webpack_require__( 76),
	    template = __webpack_require__( 77 );

	var UIHeader = _.inherit(UIView, {

	    propertys: function ($super) {

	      $super();

	      var d_header = $('#headerview');

	      this.wrapper = d_header[0] ? d_header : $('body');

	      //是否设置view所处作用域
	      this.view;

	      this.left = [];
	      this.title = '头部导航';
	      this.right = [];

	      this.lastParam = null;

	      //每次create时候清空容器
	      this.needEmptyWrapper = true;

	      //html模板
	      this.template = template;
	      this.events = {};
	    },

	    getViewModel: function () {
	      return this._getDefaultViewModel(['left', 'title', 'right']);
	    },

	    //单纯的做老代码桥接......
	    set: function (data, needFresh) {
	      var left = [];
	      var tmpPram;
	      //如果仅仅是title的
	      if (typeof data == 'string') {
	        tmpPram = { title: data };

	        if (!needFresh && this.lastParam) {
	          this.lastParam.title = data;
	          tmpPram = this.lastParam;
	        }

	        this.lastParam = tmpPram;
	        this.setOption(tmpPram);
	        this.refresh();
	        this.show();
	        return;
	      }

	      if (typeof data.back != 'undefined') {
	        if (_.isObject(data.back)) left.push(data.back);
	        if (_.isArray(data.back)) left = data.back;
	        if (_.isFunction(data.back)) left = [{ tagname: 'back', callback: data.back}];
	        if (_.isBoolean(data.back) && data.back) left = [{ tagname: 'back'}];
	      }
	      if (!data.left) data.left = left;

	      this.resetDefaultPropertys();
	      this.handleSpecialParam(data);

	      //默认参数处理
	      this.setOption(data);
	      this.lastParam = data;

	      //初始化events参数
	      this.setEventsParam();
	      this.refresh();
	      this.show();
	    },

	    resetDefaultPropertys: function () {
	      this.left = [];
	      this.title = '我的导航';
	      this.right = [];
	    },

	    backDefaultCallback: function () {
	      console.log('默认back回调');
	      window.history.back();
	    },

	    setEventsParam: function () {
	      var item, _callback = null, data = this.left.concat(this.right);

	      for (var i = 0, len = data.length; i < len; i++) {
	        item = data[i];

	        //有默认的便赋值默认
	        if (_.isFunction(this[item.tagname + 'DefaultCallback']))
	          _callback = this[item.tagname + 'DefaultCallback'];

	        //外部传入的优先级更高
	        if (_.isFunction(item.callback))
	          _callback = $.proxy(item.callback, this.view);

	        if (_callback) {
	          this.events['click .js_' + item.tagname] = _callback;
	        }
	        _callback = null;
	      }
	    },

	    handleSpecialParam: function (data) {
	      var k, i, len, item;
	      for (k in data) {
	        if (_.isArray(data[k])) {
	          for (i = 0, len = data[k].length; i < len; i++) {
	            item = data[k][i];
	            if (this['customtHandle_' + item.tagname]) {
	              this['customtHandle_' + item.tagname](data[k][i], k);
	            }
	          }
	        }
	      }
	    },

	    _getDir: function (dir) {
	      var kv = { left: 'fl', right: 'fr' };
	      return kv[dir];
	    },

	    //定制化信息
	    customtHandle_tel: function (item, dir) {
	      dir = this._getDir(dir);
	      item.itemFn = function () {
	        return '<a href="tel:' + item.number + '" class="cm-header-icon' + dir + ' js_' + item.tagname + ' " ><i class="icon-' + item.tagname + '"></i></a>';
	      };
	    },

	    addEvent: function () {
	      this.on('onPreShow', function () {
	        this.wrapper.html('');
	      });
	    },

	    hide: function ($super) {
	      $super();
	      this.wrapper.hide();
	    },

	    show: function ($super) {
	      $super();
	      this.wrapper.show();
	    }
	});

	module.exports = UIHeader;



/***/ },

/***/ 76:
/***/ function(module, exports) {

	'use strict';

	//获取视图层级，层级的索引号在闭包中，生命周期被保存下来
	var getBiggerzIndex = (function () {
	    var index = 2000;
	    return function (level) {
	        return level + (++index);
	    };
	})();

	var UIAbstractView = _.inherit({

	    propertys: function () {

	        //这里设置UI的根节点所处包裹层
	        this.wrapper = $('body');
	        this.id = _.uniqueId('ui-view-');
	        this.classname = '';

	        //模板字符串，各个组件不同，现在加入预编译机制
	        this.template = '';
	        //事件机制
	        this.events = {};

	        //自定义事件
	        //此处需要注意mask 绑定事件前后问题，考虑scroll.radio插件类型的mask应用，考虑组件通信
	        this.eventArr = {};

	        //初始状态为实例化
	        this.status = 'init';

	    },

	    getViewModel: function () {
	        //假如有datamodel的话，便直接返回，不然便重写，这里基本为了兼容
	        if (_.isObject(this.datamodel)) return this.datamodel;
	        return {};
	    },

	    _getDefaultViewModel: function (arr) {
	        var k, i, len, obj = {};
	        for (i = 0, len = arr.length; i < len; i++) {
	            k = arr[i];
	            if (!_.isUndefined(this[k]) && !_.isNull(this[k])) obj[k] = this[k];
	        }
	        return obj;
	    },


	    //子类事件绑定若想保留父级的，应该使用该方法
	    addEvents: function (events) {
	        if (_.isObject(events)) _.extend(this.events, events);
	    },

	    //阻止默认冒泡事件
	    _preventDefault: function (e) {
	        e.preventDefault();
	    },

	    //订阅事件的回调函数
	    on: function (type, fn, insert) {
	        if (!this.eventArr[type]) this.eventArr[type] = [];

	        //头部插入
	        if (insert) {
	            this.eventArr[type].splice(0, 0, fn);
	        } else {
	            this.eventArr[type].push(fn);
	        }
	    },

	    //取消事件的回调函数
	    off: function (type, fn) {
	        if (!this.eventArr[type]) return;
	        if (fn) {
	            this.eventArr[type] = _.without(this.eventArr[type], fn);
	        } else {
	            this.eventArr[type] = [];
	        }
	    },

	    //定义类的自定义事件
	    trigger: function (type) {
	        var _slice = Array.prototype.slice;
	        var args = _slice.call(arguments, 1);
	        var events = this.eventArr;
	        var results = [], i, l;

	        if (events[type]) {
	            for (i = 0, l = events[type].length; i < l; i++) {
	                results[results.length] = events[type][i].apply(this, args);
	            }
	        }
	        return results;
	    },

	    //创建根节点
	    createRoot: function (html) {
	        //UI的根节点
	        this.$el = $('<div class="view ' + this.classname + '" style="display: none; " id="' + this.id + '">' + html + '</div>');
	        this.wrapper.append(this.$el);
	    },

	    //是否是默认事件
	    _isAddEvent: function (key) {
	        if (key == 'onCreate' || key == 'onPreShow' || key == 'onShow' || key == 'onRefresh' || key == 'onHide')
	            return true;
	        return false;
	    },

	    //根据参数重置当前属性
	    setOption: function (options) {
	        //这里可以写成switch，开始没有想到有这么多分支
	        for (var k in options) {
	            if (k == 'events') {
	                _.extend(this[k], options[k]);
	                continue;
	            } else if (this._isAddEvent(k)) {
	                this.on(k, options[k])
	                continue;
	            } else if (k == "html") {

	                var _html = options[k]();
	                this[k] = _html;
	                continue;
	            }
	            this[k] = options[k];
	        }
	        //      _.extend(this, options);
	    },

	    //组件初始化，一定执行
	    initialize: function (opts) {

	        //这种默认属性
	        this.propertys();
	        //根据参数重置属性
	        this.setOption(opts);
	        //检测不合理属性，修正为正确数据
	        this.resetPropery();

	        this.addEvent();
	        this.create();

	        this.initElement();

	    },

	    $: function (selector) {
	        return this.$el.find(selector);
	    },

	    //提供属性重置功能，对属性做检查
	    resetPropery: function () {
	    },

	    //各事件注册点，用于被继承override
	    addEvent: function () {
	    },

	    //渲染模板，定义组件生命周期的相关事件
	    create: function () {
	        this.trigger('onPreCreate');
	        //如果没有传入模板，说明html结构已经存在
	        if (_.isString(this.template) || _.isFunction(this.template)) {
	            this.createRoot(this.render());
	        }
	        else {
	            //如果没有准备template，则$el便是wrapper
	            this.$el = this.wrapper;
	        }

	        this.status = 'create';
	        this.trigger('onCreate');
	    },

	    //实例化需要用到到dom元素
	    initElement: function () {
	    },

	    //渲染模板，创建html片段
	    render: function (callback) {
	        var data = this.getViewModel() || {};
	        var html = this.template;
	        if (!this.template) return '';
	        //引入预编译机制
	        if (_.isFunction(this.template)) {
	            html = this.template(data);
	        } else {
	            html = _.template(this.template)(data);
	        }
	        typeof callback == 'function' && callback.call(this);
	        return html;
	    },

	    /**
	     * @description 组件刷新方法，首次显示会将ui对象实际由内存插入包裹层
	     * @method refresh
	     * @param {Boolean} needRecreate 组件是否重新创建，生命周期状态为create
	     */
	    refresh: function (needRecreate) {
	        this.resetPropery();
	        if (needRecreate) {
	            this.create();
	        } else {
	            this.$el.html(this.render());
	        }
	        this.initElement();
	        if (this.status != 'hide') this.show();
	        this.trigger('onRefresh');
	    },

	    /**
	     * @description 组件显示方法，首次显示会将ui对象实际由内存插入包裹层
	     * @method initialize
	     * @param {Object} opts
	     */
	    show: function () {
	        if (!this.wrapper[0] || !this.$el[0]) return;
	        this.trigger('onPreShow');

	        //如果包含就不要乱搞了
	        if (!$.contains(this.wrapper[0], this.$el[0])) {
	            //如果需要清空容器的话便清空
	            if (this.needEmptyWrapper) this.wrapper.html('');
	            this.wrapper.append(this.$el);
	        }

	        this.$el.show();

	        if (this.needAnimat && _.isFunction(this.animateShowAction) && this.status != 'show') {
	            this.animateShowAction.call(this, this.$el);
	        } else {
	            this.$el.show();
	        }

	        this.status = 'show';

	        this.bindEvents();

	        this.trigger('onShow');
	    },

	    hide: function () {
	        if (!this.$el || this.status !== 'show') return;

	        this.trigger('onPreHide');

	        if (this.needAnimat && _.isFunction(this.animateHideAction) && this.status == 'show') {
	            this.animateHideAction.call(this, this.$el);
	        } else {
	            this.$el.hide();
	        }
	        this.status = 'hide';
	        this.unBindEvents();
	        this.trigger('onHide');
	    },

	    destroy: function () {
	        this.status = 'destroy';
	        this.unBindEvents();
	        this.$el.remove();
	        this.trigger('onDestroy');
	        delete this;
	    },

	    setzIndexTop: function (el, level) {
	        if (!el) el = this.$el;
	        if (!level || level > 10) level = 0;
	        level = level * 1000;
	        el.css('z-index', getBiggerzIndex(level));

	    },

	    bindEvents: function () {
	        var events = this.events;

	        if (!(events || (events = _.result(this, 'events')))) return this;
	        this.unBindEvents();

	        // 解析event参数的正则
	        var delegateEventSplitter = /^(\S+)\s*(.*)$/;
	        var key, method, match, eventName, selector;

	        // 做简单的字符串数据解析
	        for (key in events) {
	            method = events[key];
	            if (!_.isFunction(method)) method = this[events[key]];
	            if (!method) continue;

	            match = key.match(delegateEventSplitter);
	            eventName = match[1], selector = match[2];
	            method = _.bind(method, this);
	            eventName += '.delegateUIEvents' + this.id;

	            if (selector === '') {
	                this.$el.on(eventName, method);
	            } else {
	                this.$el.on(eventName, selector, method);
	            }
	        }

	        return this;
	    },

	    unBindEvents: function () {
	        this.$el.off('.delegateUIEvents' + this.id);
	        return this;
	    }
	});

	module.exports = UIAbstractView;


/***/ },

/***/ 77:
/***/ function(module, exports) {

	module.exports = function (obj) {
	obj || (obj = {});
	var __t, __p = '', __j = Array.prototype.join;
	function print() { __p += __j.call(arguments, '') }
	with (obj) {
	__p += '<div class="cm-header">\n';


	var i = 0, len = 0, j = 0, jj = 0;
	var left = left;
	var right = right.reverse();
	var item = null;
	var dir;
	var btnObj = null;

	;
	__p += '\n\n';
	for(jj=0; jj < 2; jj++) { ;
	__p += '\n  ';
	 
	    if(jj == 0) { dir = 'fl'; btnObj = left; } else { dir = 'fr'; btnObj = right; }
	  ;
	__p += '\n  ';
	 for(i = 0, len = btnObj.length; i < len; i++) { ;
	__p += '\n    ';
	 item = btnObj[i]; ;
	__p += '\n    ';
	if(typeof item.itemFn == 'function') { ;
	__p += '\n      ' +
	((__t = (item.itemFn() )) == null ? '' : __t) +
	'\n    ';
	} else { ;
	__p += '\n      <span class=" cm-header-' +
	((__t = ((item.value ? 'btn' : 'icon') )) == null ? '' : __t) +
	' ' +
	((__t = (dir )) == null ? '' : __t) +
	'  js_' +
	((__t = (item.tagname )) == null ? '' : __t) +
	'" >\n        ';
	 if(item.value) { ;
	__p += '\n          ' +
	((__t = (item.value )) == null ? '' : __t) +
	'\n        ';
	 } else { ;
	__p += '\n          <i class="icon-' +
	((__t = (item.tagname )) == null ? '' : __t) +
	'"></i>\n        ';
	 } ;
	__p += '\n      </span>\n    ';
	} ;
	__p += '\n  ';
	} ;
	__p += '\n';
	} ;
	__p += '\n\n<h1 class="cm-page-title js_title" >\n  ';
	if((Object.prototype.toString.call(title) === '[object Array]') && title.length == 2) { ;
	__p += '\n    <span class="cm-title-l">' +
	((__t = (title[0])) == null ? '' : __t) +
	'</span>\n    <span class="cm-title-s">' +
	((__t = (title[1])) == null ? '' : __t) +
	'</span>\n  ';
	} else { ;
	__p += '\n    ' +
	((__t = (title)) == null ? '' : __t) +
	'\n  ';
	} ;
	__p += '\n</h1>\n\n</div>\n';

	}
	return __p
	}

/***/ }

/******/ });