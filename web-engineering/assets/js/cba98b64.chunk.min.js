webpackJsonp([17],{

/***/ 114:
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./app.ui.header": 115,
		"./app.ui.header.js": 115,
		"./ui.abstract.view": 105,
		"./ui.abstract.view.js": 105,
		"./ui.alert": 117,
		"./ui.alert.js": 117,
		"./ui.calendar": 119,
		"./ui.calendar.box": 121,
		"./ui.calendar.box.js": 121,
		"./ui.calendar.js": 119,
		"./ui.header": 104,
		"./ui.header.js": 104,
		"./ui.image.slider": 123,
		"./ui.image.slider.js": 123,
		"./ui.layer": 108,
		"./ui.layer.js": 108,
		"./ui.layer.list": 127,
		"./ui.layer.list.js": 127,
		"./ui.loading": 111,
		"./ui.loading.js": 111,
		"./ui.mask": 109,
		"./ui.mask.js": 109,
		"./ui.nuomi.header": 129,
		"./ui.nuomi.header.js": 129,
		"./ui.page.view": 113,
		"./ui.page.view.js": 113,
		"./ui.scroll": 126,
		"./ui.scroll.js": 126,
		"./ui.scroll.layer": 130,
		"./ui.scroll.layer.js": 130,
		"./ui.slider": 124,
		"./ui.slider.js": 124,
		"./ui.toast": 107,
		"./ui.toast.js": 107
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 114;


/***/ },

/***/ 115:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(104), __webpack_require__(116),__webpack_require__(20)], __WEBPACK_AMD_DEFINE_RESULT__ = function (UIHeader, template,_) {

	    return _.inherit(UIHeader, {

	        propertys: function ($super) {
	            $super();
	            this.template = template;
	        },

	        hide: function ($super) {
	            $super();
	            //      this.wrapper.hide();
	        },

	        show: function ($super) {
	            $super();
	        }

	    });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },

/***/ 116:
/***/ function(module, exports) {

	module.exports = function (obj) {
	obj || (obj = {});
	var __t, __p = '', __j = Array.prototype.join;
	function print() { __p += __j.call(arguments, '') }
	with (obj) {
	__p += '<ul class="cm-app-header">\n';


	var i = 0, len = 0, j = 0, jj = 0;
	var left = left;
	var right = right.reverse();
	var item = null;
	var dir;
	var btnObj = null;

	;
	__p += '\n\n';
	for(jj=0; jj < 2; jj++) { ;
	__p += '\n  ';
	 
	    if(jj == 0) { dir = 'fl'; btnObj = left; } else { dir = 'fr'; btnObj = right; }
	  ;
	__p += '\n  ';
	 for(i = 0, len = btnObj.length; i < len; i++) { ;
	__p += '\n    ';
	 item = btnObj[i]; ;
	__p += '\n    ';
	if(typeof item.itemFn == 'function') { ;
	__p += '\n      ' +
	((__t = (item.itemFn() )) == null ? '' : __t) +
	'\n    ';
	} else { ;
	__p += '\n      <li class=" cm-header-btn js_' +
	((__t = (item.tagname )) == null ? '' : __t) +
	'" style="' +
	((__t = ((item.value && item.value.length > 2) ? 'line-height: 16px;' : '')) == null ? '' : __t) +
	'" >\n    ';
	 if(item.value) { ;
	__p += '\n        ' +
	((__t = (item.value )) == null ? '' : __t) +
	'\n    ';
	 } else { ;
	__p += '\n        返回\n    ';
	 } ;
	__p += '\n    </li>\n    ';
	} ;
	__p += '\n  ';
	} ;
	__p += '\n';
	} ;
	__p += '\n\n</ul>\n';

	}
	return __p
	}

/***/ },

/***/ 123:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(124),__webpack_require__(20)], __WEBPACK_AMD_DEFINE_RESULT__ = function (UISlider,_) {
	  return _.inherit(UISlider, {
	    propertys: function ($super) {
	      $super();

	      this.momentum = false;
	      this.autoPlay = false;
	      this.timerSrc = null;
	      this.delaySec = 3000;
	      this.playTime = 500;
	      this.sliderNav = null;
	      this.displayNum = 1;
	      this.needLoop = true;

	    },

	    //循环播放
	    play: function () {
	      if (!this.autoPlay) return
	      this.stop();
	      this.timerSrc = setInterval($.proxy(function () {
	        var index = this.index;
	        index++;
	        if (index == this.itemNum) index = 0
	        this.setIndex(index, null, null, this.playTime);
	      }, this), this.delaySec);
	    },

	    stop: function () {
	      if (this.timerSrc) {
	        clearInterval(this.timerSrc);
	        this.timerSrc = null;
	      }
	    },

	    //导航条
	    //******这个接口没有封装好！！！
	    createNav: function () {
	      if (this.sliderNav) return;
	      var nav = '<div class="cm-slide-bullet js_nav" style="position: absolute;">';
	      for (var i = 0; i < this.itemNum; i++) {
	        nav += '<span class="cm-bullet-item js_nav_item" data-index="' + i + '"></span>';
	      }
	      nav += '</div>';
	      this.sliderNav = $(nav);

	      //这块有点玄幻了，没有继承关系的话$swrapper是不存在的******
	      this.swrapper.append(this.sliderNav);
	      this._setNavPos();

	      //这块地方z-index设置过高，会遮住header
	//      this.setzIndexTop(this.sliderNav);
	      this._setNavIndex(this.index);
	    },

	    //父级元素resize事件重写
	    resizeRefresh: function ($super) {
	      $super();
	      this._setNavPos();
	    },

	    //******这块计算有问题暂时不予理睬，后续更改
	    _setNavPos: function () {
	      var left = (parseInt(this.wrapper.width()) - 2 * (this.itemNum * 8)) / 2; //居中计算LEFT值
	      this.sliderNav.css({'right': 'auto', 'top': 'auto', 'left': left, 'bottom': '10px', 'z-index': '500' });
	    },

	    _addTouchEvent: function () {
	      var scope = this;
	      this._removeTouchEvent();

	      var _handlerStop = function (e) {
	        scope.stop();
	      };

	      var _handlerPlay = function (e) {
	        scope.play();
	      };

	      this.$el.on('touchstart.imageslidertouchmove' + this.id, _handlerStop);
	      this.$el.on('touchmove.imageslidertouchmove' + this.id, _handlerStop);
	      this.$el.on('touchend.imageslidertouchmove' + this.id, _handlerPlay);

	      this.$el.on('mousedown.imageslidertouchmove' + this.id, _handlerStop);
	      this.$el.on('mousemove.imageslidertouchmove' + this.id, _handlerStop);
	      this.$el.on('mouseup.imageslidertouchmove' + this.id, _handlerPlay);

	    },

	    _removeTouchEvent: function () {
	      this.$el.off('.imageslidertouchmove' + this.id);
	    },

	    _setNavIndex: function (index) {
	      this.sliderNav.find('.js_nav_item').removeClass('active');
	      this.sliderNav.find('.js_nav_item[data-index="' + index + '"]').addClass('active');
	    },

	    changedAction: function (item) {
	      this._setNavIndex(this.index);
	    },

	    addEvent: function ($super) {
	      $super();
	      this.on('onRefresh', function () {
	        this.sliderNav = null;
	      });

	      this.on('onCreate', function () {
	        this.$el.addClass('cm-slide--full-img');
	      });
	      
	      this.on('onShow', function () {
	        this.createNav();
	        this.play();
	        this._addTouchEvent();
	      });

	      this.on('onHide', function () {
	        this.stop();
	        this._removeTouchEvent();
	      });
	    }

	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },

/***/ 124:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
	******bug******
	容器类组件，css传递是一个痛点
	*/
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(105), __webpack_require__(125), __webpack_require__(126),__webpack_require__(20)], __WEBPACK_AMD_DEFINE_RESULT__ = function (UIAbstractView, template, UIScroll,_) {

	  return _.inherit(UIAbstractView, {
	    propertys: function ($super) {
	      $super();
	      this.template = template;

	      //当前选择id
	      this.key = null;
	      //滚动层的class，感觉没有意义
	      this.className = '';
	      this.curClass = 'current';
	      this.data = [];
	      //索引，内部以此为准
	      this.index = 0;

	      this.itemNum = 0;
	      this.displayNum = 3;
	      this.animatTime = 100;
	      this.momentum = true;

	      //是否需要循环功能
	      this.needLoop = false;

	      //该组件一定要设置宽高
	      this.itemWidth = 0;
	      this.itemHeight = 0;
	      this.scrollWidth = 0;


	      //选择时候的偏移量
	      this.scrollOffset = 0;

	      //滚动对象
	      this.scroll = null;

	      this.addEvents({
	        'click .js_scroller>li': 'itemClickAction'
	      });


	      this.changed = function (item) {
	        //        console.log(item);
	      };

	      this.itemClick = function (item) {
	        //        console.log(item);
	      };

	    },

	    getViewModel: function () {
	      return this._getDefaultViewModel(['key', 'className', 'curClass', 'data', 'index', 'itemFn', 'firstLoopItem', 'lastLoopItem']);
	    },

	    itemClickAction: function (e) {
	      var el = $(e.currentTarget);
	      var index = el.attr('data-index');
	      this.setIndex(index);
	      this.itemClick.call(this, this.getSelected());
	    },

	    initialize: function ($super, opts) {
	      $super(opts);
	    },

	    resetPropery: function ($super) {
	      $super();
	      this._resetLoop();
	      this._resetNum();
	      this._resetIndex();
	    },

	    _resetLoop: function () {
	      if (!this.needLoop) return;
	      this.firstLoopItem = $.extend({}, this.data[this.data.length - 1], true);
	      this.lastLoopItem = $.extend({}, this.data[0], true);
	    },

	    //这里差一个index值判断**************************
	    _resetIndex: function () {
	      if (!this.key) return;
	      for (var i = 0, len = this.data.length; i < len; i++) {
	        if (this.key == this.data[i].id) {
	          this.index = i;
	          break;
	        }
	      }
	    },

	    _resetNum: function () {
	      //      this.displayNum = this.displayNum % 2 == 0 ? this.displayNum + 1 : this.displayNum;
	      this.itemNum = this.data.length;
	    },

	    initElement: function () {

	      //几个容器的高度必须统一
	      this.swrapper = this.$('.js_wrapper');
	      this.scroller = this.$('.js_scroller');
	    },

	    initSize: function () {
	      var item = this.scroller.find('li').eq(0);
	      var itemOffset = item.offset();

	      //找到包裹层，并求其高度
	      var parent = this.wrapper;
	      var ph = (parent[0] && parent[0].clientHeight) || parent.height();
	      var _itemNum = this.needLoop ? this.itemNum + 2 : this.itemNum;
	      this.wrapeWidth = (this.swrapper[0] && this.swrapper[0].clientWidth) || this.swrapper.width();

	      this.itemWidth = parseInt(this.wrapeWidth / this.displayNum);

	      this.scroller.find('li').width(this.itemWidth);

	      this.scroller.width(this.itemWidth * _itemNum);

	      this.itemHeight = this.scroller.height();

	      //无论如何itemHeight都要相等才行
	      //      if (ph != this.itemHeight) this.itemHeight = ph;
	      this.itemHeight = ph;

	      this.scroller.find('li').height(this.itemHeight);

	      //样式还需调整
	      this.swrapper.css({
	        height: this.itemHeight + 'px'
	      });

	      this.scrollOffset = ((this.displayNum - 1) / 2) * (this.itemWidth);
	    },

	    reload: function (data) {
	      this.setOpts(data);
	      if (this.scroll) {
	        this.scroll.destroy();
	        this.scroll = null;
	      }
	      this.refresh();
	    },

	    _initScroll: function () {
	      if (this.scroll) {
	        this.scroll.destroy();
	      }

	      this.scroll = new UIScroll({
	        scrollbars: false,
	        scrollOffset: this.scrollOffset,
	        scrollType: 'x',
	        step: this.itemWidth,
	        wrapper: this.swrapper,
	        bounceTime: 200,
	        momentum: this.momentum,
	        scroller: this.scroller

	      });

	      //重置包裹层尺寸，一定要是一个
	      //      this.swrapper.width(this.itemWidth * this.displayNum);

	      this.scroll.on('scrollEnd', $.proxy(function () {
	        var index;
	        //处理循环滚动
	        if (this.needLoop) {
	          index = this.getIndexByPosition();
	          if (index == this.itemNum) {
	            this.setIndex(0, null, null, 0);
	            return;
	          }
	          if (index == -1) {
	            //多增了两项
	            this.setIndex(this.itemNum - 1, null, null, 0);
	            return;
	          }
	        }
	        this.setIndex(this.getIndexByPosition(), true);
	      }, this));

	      //为了解决鼠标离屏幕时导致的问题
	      this.scroll.on('scrollCancel', $.proxy(function () {
	        this.setIndex(this.getIndexByPosition(), false);
	      }, this));

	      //解决resize问题
	      $(window).off('.silder' + this.id);
	      $(window).on('resize.silder' + this.id, $.proxy(function () {
	        this.resizeRefresh();
	      }, this));

	    },

	    //当window.resize事件时候不需要重新搞页面
	    resizeRefresh: function () {
	      this.initSize();
	      this._initScroll();
	      this.adjustPosition();
	      this.resetCss();
	      this.resetIndex();
	    },

	    adjustPosition: function (hasAnimate, time) {
	      if (!this.scroll) return;
	      var index = this.index, _dis, _time = 0;

	      if (this.needLoop) {
	        if (index === 0) {
	          index = 1;
	        } else {
	          index++;
	        }
	      }

	      _dis = (this.itemWidth * index) * (-1) + this.scrollOffset;
	      if (hasAnimate) _time = this.animatTime;
	      if (_.isNumber(time)) _time = time;

	      this.scroll.scrollTo(_dis, 0, _time);
	    },

	    resetCss: function () {
	      this.$('li').removeClass('current');
	      this.$('li[data-index="' + this.index + '"]').addClass('current');
	    },

	    resetIndex: function () {
	      this.setIndex(this.index, true, true);
	    },

	    //根据位置信息重新设置当前选项
	    getIndexByPosition: function () {
	      var pos = this.scroll.x - this.scrollOffset;
	      var index = Math.round(Math.abs(pos) / this.itemWidth);

	      //如果要循环的话，需要前进一
	      if (this.needLoop) index--;

	      return index;
	    },

	    getIndex: function () {
	      return this.index;
	    },

	    setIndex: function (i, noPosition, noEvent, time) {
	      if (typeof noPosition == 'undefined' && i == this.index) noPosition = true;

	      //index值是否改变
	      var isChange = this.index != i;
	      this.index = i;

	      if (!noPosition) this.adjustPosition(true, time);
	      this.resetCss();
	      if (noEvent !== true && isChange) {
	        this.changedAction && this.changedAction.call(this, this.getSelected());
	        this.changed && this.changed.call(this, this.getSelected());
	      }
	    },

	    setId: function (id) {
	      if (!id) return;
	      var index = -1, i, len;
	      for (i = 0, len = this.data.length; i < len; i++) {
	        if (this.data[i].id == id) { index = i; break; }
	      }
	      if (index == -1) return;
	      this.setIndex(index, false);
	    },

	    getId: function () {
	      return this.getSelected().id;
	    },

	    getSelected: function () {
	      return this.data[this.index];
	    },

	    addEvent: function ($super) {
	      $super();

	      //这个要在第一位，因为后面会执行父类的position方法居中，尺寸没有就不行
	      this.on('onShow', function () {
	        this.initSize();
	        this._initScroll();
	        this.adjustPosition();
	        this.resetCss();
	        this.resetIndex();

	      }, 1);

	      this.on('onHide', function () {
	        if (this.scroll) {
	          this.scroll.destroy();
	          this.scroll = null;
	          $(window).off('.silder' + this.id);
	          this.freeInstance();
	        }
	      });
	    }
	  });

	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },

/***/ 125:
/***/ function(module, exports) {

	module.exports = function (obj) {
	obj || (obj = {});
	var __t, __p = '', __j = Array.prototype.join;
	function print() { __p += __j.call(arguments, '') }
	with (obj) {
	__p += '<div class="cm-slide js_wrapper">\n  <ul class="cm-slide-list js_scroller ' +
	((__t = (className )) == null ? '' : __t) +
	'" style=" position: absolute; ">\n    \n    ';
	if(typeof firstLoopItem != 'undefined'){ ;
	__p += ' \n     <li class="cm-slide-item" data-key="first" >\n      ' +
	((__t = (((typeof itemFn == 'function' && itemFn(firstLoopItem, -1)) || firstLoopItem.name) )) == null ? '' : __t) +
	'\n     </li>\n    ';
	} ;
	__p += '\n\n    ';
	for(var i = 0, len = data.length; i < len; i++) { ;
	__p += '\n    <li class="cm-slide-item" data-key="' +
	((__t = (data[i].id )) == null ? '' : __t) +
	'" data-index="' +
	((__t = (i)) == null ? '' : __t) +
	'" >\n      ' +
	((__t = (((typeof itemFn == 'function' && itemFn(data[i], i)) || data[i].name) )) == null ? '' : __t) +
	'\n    </li>\n    ';
	} ;
	__p += '\n\n    ';
	if(typeof lastLoopItem != 'undefined'){ ;
	__p += ' \n     <li class="cm-slide-item" data-key="last" >\n      ' +
	((__t = (((typeof itemFn == 'function' && itemFn(lastLoopItem, -1)) || lastLoopItem.name) )) == null ? '' : __t) +
	'\n     </li>\n    ';
	} ;
	__p += '\n  </ul>\n</div>\n';

	}
	return __p
	}

/***/ },

/***/ 129:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(20)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_) {
	    'use strict';

	    return _.inherit({

	        propertys: function () {
	        },

	        //全部更新
	        set: function (opts) {
	            if (!opts) return;
	            var i, len, item;

	            var scope = opts.view || this;

	            //处理返回逻辑
	            if (opts.back && typeof opts.back == 'function') {
	                BNJS.page.onBtnBackClick({
	                    callback: $.proxy(opts.back, scope)
	                });
	            } else {

	                BNJS.page.onBtnBackClick({
	                    callback: function () {
	                        if (history.length > 0)
	                            history.back();
	                        else
	                            BNJS.page.back();
	                    }
	                });
	            }

	            //处理title
	            if (typeof opts.title == 'string') {
	                BNJS.ui.title.setTitle(opts.title);
	            }

	            //删除右上角所有按钮【1.3】
	            //每次都会清理右边所有的按钮
	            BNJS.ui.title.removeBtnAll();

	            //处理右边按钮
	            if (typeof opts.right == 'object' && opts.right.length) {
	                for (i = 0, len = opts.right.length; i < len; i++) {
	                    item = opts.right[i];
	                    BNJS.ui.title.addActionButton({
	                        tag: _.uniqueId(),
	                        text: item.value,
	                        callback: $.proxy(item.callback, scope)
	                    });
	                }
	            }
	        },

	        show: function () {

	        },

	        hide: function () {

	        },

	        //只更新title
	        update: function (title) {

	        },

	        initialize: function () {
	            //隐藏H5头
	            $('#headerview').hide();
	            this.propertys();
	        }

	    });

	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }

});