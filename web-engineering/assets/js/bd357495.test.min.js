/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "../";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	var Modal = __webpack_require__(118);
	var modal = new Modal({
	    title : "天气提示",
	    content : "请注意今天的天气会变得很冷，要多穿衣服！"
	});

	var modal2 = new Modal({
	    title : "天气提示2",
	    content : "请注意今天的天气会变得很冷，要多穿衣服！2"
	});

	alert(modal === modal2);

	modal.on("show",function(config){
	    alert(config.title);
	});

	modal.on("hide",function(config){
	    alert("已关闭"+config.content);
	});

	modal.show();

	window.modal = modal;
	window.modal2 = modal2;

/***/ },

/***/ 33:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function(require, exports){

	    //工具函数
	    Tools = {

	        //判断中英文字符长度
	        getStrLen : function(str){
	            var len = 0;
	            for (var i = 0; i < str.length; i++) {
	                var c = str.charCodeAt(i);
	                //单字节加1
	                if ((c >= 0x0001 && c <= 0x007e) || (0xff60 <= c && c <= 0xff9f)) {
	                    len++;
	                }
	                else {
	                    len += 2;
	                }
	            }
	            return len;
	        },

	        //截取中英文字符串
	        subString : function(str,num,ellipsis){

	            var newStr = "",len = 0;

	            for (var i = 0; i < str.length && len < num; i++) {
	                var c = str.charCodeAt(i);
	                //单字节加1
	                if ((c >= 0x0001 && c <= 0x007e) || (0xff60 <= c && c <= 0xff9f)) {
	                    len++;
	                }
	                else {
	                    len += 2;
	                }
	                newStr += str[i];
	            }

	            if(ellipsis) newStr+= "…";

	            return newStr;
	        }

	    }

	    //封装观察者模式类，需继承使用
	    function Observers(){

	        this.eventsList = [];

	        this.on = function(key,fn){

	            if(!this.eventsList[key]){
	                this.eventsList[key] = [];
	            }

	            this.eventsList[key].push(fn);

	        };

	        this.trigger = function(){

	            var key = Array.prototype.shift.call(arguments),
	                fns = this.eventsList[key];

	            if((!fns) || fns.length == 0){
	                return false;
	            }

	            for(var i= 0,fn;fn = fns[i++];){
	                fn.apply(this,arguments);
	            }

	        };

	        this.un = function(key,fn){

	            var fns = this.eventsList[key];

	            if((!fns) || fns.length == 0){
	                return false;
	            }

	            if(!fn){
	                fns.length = 0;
	            }

	            for(var i = 0,_fn;_fn = fns[i++];){
	                if(_fn === fn){
	                    fns.splice(i-1,1);
	                }
	            }

	        }

	    }

	    exports.Observers = Observers;
	    exports.Tools = Tools;

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },

/***/ 118:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(119);
	var Observers = __webpack_require__(33).Observers;

	/*对话框组件*/
	/*
	 * 自定义了两个事件
	 *
	 * @name show
	 * 对话框显示触发
	 * @param config
	 *
	 * @name hide
	 * 对话框关闭触发
	 * @param config
	 */

	var Modal=(function(){

	    var instance;  //单例模式

	    return function(config) {

	        if(instance){
	            return instance;
	        }

	        Observers.call(this);  //继承观察者机制

	        this._initFlag = false;  //是否初始化

	        /*对话框配置项*/
	        /*
	         * 可选配置项
	         * @param title
	         * @param content
	         */
	        this.config = (function(){

	            var _config = {
	                title : "标题",
	                content : "请填上内容"
	            };

	            for(var i in config){
	                if(config.hasOwnProperty(i)){
	                    _config[i] = config[i];
	                }
	            }

	            return _config;

	        })();

	        /*公开方法：显示对话框*/
	        this.show  = function(){

	            if(!this._initFlag){
	                this._init();
	                this._initFlag = true;
	            }else{
	                this.$modal.removeClass("hide");
	                this.$mask.removeClass("hide");
	            }
	            this.trigger("show",this.config);
	        };

	        /*公开方法：隐藏对话框*/
	        this.hide  = function(){
	            this.$modal.addClass("hide");
	            this.$mask.addClass("hide");
	            this.trigger("hide",this.config);
	        };

	        /*对话框模板*/
	        this._Tpl = ["<div class='title'><%=data.title%></div>",
	                "<div class='content'><%=data.content%></div>",
	                "<div class='button'>确定</div>"].join("");

	        /*初始化*/
	        this._init = function(){
	            var me = this,
	                obj = {"data":this.config},
	                _html;
	            this.$modal = $("<div class='comp_modal'></duv>");
	            this.$mask = $("<div class='comp_mask'></duv>");
	            $("body").append(this.$modal);
	            $("body").append(this.$mask);
	            _html = _.template(this._Tpl)(obj);
	            $(".comp_modal").html(_html);
	            this.$sure = $(".button");
	            this.$sure.on("click",function(){
	                me.hide();
	            });
	        };
	        return instance = this;
	    }

	})();

	module.exports = Modal;


/***/ },

/***/ 119:
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }

/******/ });