/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	var parentJsonpFunction = window["webpackJsonp"];
/******/ 	window["webpackJsonp"] = function webpackJsonpCallback(chunkIds, moreModules) {
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, callbacks = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(installedChunks[chunkId])
/******/ 				callbacks.push.apply(callbacks, installedChunks[chunkId]);
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			modules[moduleId] = moreModules[moduleId];
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules);
/******/ 		while(callbacks.length)
/******/ 			callbacks.shift().call(null, __webpack_require__);

/******/ 	};

/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// object to store loaded and loading chunks
/******/ 	// "0" means "already loaded"
/******/ 	// Array means "loading", array contains callbacks
/******/ 	var installedChunks = {
/******/ 		15:0
/******/ 	};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}

/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__webpack_require__.e = function requireEnsure(chunkId, callback) {
/******/ 		// "0" is the signal for "already loaded"
/******/ 		if(installedChunks[chunkId] === 0)
/******/ 			return callback.call(null, __webpack_require__);

/******/ 		// an array means "currently loading".
/******/ 		if(installedChunks[chunkId] !== undefined) {
/******/ 			installedChunks[chunkId].push(callback);
/******/ 		} else {
/******/ 			// start chunk loading
/******/ 			installedChunks[chunkId] = [callback];
/******/ 			var head = document.getElementsByTagName('head')[0];
/******/ 			var script = document.createElement('script');
/******/ 			script.type = 'text/javascript';
/******/ 			script.charset = 'utf-8';
/******/ 			script.async = true;

/******/ 			script.src = __webpack_require__.p + "js/" + {"16":"b7b634ab","17":"1349b2b9"}[chunkId] + ".chunk.min.js";
/******/ 			head.appendChild(script);
/******/ 		}
/******/ 	};

/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "../";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	var project = './';
	var viewRoot = 'pages';

	//需要封装的方法，获取当前平台
	var getPlatform = function () {
	    var platform = null;
	    var ua = navigator.userAgent.toLowerCase();
	    //判断是否萤石app
	    if (ua.indexOf('ys') != -1) {
	        platform = 'ys';
	    }

	    return platform;
	};

	//require.config({
	//    paths: {
	//        //BUS相关模板根目录
	//        IndexPath: project + 'pages/index',
	//        ListPath: project + 'pages/list',
	//        CityPath: project + 'pages/city',
	//
	//        TemplatePath: project + 'templates',
	//
	//        BusStore: project + 'model/bus.store',
	//        BusModel: project + 'model/bus.model'
	//    }
	//});

	//处理多容器header问题，真实场景该代码需要重构
	var modules = ['AbstractApp'];

	if (getPlatform() == 'ys') {
	    modules.push('ysHeader');
	} else {
	    modules.push('UIHeader');
	}

	__webpack_require__.e/* require */(16, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(74),__webpack_require__(75)]; (function (APP, UIHeader) {
	    window.APP = new APP({
	        App_Mapping: {
	            nuomi: [
	                'index'
	            ]
	        },
	        //            @override
	        //            buildUrl: function (path) {
	        //                var mappingPath = this.viewMapping[path];
	        //                return mappingPath ? mappingPath : this.viewRootPath + '/' + path + '/' + path;
	        //            },
	        //重写掉底层view实例加载规则，如果Webview容器设置了，并且处于该环境便加载之
	        buildUrl: function (path) {
	            var mappingPath = this.viewMapping[path];
	            var _file = path;

	            //当前平台，未设置为浏览器
	            var platform = null;

	            //底层方法获取当前平台，该方法需要补充，这里做简单实现
	            platform = getPlatform();

	            //最简单处理办法，如果当前处于某一app容器中，并且需要做特殊处理（App_Mapping有配置），则加载之
	            if (platform && this.App_Mapping[platform] && _.indexOf(this.App_Mapping[platform], _file) != -1) {
	                _file = platform + '.' + _file;
	            }

	            return mappingPath ? mappingPath : this.viewRootPath + '/' + path + '/' + _file;
	        },

	        UIHeader: UIHeader,
	        viewRootPath: viewRoot
	    });

	    //如果是萤石平台需要做一些处理
	    //需要等平台app注入成功后才能实例化APP
	    if (getPlatform() == 'ys') {
	        var BNJSReady = function (readyCallback) {
	            if (readyCallback && typeof readyCallback == 'function') {
	                if (window.BNJS && typeof window.BNJS == 'object' && BNJS._isAllReady) {
	                    readyCallback();
	                } else {
	                    document.addEventListener('YSJSReady', function () {
	                        readyCallback();
	                    }, false)
	                }
	            }
	        };

	        YSJSReady(function () {
	            window.APP.initApp();
	        });
	        return;
	    }


	    window.APP.initApp();
	}.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));});



/***/ }
/******/ ]);