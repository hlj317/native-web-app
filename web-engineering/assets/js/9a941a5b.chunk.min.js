webpackJsonp([16],[
/* 0 */,
/* 1 */,
/* 2 */,
/* 3 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];

		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};

		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0;

	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}

		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();

		var styles = listToStyles(list);
		addStylesToDom(styles, options);

		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}

	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}

	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}

	function createStyleElement() {
		var styleElement = document.createElement("style");
		var head = getHeadElement();
		styleElement.type = "text/css";
		head.appendChild(styleElement);
		return styleElement;
	}

	function createLinkElement() {
		var linkElement = document.createElement("link");
		var head = getHeadElement();
		linkElement.rel = "stylesheet";
		head.appendChild(linkElement);
		return linkElement;
	}

	function addStyle(obj, options) {
		var styleElement, update, remove;

		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement());
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement();
			update = updateLink.bind(null, styleElement);
			remove = function() {
				styleElement.parentNode.removeChild(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement();
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				styleElement.parentNode.removeChild(styleElement);
			};
		}

		update(obj);

		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}

	var replaceText = (function () {
		var textStore = [];

		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();

	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;

		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}

	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;
		var sourceMap = obj.sourceMap;

		if(media) {
			styleElement.setAttribute("media", media)
		}

		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}

	function updateLink(linkElement, obj) {
		var css = obj.css;
		var media = obj.media;
		var sourceMap = obj.sourceMap;

		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}

		var blob = new Blob([css], { type: "text/css" });

		var oldSrc = linkElement.href;

		linkElement.href = URL.createObjectURL(blob);

		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ },
/* 5 */,
/* 6 */,
/* 7 */,
/* 8 */,
/* 9 */,
/* 10 */,
/* 11 */,
/* 12 */,
/* 13 */,
/* 14 */,
/* 15 */,
/* 16 */,
/* 17 */,
/* 18 */,
/* 19 */,
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//     Underscore.js 1.8.2
	//     http://underscorejs.org
	//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	//     Underscore may be freely distributed under the MIT license.

	(function() {

	  // Baseline setup
	  // --------------

	  // Establish the root object, `window` in the browser, or `exports` on the server.
	  var root = this;

	  // Save the previous value of the `_` variable.
	  var previousUnderscore = root._;

	  // Save bytes in the minified (but not gzipped) version:
	  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

	  // Create quick reference variables for speed access to core prototypes.
	  var
	    push             = ArrayProto.push,
	    slice            = ArrayProto.slice,
	    toString         = ObjProto.toString,
	    hasOwnProperty   = ObjProto.hasOwnProperty;

	  // All **ECMAScript 5** native function implementations that we hope to use
	  // are declared here.
	  var
	    nativeIsArray      = Array.isArray,
	    nativeKeys         = Object.keys,
	    nativeBind         = FuncProto.bind,
	    nativeCreate       = Object.create;

	  // Naked function reference for surrogate-prototype-swapping.
	  var Ctor = function(){};

	  // Create a safe reference to the Underscore object for use below.
	  var _ = function(obj) {
	    if (obj instanceof _) return obj;
	    if (!(this instanceof _)) return new _(obj);
	    this._wrapped = obj;
	  };

	  var arr = [];
	  var slice = arr.slice;

	  // Export the Underscore object for **Node.js**, with
	  // backwards-compatibility for the old `require()` API. If we're in
	  // the browser, add `_` as a global object.
	  if (true) {
	    if (typeof module !== 'undefined' && module.exports) {
	      exports = module.exports = _;
	    }
	    exports._ = _;
	  } else {
	    root._ = _;
	  }

	  // Current version.
	  _.VERSION = '1.8.2';

	  // Internal function that returns an efficient (for current engines) version
	  // of the passed-in callback, to be repeatedly applied in other Underscore
	  // functions.
	  var optimizeCb = function(func, context, argCount) {
	    if (context === void 0) return func;
	    switch (argCount == null ? 3 : argCount) {
	      case 1: return function(value) {
	        return func.call(context, value);
	      };
	      case 2: return function(value, other) {
	        return func.call(context, value, other);
	      };
	      case 3: return function(value, index, collection) {
	        return func.call(context, value, index, collection);
	      };
	      case 4: return function(accumulator, value, index, collection) {
	        return func.call(context, accumulator, value, index, collection);
	      };
	    }
	    return function() {
	      return func.apply(context, arguments);
	    };
	  };

	  // A mostly-internal function to generate callbacks that can be applied
	  // to each element in a collection, returning the desired result 鈥� either
	  // identity, an arbitrary callback, a property matcher, or a property accessor.
	  var cb = function(value, context, argCount) {
	    if (value == null) return _.identity;
	    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
	    if (_.isObject(value)) return _.matcher(value);
	    return _.property(value);
	  };
	  _.iteratee = function(value, context) {
	    return cb(value, context, Infinity);
	  };

	  // An internal function for creating assigner functions.
	  var createAssigner = function(keysFunc, undefinedOnly) {
	    return function(obj) {
	      var length = arguments.length;
	      if (length < 2 || obj == null) return obj;
	      for (var index = 1; index < length; index++) {
	        var source = arguments[index],
	            keys = keysFunc(source),
	            l = keys.length;
	        for (var i = 0; i < l; i++) {
	          var key = keys[i];
	          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];
	        }
	      }
	      return obj;
	    };
	  };

	  // An internal function for creating a new object that inherits from another.
	  var baseCreate = function(prototype) {
	    if (!_.isObject(prototype)) return {};
	    if (nativeCreate) return nativeCreate(prototype);
	    Ctor.prototype = prototype;
	    var result = new Ctor;
	    Ctor.prototype = null;
	    return result;
	  };

	  // Helper for collection methods to determine whether a collection
	  // should be iterated as an array or as an object
	  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
	  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
	  var isArrayLike = function(collection) {
	    var length = collection != null && collection.length;
	    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
	  };

	  // Collection Functions
	  // --------------------

	  // The cornerstone, an `each` implementation, aka `forEach`.
	  // Handles raw objects in addition to array-likes. Treats all
	  // sparse array-likes as if they were dense.
	  _.each = _.forEach = function(obj, iteratee, context) {
	    iteratee = optimizeCb(iteratee, context);
	    var i, length;
	    if (isArrayLike(obj)) {
	      for (i = 0, length = obj.length; i < length; i++) {
	        iteratee(obj[i], i, obj);
	      }
	    } else {
	      var keys = _.keys(obj);
	      for (i = 0, length = keys.length; i < length; i++) {
	        iteratee(obj[keys[i]], keys[i], obj);
	      }
	    }
	    return obj;
	  };

	    /**
	     * inherit方法，js的继承，默认为两个参数
	     *
	     * @param  {function} origin  可选，要继承的类
	     * @param  {object}   methods 被创建类的成员，扩展的方法和属性
	     * @return {function}         继承之后的子类
	     */
	    _.inherit = function (origin, methods) {

	        // 参数检测，该继承方法，只支持一个参数创建类，或者两个参数继承类
	        if (arguments.length === 0 || arguments.length > 2) throw '参数错误';

	        var parent = null;

	        // 将参数转换为数组
	        var properties = slice.call(arguments);

	        // 如果第一个参数为类（function），那么就将之取出
	        if (typeof properties[0] === 'function')
	            parent = properties.shift();
	        properties = properties[0];

	        // 创建新类用于返回
	        function klass() {
	            if (_.isFunction(this.initialize))
	                this.initialize.apply(this, arguments);
	        }

	        klass.superclass = parent;

	        // 父类的方法不做保留，直接赋给子类
	        // parent.subclasses = [];

	        if (parent) {
	            // 中间过渡类，防止parent的构造函数被执行
	            var subclass = function () { };
	            subclass.prototype = parent.prototype;
	            klass.prototype = new subclass();

	            // 父类的方法不做保留，直接赋给子类
	            // parent.subclasses.push(klass);
	        }

	        var ancestor = klass.superclass && klass.superclass.prototype;
	        for (var k in properties) {
	            var value = properties[k];

	            //满足条件就重写
	            if (ancestor && typeof value == 'function') {
	                var argslist = /^\s*function\s*\(([^\(\)]*?)\)\s*?\{/i.exec(value.toString())[1].replace(/\s/g, '').split(',');
	                //只有在第一个参数为$super情况下才需要处理（是否具有重复方法需要用户自己决定）
	                if (argslist[0] === '$super' && ancestor[k]) {
	                    value = (function (methodName, fn) {
	                        return function () {
	                            var scope = this;
	                            var args = [
	                                function () {
	                                    return ancestor[methodName].apply(scope, arguments);
	                                }
	                            ];
	                            return fn.apply(this, args.concat(slice.call(arguments)));
	                        };
	                    })(k, value);
	                }
	            }

	            //此处对对象进行扩展，当前原型链已经存在该对象，便进行扩展
	            if (_.isObject(klass.prototype[k]) && _.isObject(value) && (typeof klass.prototype[k] != 'function' && typeof value != 'fuction')) {
	                //原型链是共享的，这里处理逻辑要改
	                var temp = {};
	                _.extend(temp, klass.prototype[k]);
	                _.extend(temp, value);
	                klass.prototype[k] = temp;
	            } else {
	                klass.prototype[k] = value;
	            }
	        }

	        //静态属性继承
	        //兼容代码，非原型属性也需要进行继承
	        for (key in parent) {
	            if (parent.hasOwnProperty(key) && key !== 'prototype' && key !== 'superclass')
	                klass[key] = parent[key];
	        }

	        if (!klass.prototype.initialize)
	            klass.prototype.initialize = function () { };

	        klass.prototype.constructor = klass;

	        return klass;
	    };

	    //获取url参数
	    _.getUrlParam = function (url, key) {
	        if (!url) url = window.location.href;

	        var searchReg = /([^&=?]+)=([^&]+)/g;
	        var urlReg = /\/+.*\?/;
	        var arrayReg = /(.+)\[\]$/;
	        var urlParams = {};
	        var match, name, value, isArray;

	        while (match = searchReg.exec(url)) {
	            name = match[1];
	            value = match[2];
	            isArray = name.match(arrayReg);
	            //处理参数为url这种情况
	            if (urlReg.test(value)) {
	                urlParams[name] = url.substr(url.indexOf(value));
	                break;
	            } else {
	                if (isArray) {
	                    name = isArray[1];
	                    urlParams[name] = urlParams[name] || [];
	                    urlParams[name].push(value);
	                } else {
	                    urlParams[name] = value;
	                }
	            }
	        }

	        for(var k in urlParams) urlParams[k] = decodeURIComponent(urlParams[k]);

	        return key ? urlParams[key] : urlParams;
	    };


	    /**
	     * 日期操作类
	     * @description 静态日期操作类，封装系列日期操作方法
	     * @description 输入时候月份自动减一，输出时候自动加一
	     * @return {object} 返回操作方法
	     */
	    _.dateUtil = {

	        //根据一个日期获取所有信息
	        getDetail: function(date) {
	            if(!date) date = new Date();
	            var d, now = new Date(), dateInfo = {}, _diff;
	            var weekDayArr = ['周日', '周一', '周二', '周三', '周四', '周五', '周六'];

	            if (_.isNumber(date)) {
	                d = new Date();
	                d.setTime(date);
	                date = d;
	            }

	            //充值date对象，让其成为一天的起点时间
	            date = new Date(date.getFullYear(), date.getMonth(), date.getDate());
	            now = new Date(now.getFullYear(), now.getMonth(), now.getDate());

	            _diff = date.getTime() - now.getTime();

	            if(_diff == 0) {
	                dateInfo.day1 = '今天';
	            } else if(_diff == 86400000) {
	                dateInfo.day1 = '明天';
	            } else if(_diff == 172800000) {
	                dateInfo.day1 = '后天';
	            }

	            dateInfo.weekday = weekDayArr[date.getDay()];

	            dateInfo.year = date.getFullYear();
	            dateInfo.month = date.getMonth() + 1;
	            dateInfo.day = date.getDate();

	            return dateInfo;

	        },

	        /**
	         * @description 数字操作，
	         * @return {string} 返回处理后的数字
	         */
	        formatNum: function (n) {
	            if (n < 10) return '0' + n;
	            return n;
	        },
	        /**
	         * @description 将字符串转换为日期，支持格式y-m-d ymd (y m r)以及标准的
	         * @return {Date} 返回日期对象
	         */
	        parse: function (dateStr, formatStr) {
	            if (typeof dateStr === 'undefined') return null;
	            if (typeof formatStr === 'string') {
	                var _d = new Date(formatStr);
	                //首先取得顺序相关字符串
	                var arrStr = formatStr.replace(/[^ymd]/g, '').split('');
	                if (!arrStr && arrStr.length != 3) return null;

	                var formatStr = formatStr.replace(/y|m|d/g, function (k) {
	                    switch (k) {
	                        case 'y': return '(\\d{4})';
	                        case 'm': ;
	                        case 'd': return '(\\d{1,2})';
	                    }
	                });

	                var reg = new RegExp(formatStr, 'g');
	                var arr = reg.exec(dateStr)

	                var dateObj = {};
	                for (var i = 0, len = arrStr.length; i < len; i++) {
	                    dateObj[arrStr[i]] = arr[i + 1];
	                }
	                return new Date(dateObj['y'], dateObj['m'] - 1, dateObj['d']);
	            }
	            return null;
	        },
	        /**
	         * @description将日期格式化为字符串
	         * @return {string} 常用格式化字符串
	         */
	        format: function (date, format) {
	            if (arguments.length < 2 && !date.getTime) {
	                format = date;
	                date = new Date();
	            }
	            typeof format != 'string' && (format = 'Y年M月D日 H时F分S秒');
	            return format.replace(/Y|y|M|m|D|d|H|h|F|f|S|s/g, function (a) {
	                switch (a) {
	                    case "y": return (date.getFullYear() + "").slice(2);
	                    case "Y": return date.getFullYear();
	                    case "m": return date.getMonth() + 1;
	                    case "M": return _.dateUtil.formatNum(date.getMonth() + 1);
	                    case "d": return date.getDate();
	                    case "D": return _.dateUtil.formatNum(date.getDate());
	                    case "h": return date.getHours();
	                    case "H": return _.dateUtil.formatNum(date.getHours());
	                    case "f": return date.getMinutes();
	                    case "F": return _.dateUtil.formatNum(date.getMinutes());
	                    case "s": return date.getSeconds();
	                    case "S": return _.dateUtil.formatNum(date.getSeconds());
	                }
	            });
	        },
	        // @description 是否为为日期对象，该方法可能有坑，使用需要慎重
	        // @param year {num} 日期对象
	        // @return {boolean} 返回值
	        isDate: function (d) {
	            if ((typeof d == 'object') && (d instanceof Date)) return true;
	            return false;
	        },
	        // @description 是否为闰年
	        // @param year {num} 可能是年份或者为一个date时间
	        // @return {boolean} 返回值
	        isLeapYear: function (year) {
	            //传入为时间格式需要处理
	            if (_.dateUtil.isDate(year)) year = year.getFullYear()
	            if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) return true;
	            return false;
	        },

	        // @description 获取一个月份的天数
	        // @param year {num} 可能是年份或者为一个date时间
	        // @param year {num} 月份
	        // @return {num} 返回天数
	        getDaysOfMonth: function (year, month) {
	            //自动减一以便操作
	            month--;
	            if (_.dateUtil.isDate(year)) {
	                month = year.getMonth(); //注意此处月份要加1，所以我们要减一
	                year = year.getFullYear();
	            }
	            return [31, _.dateUtil.isLeapYear(year) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];
	        },

	        // @description 获取一个月份1号是星期几，注意此时的月份传入时需要自主减一
	        // @param year {num} 可能是年份或者为一个date时间
	        // @param year {num} 月份
	        // @return {num} 当月一号为星期几0-6
	        getBeginDayOfMouth: function (year, month) {
	            //自动减一以便操作
	            month--;
	            if ((typeof year == 'object') && (year instanceof Date)) {
	                month = year.getMonth();
	                year = year.getFullYear();
	            }
	            var d = new Date(year, month, 1);
	            return d.getDay();
	        },

	        //不同时区皆返回北京时间
	        getBeijingDate: function (d) {
	            var tmp, localTime, localOffset, beijiTime, utc;
	            if(!_.isDate(d)) {
	                tmp = d;
	                d = new Date();
	                d.setTime(tmp);
	            }

	            //通过调用Data()对象的getTime()方法，即可显示1970年1月1日后到此时时间之间的毫秒数。
	            localTime = d.getTime();
	            //当地时间偏移
	            localOffset = d.getTimezoneOffset() * 60000;
	            //标准时间
	            utc = localTime + localOffset;

	            //加上北京偏移量便是北京时区
	            beijiTime = utc + 28800000;

	            d.setTime(beijiTime);
	            return d;
	        },

	        setBeijingDate: function (d) {
	            var tmp, localTime, localOffset, beijiTime, utc;
	            if(!_.isDate(d)) {
	                tmp = d;
	                d = new Date();
	                d.setTime(tmp);
	            }

	            //通过调用Data()对象的getTime()方法，即可显示1970年1月1日后到此时时间之间的毫秒数。
	            localTime = d.getTime();
	            //当地时间偏移
	            localOffset = d.getTimezoneOffset() * 60000;
	            //标准时间
	            utc = localTime - localOffset;

	            //加上北京偏移量便是北京时区
	            beijiTime = utc - 28800000;

	            d.setTime(beijiTime);
	            return d;
	        }

	    };

	  // Return the results of applying the iteratee to each element.
	  _.map = _.collect = function(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length,
	        results = Array(length);
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      results[index] = iteratee(obj[currentKey], currentKey, obj);
	    }
	    return results;
	  };

	  // Create a reducing function iterating left or right.
	  function createReduce(dir) {
	    // Optimized iterator function as using arguments.length
	    // in the main function will deoptimize the, see #1991.
	    function iterator(obj, iteratee, memo, keys, index, length) {
	      for (; index >= 0 && index < length; index += dir) {
	        var currentKey = keys ? keys[index] : index;
	        memo = iteratee(memo, obj[currentKey], currentKey, obj);
	      }
	      return memo;
	    }

	    return function(obj, iteratee, memo, context) {
	      iteratee = optimizeCb(iteratee, context, 4);
	      var keys = !isArrayLike(obj) && _.keys(obj),
	          length = (keys || obj).length,
	          index = dir > 0 ? 0 : length - 1;
	      // Determine the initial value if none is provided.
	      if (arguments.length < 3) {
	        memo = obj[keys ? keys[index] : index];
	        index += dir;
	      }
	      return iterator(obj, iteratee, memo, keys, index, length);
	    };
	  }

	  // **Reduce** builds up a single result from a list of values, aka `inject`,
	  // or `foldl`.
	  _.reduce = _.foldl = _.inject = createReduce(1);

	  // The right-associative version of reduce, also known as `foldr`.
	  _.reduceRight = _.foldr = createReduce(-1);

	  // Return the first value which passes a truth test. Aliased as `detect`.
	  _.find = _.detect = function(obj, predicate, context) {
	    var key;
	    if (isArrayLike(obj)) {
	      key = _.findIndex(obj, predicate, context);
	    } else {
	      key = _.findKey(obj, predicate, context);
	    }
	    if (key !== void 0 && key !== -1) return obj[key];
	  };

	  // Return all the elements that pass a truth test.
	  // Aliased as `select`.
	  _.filter = _.select = function(obj, predicate, context) {
	    var results = [];
	    predicate = cb(predicate, context);
	    _.each(obj, function(value, index, list) {
	      if (predicate(value, index, list)) results.push(value);
	    });
	    return results;
	  };

	  // Return all the elements for which a truth test fails.
	  _.reject = function(obj, predicate, context) {
	    return _.filter(obj, _.negate(cb(predicate)), context);
	  };

	  // Determine whether all of the elements match a truth test.
	  // Aliased as `all`.
	  _.every = _.all = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length;
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      if (!predicate(obj[currentKey], currentKey, obj)) return false;
	    }
	    return true;
	  };

	  // Determine if at least one element in the object matches a truth test.
	  // Aliased as `any`.
	  _.some = _.any = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length;
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      if (predicate(obj[currentKey], currentKey, obj)) return true;
	    }
	    return false;
	  };

	  // Determine if the array or object contains a given value (using `===`).
	  // Aliased as `includes` and `include`.
	  _.contains = _.includes = _.include = function(obj, target, fromIndex) {
	    if (!isArrayLike(obj)) obj = _.values(obj);
	    return _.indexOf(obj, target, typeof fromIndex == 'number' && fromIndex) >= 0;
	  };

	  // Invoke a method (with arguments) on every item in a collection.
	  _.invoke = function(obj, method) {
	    var args = slice.call(arguments, 2);
	    var isFunc = _.isFunction(method);
	    return _.map(obj, function(value) {
	      var func = isFunc ? method : value[method];
	      return func == null ? func : func.apply(value, args);
	    });
	  };

	  // Convenience version of a common use case of `map`: fetching a property.
	  _.pluck = function(obj, key) {
	    return _.map(obj, _.property(key));
	  };

	  // Convenience version of a common use case of `filter`: selecting only objects
	  // containing specific `key:value` pairs.
	  _.where = function(obj, attrs) {
	    return _.filter(obj, _.matcher(attrs));
	  };

	  // Convenience version of a common use case of `find`: getting the first object
	  // containing specific `key:value` pairs.
	  _.findWhere = function(obj, attrs) {
	    return _.find(obj, _.matcher(attrs));
	  };

	  // Return the maximum element (or element-based computation).
	  _.max = function(obj, iteratee, context) {
	    var result = -Infinity, lastComputed = -Infinity,
	        value, computed;
	    if (iteratee == null && obj != null) {
	      obj = isArrayLike(obj) ? obj : _.values(obj);
	      for (var i = 0, length = obj.length; i < length; i++) {
	        value = obj[i];
	        if (value > result) {
	          result = value;
	        }
	      }
	    } else {
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(value, index, list) {
	        computed = iteratee(value, index, list);
	        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
	          result = value;
	          lastComputed = computed;
	        }
	      });
	    }
	    return result;
	  };

	  // Return the minimum element (or element-based computation).
	  _.min = function(obj, iteratee, context) {
	    var result = Infinity, lastComputed = Infinity,
	        value, computed;
	    if (iteratee == null && obj != null) {
	      obj = isArrayLike(obj) ? obj : _.values(obj);
	      for (var i = 0, length = obj.length; i < length; i++) {
	        value = obj[i];
	        if (value < result) {
	          result = value;
	        }
	      }
	    } else {
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(value, index, list) {
	        computed = iteratee(value, index, list);
	        if (computed < lastComputed || computed === Infinity && result === Infinity) {
	          result = value;
	          lastComputed = computed;
	        }
	      });
	    }
	    return result;
	  };

	  // Shuffle a collection, using the modern version of the
	  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher鈥揧ates_shuffle).
	  _.shuffle = function(obj) {
	    var set = isArrayLike(obj) ? obj : _.values(obj);
	    var length = set.length;
	    var shuffled = Array(length);
	    for (var index = 0, rand; index < length; index++) {
	      rand = _.random(0, index);
	      if (rand !== index) shuffled[index] = shuffled[rand];
	      shuffled[rand] = set[index];
	    }
	    return shuffled;
	  };

	  // Sample **n** random values from a collection.
	  // If **n** is not specified, returns a single random element.
	  // The internal `guard` argument allows it to work with `map`.
	  _.sample = function(obj, n, guard) {
	    if (n == null || guard) {
	      if (!isArrayLike(obj)) obj = _.values(obj);
	      return obj[_.random(obj.length - 1)];
	    }
	    return _.shuffle(obj).slice(0, Math.max(0, n));
	  };

	  // Sort the object's values by a criterion produced by an iteratee.
	  _.sortBy = function(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    return _.pluck(_.map(obj, function(value, index, list) {
	      return {
	        value: value,
	        index: index,
	        criteria: iteratee(value, index, list)
	      };
	    }).sort(function(left, right) {
	      var a = left.criteria;
	      var b = right.criteria;
	      if (a !== b) {
	        if (a > b || a === void 0) return 1;
	        if (a < b || b === void 0) return -1;
	      }
	      return left.index - right.index;
	    }), 'value');
	  };

	  // An internal function used for aggregate "group by" operations.
	  var group = function(behavior) {
	    return function(obj, iteratee, context) {
	      var result = {};
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(value, index) {
	        var key = iteratee(value, index, obj);
	        behavior(result, value, key);
	      });
	      return result;
	    };
	  };

	  // Groups the object's values by a criterion. Pass either a string attribute
	  // to group by, or a function that returns the criterion.
	  _.groupBy = group(function(result, value, key) {
	    if (_.has(result, key)) result[key].push(value); else result[key] = [value];
	  });

	  // Indexes the object's values by a criterion, similar to `groupBy`, but for
	  // when you know that your index values will be unique.
	  _.indexBy = group(function(result, value, key) {
	    result[key] = value;
	  });

	  // Counts instances of an object that group by a certain criterion. Pass
	  // either a string attribute to count by, or a function that returns the
	  // criterion.
	  _.countBy = group(function(result, value, key) {
	    if (_.has(result, key)) result[key]++; else result[key] = 1;
	  });

	  // Safely create a real, live array from anything iterable.
	  _.toArray = function(obj) {
	    if (!obj) return [];
	    if (_.isArray(obj)) return slice.call(obj);
	    if (isArrayLike(obj)) return _.map(obj, _.identity);
	    return _.values(obj);
	  };

	  // Return the number of elements in an object.
	  _.size = function(obj) {
	    if (obj == null) return 0;
	    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
	  };

	  // Split a collection into two arrays: one whose elements all satisfy the given
	  // predicate, and one whose elements all do not satisfy the predicate.
	  _.partition = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var pass = [], fail = [];
	    _.each(obj, function(value, key, obj) {
	      (predicate(value, key, obj) ? pass : fail).push(value);
	    });
	    return [pass, fail];
	  };

	  // Array Functions
	  // ---------------

	  // Get the first element of an array. Passing **n** will return the first N
	  // values in the array. Aliased as `head` and `take`. The **guard** check
	  // allows it to work with `_.map`.
	  _.first = _.head = _.take = function(array, n, guard) {
	    if (array == null) return void 0;
	    if (n == null || guard) return array[0];
	    return _.initial(array, array.length - n);
	  };

	  // Returns everything but the last entry of the array. Especially useful on
	  // the arguments object. Passing **n** will return all the values in
	  // the array, excluding the last N.
	  _.initial = function(array, n, guard) {
	    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
	  };

	  // Get the last element of an array. Passing **n** will return the last N
	  // values in the array.
	  _.last = function(array, n, guard) {
	    if (array == null) return void 0;
	    if (n == null || guard) return array[array.length - 1];
	    return _.rest(array, Math.max(0, array.length - n));
	  };

	  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
	  // Especially useful on the arguments object. Passing an **n** will return
	  // the rest N values in the array.
	  _.rest = _.tail = _.drop = function(array, n, guard) {
	    return slice.call(array, n == null || guard ? 1 : n);
	  };

	  // Trim out all falsy values from an array.
	  _.compact = function(array) {
	    return _.filter(array, _.identity);
	  };

	  // Internal implementation of a recursive `flatten` function.
	  var flatten = function(input, shallow, strict, startIndex) {
	    var output = [], idx = 0;
	    for (var i = startIndex || 0, length = input && input.length; i < length; i++) {
	      var value = input[i];
	      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
	        //flatten current level of array or arguments object
	        if (!shallow) value = flatten(value, shallow, strict);
	        var j = 0, len = value.length;
	        output.length += len;
	        while (j < len) {
	          output[idx++] = value[j++];
	        }
	      } else if (!strict) {
	        output[idx++] = value;
	      }
	    }
	    return output;
	  };

	  // Flatten out an array, either recursively (by default), or just one level.
	  _.flatten = function(array, shallow) {
	    return flatten(array, shallow, false);
	  };

	  // Return a version of the array that does not contain the specified value(s).
	  _.without = function(array) {
	    return _.difference(array, slice.call(arguments, 1));
	  };

	  // Produce a duplicate-free version of the array. If the array has already
	  // been sorted, you have the option of using a faster algorithm.
	  // Aliased as `unique`.
	  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
	    if (array == null) return [];
	    if (!_.isBoolean(isSorted)) {
	      context = iteratee;
	      iteratee = isSorted;
	      isSorted = false;
	    }
	    if (iteratee != null) iteratee = cb(iteratee, context);
	    var result = [];
	    var seen = [];
	    for (var i = 0, length = array.length; i < length; i++) {
	      var value = array[i],
	          computed = iteratee ? iteratee(value, i, array) : value;
	      if (isSorted) {
	        if (!i || seen !== computed) result.push(value);
	        seen = computed;
	      } else if (iteratee) {
	        if (!_.contains(seen, computed)) {
	          seen.push(computed);
	          result.push(value);
	        }
	      } else if (!_.contains(result, value)) {
	        result.push(value);
	      }
	    }
	    return result;
	  };

	  // Produce an array that contains the union: each distinct element from all of
	  // the passed-in arrays.
	  _.union = function() {
	    return _.uniq(flatten(arguments, true, true));
	  };

	  // Produce an array that contains every item shared between all the
	  // passed-in arrays.
	  _.intersection = function(array) {
	    if (array == null) return [];
	    var result = [];
	    var argsLength = arguments.length;
	    for (var i = 0, length = array.length; i < length; i++) {
	      var item = array[i];
	      if (_.contains(result, item)) continue;
	      for (var j = 1; j < argsLength; j++) {
	        if (!_.contains(arguments[j], item)) break;
	      }
	      if (j === argsLength) result.push(item);
	    }
	    return result;
	  };

	  // Take the difference between one array and a number of other arrays.
	  // Only the elements present in just the first array will remain.
	  _.difference = function(array) {
	    var rest = flatten(arguments, true, true, 1);
	    return _.filter(array, function(value){
	      return !_.contains(rest, value);
	    });
	  };

	  // Zip together multiple lists into a single array -- elements that share
	  // an index go together.
	  _.zip = function() {
	    return _.unzip(arguments);
	  };

	  // Complement of _.zip. Unzip accepts an array of arrays and groups
	  // each array's elements on shared indices
	  _.unzip = function(array) {
	    var length = array && _.max(array, 'length').length || 0;
	    var result = Array(length);

	    for (var index = 0; index < length; index++) {
	      result[index] = _.pluck(array, index);
	    }
	    return result;
	  };

	  // Converts lists into objects. Pass either a single array of `[key, value]`
	  // pairs, or two parallel arrays of the same length -- one of keys, and one of
	  // the corresponding values.
	  _.object = function(list, values) {
	    var result = {};
	    for (var i = 0, length = list && list.length; i < length; i++) {
	      if (values) {
	        result[list[i]] = values[i];
	      } else {
	        result[list[i][0]] = list[i][1];
	      }
	    }
	    return result;
	  };

	  // Return the position of the first occurrence of an item in an array,
	  // or -1 if the item is not included in the array.
	  // If the array is large and already in sort order, pass `true`
	  // for **isSorted** to use binary search.
	  _.indexOf = function(array, item, isSorted) {
	    var i = 0, length = array && array.length;
	    if (typeof isSorted == 'number') {
	      i = isSorted < 0 ? Math.max(0, length + isSorted) : isSorted;
	    } else if (isSorted && length) {
	      i = _.sortedIndex(array, item);
	      return array[i] === item ? i : -1;
	    }
	    if (item !== item) {
	      return _.findIndex(slice.call(array, i), _.isNaN);
	    }
	    for (; i < length; i++) if (array[i] === item) return i;
	    return -1;
	  };

	  _.lastIndexOf = function(array, item, from) {
	    var idx = array ? array.length : 0;
	    if (typeof from == 'number') {
	      idx = from < 0 ? idx + from + 1 : Math.min(idx, from + 1);
	    }
	    if (item !== item) {
	      return _.findLastIndex(slice.call(array, 0, idx), _.isNaN);
	    }
	    while (--idx >= 0) if (array[idx] === item) return idx;
	    return -1;
	  };

	  // Generator function to create the findIndex and findLastIndex functions
	  function createIndexFinder(dir) {
	    return function(array, predicate, context) {
	      predicate = cb(predicate, context);
	      var length = array != null && array.length;
	      var index = dir > 0 ? 0 : length - 1;
	      for (; index >= 0 && index < length; index += dir) {
	        if (predicate(array[index], index, array)) return index;
	      }
	      return -1;
	    };
	  }

	  // Returns the first index on an array-like that passes a predicate test
	  _.findIndex = createIndexFinder(1);

	  _.findLastIndex = createIndexFinder(-1);

	  // Use a comparator function to figure out the smallest index at which
	  // an object should be inserted so as to maintain order. Uses binary search.
	  _.sortedIndex = function(array, obj, iteratee, context) {
	    iteratee = cb(iteratee, context, 1);
	    var value = iteratee(obj);
	    var low = 0, high = array.length;
	    while (low < high) {
	      var mid = Math.floor((low + high) / 2);
	      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
	    }
	    return low;
	  };

	  // Generate an integer Array containing an arithmetic progression. A port of
	  // the native Python `range()` function. See
	  // [the Python documentation](http://docs.python.org/library/functions.html#range).
	  _.range = function(start, stop, step) {
	    if (arguments.length <= 1) {
	      stop = start || 0;
	      start = 0;
	    }
	    step = step || 1;

	    var length = Math.max(Math.ceil((stop - start) / step), 0);
	    var range = Array(length);

	    for (var idx = 0; idx < length; idx++, start += step) {
	      range[idx] = start;
	    }

	    return range;
	  };

	  // Function (ahem) Functions
	  // ------------------

	  // Determines whether to execute a function as a constructor
	  // or a normal function with the provided arguments
	  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
	    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
	    var self = baseCreate(sourceFunc.prototype);
	    var result = sourceFunc.apply(self, args);
	    if (_.isObject(result)) return result;
	    return self;
	  };

	  // Create a function bound to a given object (assigning `this`, and arguments,
	  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
	  // available.
	  _.bind = function(func, context) {
	    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
	    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
	    var args = slice.call(arguments, 2);
	    var bound = function() {
	      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));
	    };
	    return bound;
	  };

	  // Partially apply a function by creating a version that has had some of its
	  // arguments pre-filled, without changing its dynamic `this` context. _ acts
	  // as a placeholder, allowing any combination of arguments to be pre-filled.
	  _.partial = function(func) {
	    var boundArgs = slice.call(arguments, 1);
	    var bound = function() {
	      var position = 0, length = boundArgs.length;
	      var args = Array(length);
	      for (var i = 0; i < length; i++) {
	        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];
	      }
	      while (position < arguments.length) args.push(arguments[position++]);
	      return executeBound(func, bound, this, this, args);
	    };
	    return bound;
	  };

	  // Bind a number of an object's methods to that object. Remaining arguments
	  // are the method names to be bound. Useful for ensuring that all callbacks
	  // defined on an object belong to it.
	  _.bindAll = function(obj) {
	    var i, length = arguments.length, key;
	    if (length <= 1) throw new Error('bindAll must be passed function names');
	    for (i = 1; i < length; i++) {
	      key = arguments[i];
	      obj[key] = _.bind(obj[key], obj);
	    }
	    return obj;
	  };

	  // Memoize an expensive function by storing its results.
	  _.memoize = function(func, hasher) {
	    var memoize = function(key) {
	      var cache = memoize.cache;
	      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
	      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
	      return cache[address];
	    };
	    memoize.cache = {};
	    return memoize;
	  };

	  // Delays a function for the given number of milliseconds, and then calls
	  // it with the arguments supplied.
	  _.delay = function(func, wait) {
	    var args = slice.call(arguments, 2);
	    return setTimeout(function(){
	      return func.apply(null, args);
	    }, wait);
	  };

	  // Defers a function, scheduling it to run after the current call stack has
	  // cleared.
	  _.defer = _.partial(_.delay, _, 1);

	  // Returns a function, that, when invoked, will only be triggered at most once
	  // during a given window of time. Normally, the throttled function will run
	  // as much as it can, without ever going more than once per `wait` duration;
	  // but if you'd like to disable the execution on the leading edge, pass
	  // `{leading: false}`. To disable execution on the trailing edge, ditto.
	  _.throttle = function(func, wait, options) {
	    var context, args, result;
	    var timeout = null;
	    var previous = 0;
	    if (!options) options = {};
	    var later = function() {
	      previous = options.leading === false ? 0 : _.now();
	      timeout = null;
	      result = func.apply(context, args);
	      if (!timeout) context = args = null;
	    };
	    return function() {
	      var now = _.now();
	      if (!previous && options.leading === false) previous = now;
	      var remaining = wait - (now - previous);
	      context = this;
	      args = arguments;
	      if (remaining <= 0 || remaining > wait) {
	        if (timeout) {
	          clearTimeout(timeout);
	          timeout = null;
	        }
	        previous = now;
	        result = func.apply(context, args);
	        if (!timeout) context = args = null;
	      } else if (!timeout && options.trailing !== false) {
	        timeout = setTimeout(later, remaining);
	      }
	      return result;
	    };
	  };

	  // Returns a function, that, as long as it continues to be invoked, will not
	  // be triggered. The function will be called after it stops being called for
	  // N milliseconds. If `immediate` is passed, trigger the function on the
	  // leading edge, instead of the trailing.
	  _.debounce = function(func, wait, immediate) {
	    var timeout, args, context, timestamp, result;

	    var later = function() {
	      var last = _.now() - timestamp;

	      if (last < wait && last >= 0) {
	        timeout = setTimeout(later, wait - last);
	      } else {
	        timeout = null;
	        if (!immediate) {
	          result = func.apply(context, args);
	          if (!timeout) context = args = null;
	        }
	      }
	    };

	    return function() {
	      context = this;
	      args = arguments;
	      timestamp = _.now();
	      var callNow = immediate && !timeout;
	      if (!timeout) timeout = setTimeout(later, wait);
	      if (callNow) {
	        result = func.apply(context, args);
	        context = args = null;
	      }

	      return result;
	    };
	  };

	  // Returns the first function passed as an argument to the second,
	  // allowing you to adjust arguments, run code before and after, and
	  // conditionally execute the original function.
	  _.wrap = function(func, wrapper) {
	    return _.partial(wrapper, func);
	  };

	  // Returns a negated version of the passed-in predicate.
	  _.negate = function(predicate) {
	    return function() {
	      return !predicate.apply(this, arguments);
	    };
	  };

	  // Returns a function that is the composition of a list of functions, each
	  // consuming the return value of the function that follows.
	  _.compose = function() {
	    var args = arguments;
	    var start = args.length - 1;
	    return function() {
	      var i = start;
	      var result = args[start].apply(this, arguments);
	      while (i--) result = args[i].call(this, result);
	      return result;
	    };
	  };

	  // Returns a function that will only be executed on and after the Nth call.
	  _.after = function(times, func) {
	    return function() {
	      if (--times < 1) {
	        return func.apply(this, arguments);
	      }
	    };
	  };

	  // Returns a function that will only be executed up to (but not including) the Nth call.
	  _.before = function(times, func) {
	    var memo;
	    return function() {
	      if (--times > 0) {
	        memo = func.apply(this, arguments);
	      }
	      if (times <= 1) func = null;
	      return memo;
	    };
	  };

	  // Returns a function that will be executed at most one time, no matter how
	  // often you call it. Useful for lazy initialization.
	  _.once = _.partial(_.before, 2);

	  // Object Functions
	  // ----------------

	  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
	  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
	  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
	                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

	  function collectNonEnumProps(obj, keys) {
	    var nonEnumIdx = nonEnumerableProps.length;
	    var constructor = obj.constructor;
	    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;

	    // Constructor is a special case.
	    var prop = 'constructor';
	    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

	    while (nonEnumIdx--) {
	      prop = nonEnumerableProps[nonEnumIdx];
	      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
	        keys.push(prop);
	      }
	    }
	  }

	  // Retrieve the names of an object's own properties.
	  // Delegates to **ECMAScript 5**'s native `Object.keys`
	  _.keys = function(obj) {
	    if (!_.isObject(obj)) return [];
	    if (nativeKeys) return nativeKeys(obj);
	    var keys = [];
	    for (var key in obj) if (_.has(obj, key)) keys.push(key);
	    // Ahem, IE < 9.
	    if (hasEnumBug) collectNonEnumProps(obj, keys);
	    return keys;
	  };

	  // Retrieve all the property names of an object.
	  _.allKeys = function(obj) {
	    if (!_.isObject(obj)) return [];
	    var keys = [];
	    for (var key in obj) keys.push(key);
	    // Ahem, IE < 9.
	    if (hasEnumBug) collectNonEnumProps(obj, keys);
	    return keys;
	  };

	  // Retrieve the values of an object's properties.
	  _.values = function(obj) {
	    var keys = _.keys(obj);
	    var length = keys.length;
	    var values = Array(length);
	    for (var i = 0; i < length; i++) {
	      values[i] = obj[keys[i]];
	    }
	    return values;
	  };

	  // Returns the results of applying the iteratee to each element of the object
	  // In contrast to _.map it returns an object
	  _.mapObject = function(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    var keys =  _.keys(obj),
	          length = keys.length,
	          results = {},
	          currentKey;
	      for (var index = 0; index < length; index++) {
	        currentKey = keys[index];
	        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
	      }
	      return results;
	  };

	  // Convert an object into a list of `[key, value]` pairs.
	  _.pairs = function(obj) {
	    var keys = _.keys(obj);
	    var length = keys.length;
	    var pairs = Array(length);
	    for (var i = 0; i < length; i++) {
	      pairs[i] = [keys[i], obj[keys[i]]];
	    }
	    return pairs;
	  };

	  // Invert the keys and values of an object. The values must be serializable.
	  _.invert = function(obj) {
	    var result = {};
	    var keys = _.keys(obj);
	    for (var i = 0, length = keys.length; i < length; i++) {
	      result[obj[keys[i]]] = keys[i];
	    }
	    return result;
	  };

	  // Return a sorted list of the function names available on the object.
	  // Aliased as `methods`
	  _.functions = _.methods = function(obj) {
	    var names = [];
	    for (var key in obj) {
	      if (_.isFunction(obj[key])) names.push(key);
	    }
	    return names.sort();
	  };

	  // Extend a given object with all the properties in passed-in object(s).
	  _.extend = createAssigner(_.allKeys);

	  // Assigns a given object with all the own properties in the passed-in object(s)
	  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
	  _.extendOwn = _.assign = createAssigner(_.keys);

	  // Returns the first key on an object that passes a predicate test
	  _.findKey = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = _.keys(obj), key;
	    for (var i = 0, length = keys.length; i < length; i++) {
	      key = keys[i];
	      if (predicate(obj[key], key, obj)) return key;
	    }
	  };

	  // Return a copy of the object only containing the whitelisted properties.
	  _.pick = function(object, oiteratee, context) {
	    var result = {}, obj = object, iteratee, keys;
	    if (obj == null) return result;
	    if (_.isFunction(oiteratee)) {
	      keys = _.allKeys(obj);
	      iteratee = optimizeCb(oiteratee, context);
	    } else {
	      keys = flatten(arguments, false, false, 1);
	      iteratee = function(value, key, obj) { return key in obj; };
	      obj = Object(obj);
	    }
	    for (var i = 0, length = keys.length; i < length; i++) {
	      var key = keys[i];
	      var value = obj[key];
	      if (iteratee(value, key, obj)) result[key] = value;
	    }
	    return result;
	  };

	   // Return a copy of the object without the blacklisted properties.
	  _.omit = function(obj, iteratee, context) {
	    if (_.isFunction(iteratee)) {
	      iteratee = _.negate(iteratee);
	    } else {
	      var keys = _.map(flatten(arguments, false, false, 1), String);
	      iteratee = function(value, key) {
	        return !_.contains(keys, key);
	      };
	    }
	    return _.pick(obj, iteratee, context);
	  };

	  // Fill in a given object with default properties.
	  _.defaults = createAssigner(_.allKeys, true);

	  // Creates an object that inherits from the given prototype object.
	  // If additional properties are provided then they will be added to the
	  // created object.
	  _.create = function(prototype, props) {
	    var result = baseCreate(prototype);
	    if (props) _.extendOwn(result, props);
	    return result;
	  };

	  // Create a (shallow-cloned) duplicate of an object.
	  _.clone = function(obj) {
	    if (!_.isObject(obj)) return obj;
	    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
	  };

	  // Invokes interceptor with the obj, and then returns obj.
	  // The primary purpose of this method is to "tap into" a method chain, in
	  // order to perform operations on intermediate results within the chain.
	  _.tap = function(obj, interceptor) {
	    interceptor(obj);
	    return obj;
	  };

	  // Returns whether an object has a given set of `key:value` pairs.
	  _.isMatch = function(object, attrs) {
	    var keys = _.keys(attrs), length = keys.length;
	    if (object == null) return !length;
	    var obj = Object(object);
	    for (var i = 0; i < length; i++) {
	      var key = keys[i];
	      if (attrs[key] !== obj[key] || !(key in obj)) return false;
	    }
	    return true;
	  };


	  // Internal recursive comparison function for `isEqual`.
	  var eq = function(a, b, aStack, bStack) {
	    // Identical objects are equal. `0 === -0`, but they aren't identical.
	    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
	    if (a === b) return a !== 0 || 1 / a === 1 / b;
	    // A strict comparison is necessary because `null == undefined`.
	    if (a == null || b == null) return a === b;
	    // Unwrap any wrapped objects.
	    if (a instanceof _) a = a._wrapped;
	    if (b instanceof _) b = b._wrapped;
	    // Compare `[[Class]]` names.
	    var className = toString.call(a);
	    if (className !== toString.call(b)) return false;
	    switch (className) {
	      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
	      case '[object RegExp]':
	      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
	      case '[object String]':
	        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
	        // equivalent to `new String("5")`.
	        return '' + a === '' + b;
	      case '[object Number]':
	        // `NaN`s are equivalent, but non-reflexive.
	        // Object(NaN) is equivalent to NaN
	        if (+a !== +a) return +b !== +b;
	        // An `egal` comparison is performed for other numeric values.
	        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
	      case '[object Date]':
	      case '[object Boolean]':
	        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
	        // millisecond representations. Note that invalid dates with millisecond representations
	        // of `NaN` are not equivalent.
	        return +a === +b;
	    }

	    var areArrays = className === '[object Array]';
	    if (!areArrays) {
	      if (typeof a != 'object' || typeof b != 'object') return false;

	      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
	      // from different frames are.
	      var aCtor = a.constructor, bCtor = b.constructor;
	      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
	                               _.isFunction(bCtor) && bCtor instanceof bCtor)
	                          && ('constructor' in a && 'constructor' in b)) {
	        return false;
	      }
	    }
	    // Assume equality for cyclic structures. The algorithm for detecting cyclic
	    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
	    
	    // Initializing stack of traversed objects.
	    // It's done here since we only need them for objects and arrays comparison.
	    aStack = aStack || [];
	    bStack = bStack || [];
	    var length = aStack.length;
	    while (length--) {
	      // Linear search. Performance is inversely proportional to the number of
	      // unique nested structures.
	      if (aStack[length] === a) return bStack[length] === b;
	    }

	    // Add the first object to the stack of traversed objects.
	    aStack.push(a);
	    bStack.push(b);

	    // Recursively compare objects and arrays.
	    if (areArrays) {
	      // Compare array lengths to determine if a deep comparison is necessary.
	      length = a.length;
	      if (length !== b.length) return false;
	      // Deep compare the contents, ignoring non-numeric properties.
	      while (length--) {
	        if (!eq(a[length], b[length], aStack, bStack)) return false;
	      }
	    } else {
	      // Deep compare objects.
	      var keys = _.keys(a), key;
	      length = keys.length;
	      // Ensure that both objects contain the same number of properties before comparing deep equality.
	      if (_.keys(b).length !== length) return false;
	      while (length--) {
	        // Deep compare each member
	        key = keys[length];
	        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
	      }
	    }
	    // Remove the first object from the stack of traversed objects.
	    aStack.pop();
	    bStack.pop();
	    return true;
	  };

	  // Perform a deep comparison to check if two objects are equal.
	  _.isEqual = function(a, b) {
	    return eq(a, b);
	  };

	  // Is a given array, string, or object empty?
	  // An "empty" object has no enumerable own-properties.
	  _.isEmpty = function(obj) {
	    if (obj == null) return true;
	    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
	    return _.keys(obj).length === 0;
	  };

	  // Is a given value a DOM element?
	  _.isElement = function(obj) {
	    return !!(obj && obj.nodeType === 1);
	  };

	  // Is a given value an array?
	  // Delegates to ECMA5's native Array.isArray
	  _.isArray = nativeIsArray || function(obj) {
	    return toString.call(obj) === '[object Array]';
	  };

	  // Is a given variable an object?
	  _.isObject = function(obj) {
	    var type = typeof obj;
	    return type === 'function' || type === 'object' && !!obj;
	  };

	  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.
	  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {
	    _['is' + name] = function(obj) {
	      return toString.call(obj) === '[object ' + name + ']';
	    };
	  });

	  // Define a fallback version of the method in browsers (ahem, IE < 9), where
	  // there isn't any inspectable "Arguments" type.
	  if (!_.isArguments(arguments)) {
	    _.isArguments = function(obj) {
	      return _.has(obj, 'callee');
	    };
	  }

	  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
	  // IE 11 (#1621), and in Safari 8 (#1929).
	  if (typeof /./ != 'function' && typeof Int8Array != 'object') {
	    _.isFunction = function(obj) {
	      return typeof obj == 'function' || false;
	    };
	  }

	  // Is a given object a finite number?
	  _.isFinite = function(obj) {
	    return isFinite(obj) && !isNaN(parseFloat(obj));
	  };

	  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
	  _.isNaN = function(obj) {
	    return _.isNumber(obj) && obj !== +obj;
	  };

	  // Is a given value a boolean?
	  _.isBoolean = function(obj) {
	    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
	  };

	  // Is a given value equal to null?
	  _.isNull = function(obj) {
	    return obj === null;
	  };

	  // Is a given variable undefined?
	  _.isUndefined = function(obj) {
	    return obj === void 0;
	  };

	  // Shortcut function for checking if an object has a given property directly
	  // on itself (in other words, not on a prototype).
	  _.has = function(obj, key) {
	    return obj != null && hasOwnProperty.call(obj, key);
	  };

	  // Utility Functions
	  // -----------------

	  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
	  // previous owner. Returns a reference to the Underscore object.
	  _.noConflict = function() {
	    root._ = previousUnderscore;
	    return this;
	  };

	  // Keep the identity function around for default iteratees.
	  _.identity = function(value) {
	    return value;
	  };

	  // Predicate-generating functions. Often useful outside of Underscore.
	  _.constant = function(value) {
	    return function() {
	      return value;
	    };
	  };

	  _.noop = function(){};

	  _.property = function(key) {
	    return function(obj) {
	      return obj == null ? void 0 : obj[key];
	    };
	  };

	  // Generates a function for a given object that returns a given property.
	  _.propertyOf = function(obj) {
	    return obj == null ? function(){} : function(key) {
	      return obj[key];
	    };
	  };

	  // Returns a predicate for checking whether an object has a given set of 
	  // `key:value` pairs.
	  _.matcher = _.matches = function(attrs) {
	    attrs = _.extendOwn({}, attrs);
	    return function(obj) {
	      return _.isMatch(obj, attrs);
	    };
	  };

	  // Run a function **n** times.
	  _.times = function(n, iteratee, context) {
	    var accum = Array(Math.max(0, n));
	    iteratee = optimizeCb(iteratee, context, 1);
	    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
	    return accum;
	  };

	  // Return a random integer between min and max (inclusive).
	  _.random = function(min, max) {
	    if (max == null) {
	      max = min;
	      min = 0;
	    }
	    return min + Math.floor(Math.random() * (max - min + 1));
	  };

	  // A (possibly faster) way to get the current timestamp as an integer.
	  _.now = Date.now || function() {
	    return new Date().getTime();
	  };

	   // List of HTML entities for escaping.
	  var escapeMap = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#x27;',
	    '`': '&#x60;'
	  };
	  var unescapeMap = _.invert(escapeMap);

	  // Functions for escaping and unescaping strings to/from HTML interpolation.
	  var createEscaper = function(map) {
	    var escaper = function(match) {
	      return map[match];
	    };
	    // Regexes for identifying a key that needs to be escaped
	    var source = '(?:' + _.keys(map).join('|') + ')';
	    var testRegexp = RegExp(source);
	    var replaceRegexp = RegExp(source, 'g');
	    return function(string) {
	      string = string == null ? '' : '' + string;
	      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
	    };
	  };
	  _.escape = createEscaper(escapeMap);
	  _.unescape = createEscaper(unescapeMap);

	  // If the value of the named `property` is a function then invoke it with the
	  // `object` as context; otherwise, return it.
	  _.result = function(object, property, fallback) {
	    var value = object == null ? void 0 : object[property];
	    if (value === void 0) {
	      value = fallback;
	    }
	    return _.isFunction(value) ? value.call(object) : value;
	  };

	  // Generate a unique integer id (unique within the entire client session).
	  // Useful for temporary DOM ids.
	  var idCounter = 0;
	  _.uniqueId = function(prefix) {
	    var id = ++idCounter + '';
	    return prefix ? prefix + id : id;
	  };

	  // By default, Underscore uses ERB-style template delimiters, change the
	  // following template settings to use alternative delimiters.
	  _.templateSettings = {
	    evaluate    : /<%([\s\S]+?)%>/g,
	    interpolate : /<%=([\s\S]+?)%>/g,
	    escape      : /<%-([\s\S]+?)%>/g
	  };

	  // When customizing `templateSettings`, if you don't want to define an
	  // interpolation, evaluation or escaping regex, we need one that is
	  // guaranteed not to match.
	  var noMatch = /(.)^/;

	  // Certain characters need to be escaped so that they can be put into a
	  // string literal.
	  var escapes = {
	    "'":      "'",
	    '\\':     '\\',
	    '\r':     'r',
	    '\n':     'n',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };

	  var escaper = /\\|'|\r|\n|\u2028|\u2029/g;

	  var escapeChar = function(match) {
	    return '\\' + escapes[match];
	  };

	  // JavaScript micro-templating, similar to John Resig's implementation.
	  // Underscore templating handles arbitrary delimiters, preserves whitespace,
	  // and correctly escapes quotes within interpolated code.
	  // NB: `oldSettings` only exists for backwards compatibility.
	  _.template = function(text, settings, oldSettings) {
	    if (!settings && oldSettings) settings = oldSettings;
	    settings = _.defaults({}, settings, _.templateSettings);

	    // Combine delimiters into one regular expression via alternation.
	    var matcher = RegExp([
	      (settings.escape || noMatch).source,
	      (settings.interpolate || noMatch).source,
	      (settings.evaluate || noMatch).source
	    ].join('|') + '|$', 'g');

	    // Compile the template source, escaping string literals appropriately.
	    var index = 0;
	    var source = "__p+='";
	    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
	      source += text.slice(index, offset).replace(escaper, escapeChar);
	      index = offset + match.length;

	      if (escape) {
	        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
	      } else if (interpolate) {
	        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
	      } else if (evaluate) {
	        source += "';\n" + evaluate + "\n__p+='";
	      }

	      // Adobe VMs need the match returned to produce the correct offest.
	      return match;
	    });
	    source += "';\n";

	    // If a variable is not specified, place data values in local scope.
	    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

	    source = "var __t,__p='',__j=Array.prototype.join," +
	      "print=function(){__p+=__j.call(arguments,'');};\n" +
	      source + 'return __p;\n';

	    try {
	      var render = new Function(settings.variable || 'obj', '_', source);
	    } catch (e) {
	      e.source = source;
	      throw e;
	    }

	    var template = function(data) {
	      return render.call(this, data, _);
	    };

	    // Provide the compiled source as a convenience for precompilation.
	    var argument = settings.variable || 'obj';
	    template.source = 'function(' + argument + '){\n' + source + '}';

	    return template;
	  };

	  // Add a "chain" function. Start chaining a wrapped Underscore object.
	  _.chain = function(obj) {
	    var instance = _(obj);
	    instance._chain = true;
	    return instance;
	  };

	  // OOP
	  // ---------------
	  // If Underscore is called as a function, it returns a wrapped object that
	  // can be used OO-style. This wrapper holds altered versions of all the
	  // underscore functions. Wrapped objects may be chained.

	  // Helper function to continue chaining intermediate results.
	  var result = function(instance, obj) {
	    return instance._chain ? _(obj).chain() : obj;
	  };

	  // Add your own custom functions to the Underscore object.
	  _.mixin = function(obj) {
	    _.each(_.functions(obj), function(name) {
	      var func = _[name] = obj[name];
	      _.prototype[name] = function() {
	        var args = [this._wrapped];
	        push.apply(args, arguments);
	        return result(this, func.apply(_, args));
	      };
	    });
	  };

	  // Add all of the Underscore functions to the wrapper object.
	  _.mixin(_);

	  // Add all mutator Array functions to the wrapper.
	  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
	    var method = ArrayProto[name];
	    _.prototype[name] = function() {
	      var obj = this._wrapped;
	      method.apply(obj, arguments);
	      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
	      return result(this, obj);
	    };
	  });

	  // Add all accessor Array functions to the wrapper.
	  _.each(['concat', 'join', 'slice'], function(name) {
	    var method = ArrayProto[name];
	    _.prototype[name] = function() {
	      return result(this, method.apply(this._wrapped, arguments));
	    };
	  });

	  // Extracts the result from a wrapped and chained object.
	  _.prototype.value = function() {
	    return this._wrapped;
	  };

	  // Provide unwrapping proxy for some methods used in engine operations
	  // such as arithmetic and JSON stringification.
	  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;
	  
	  _.prototype.toString = function() {
	    return '' + this._wrapped;
	  };

	  // AMD registration happens at the end for compatibility with AMD loaders
	  // that may not enforce next-turn semantics on modules. Even though general
	  // practice for AMD registration is to be anonymous, underscore registers
	  // as a named module because, like jQuery, it is a base library that is
	  // popular enough to be bundled in a third party lib, but not be part of
	  // an AMD load request. Those cases could generate an error when an
	  // anonymous define() is called outside of a loader request.
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return _;
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	}.call(this));

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;;(function () {
		'use strict';

		/**
		 * @preserve FastClick: polyfill to remove click delays on browsers with touch UIs.
		 *
		 * @codingstandard ftlabs-jsv2
		 * @copyright The Financial Times Limited [All Rights Reserved]
		 * @license MIT License (see LICENSE.txt)
		 */

		/*jslint browser:true, node:true*/
		/*global define, Event, Node*/


		/**
		 * Instantiate fast-clicking listeners on the specified layer.
		 *
		 * @constructor
		 * @param {Element} layer The layer to listen on
		 * @param {Object} [options={}] The options to override the defaults
		 */
		function FastClick(layer, options) {
			var oldOnClick;

			options = options || {};

			/**
			 * Whether a click is currently being tracked.
			 *
			 * @type boolean
			 */
			this.trackingClick = false;


			/**
			 * Timestamp for when click tracking started.
			 *
			 * @type number
			 */
			this.trackingClickStart = 0;


			/**
			 * The element being tracked for a click.
			 *
			 * @type EventTarget
			 */
			this.targetElement = null;


			/**
			 * X-coordinate of touch start event.
			 *
			 * @type number
			 */
			this.touchStartX = 0;


			/**
			 * Y-coordinate of touch start event.
			 *
			 * @type number
			 */
			this.touchStartY = 0;


			/**
			 * ID of the last touch, retrieved from Touch.identifier.
			 *
			 * @type number
			 */
			this.lastTouchIdentifier = 0;


			/**
			 * Touchmove boundary, beyond which a click will be cancelled.
			 *
			 * @type number
			 */
			this.touchBoundary = options.touchBoundary || 10;


			/**
			 * The FastClick layer.
			 *
			 * @type Element
			 */
			this.layer = layer;

			/**
			 * The minimum time between tap(touchstart and touchend) events
			 *
			 * @type number
			 */
			this.tapDelay = options.tapDelay || 200;

			/**
			 * The maximum time for a tap
			 *
			 * @type number
			 */
			this.tapTimeout = options.tapTimeout || 700;

			if (FastClick.notNeeded(layer)) {
				return;
			}

			// Some old versions of Android don't have Function.prototype.bind
			function bind(method, context) {
				return function() { return method.apply(context, arguments); };
			}


			var methods = ['onMouse', 'onClick', 'onTouchStart', 'onTouchMove', 'onTouchEnd', 'onTouchCancel'];
			var context = this;
			for (var i = 0, l = methods.length; i < l; i++) {
				context[methods[i]] = bind(context[methods[i]], context);
			}

			// Set up event handlers as required
			if (deviceIsAndroid) {
				layer.addEventListener('mouseover', this.onMouse, true);
				layer.addEventListener('mousedown', this.onMouse, true);
				layer.addEventListener('mouseup', this.onMouse, true);
			}

			layer.addEventListener('click', this.onClick, true);
			layer.addEventListener('touchstart', this.onTouchStart, false);
			layer.addEventListener('touchmove', this.onTouchMove, false);
			layer.addEventListener('touchend', this.onTouchEnd, false);
			layer.addEventListener('touchcancel', this.onTouchCancel, false);

			// Hack is required for browsers that don't support Event#stopImmediatePropagation (e.g. Android 2)
			// which is how FastClick normally stops click events bubbling to callbacks registered on the FastClick
			// layer when they are cancelled.
			if (!Event.prototype.stopImmediatePropagation) {
				layer.removeEventListener = function(type, callback, capture) {
					var rmv = Node.prototype.removeEventListener;
					if (type === 'click') {
						rmv.call(layer, type, callback.hijacked || callback, capture);
					} else {
						rmv.call(layer, type, callback, capture);
					}
				};

				layer.addEventListener = function(type, callback, capture) {
					var adv = Node.prototype.addEventListener;
					if (type === 'click') {
						adv.call(layer, type, callback.hijacked || (callback.hijacked = function(event) {
							if (!event.propagationStopped) {
								callback(event);
							}
						}), capture);
					} else {
						adv.call(layer, type, callback, capture);
					}
				};
			}

			// If a handler is already declared in the element's onclick attribute, it will be fired before
			// FastClick's onClick handler. Fix this by pulling out the user-defined handler function and
			// adding it as listener.
			if (typeof layer.onclick === 'function') {

				// Android browser on at least 3.2 requires a new reference to the function in layer.onclick
				// - the old one won't work if passed to addEventListener directly.
				oldOnClick = layer.onclick;
				layer.addEventListener('click', function(event) {
					oldOnClick(event);
				}, false);
				layer.onclick = null;
			}
		}

		/**
		* Windows Phone 8.1 fakes user agent string to look like Android and iPhone.
		*
		* @type boolean
		*/
		var deviceIsWindowsPhone = navigator.userAgent.indexOf("Windows Phone") >= 0;

		/**
		 * Android requires exceptions.
		 *
		 * @type boolean
		 */
		var deviceIsAndroid = navigator.userAgent.indexOf('Android') > 0 && !deviceIsWindowsPhone;


		/**
		 * iOS requires exceptions.
		 *
		 * @type boolean
		 */
		var deviceIsIOS = /iP(ad|hone|od)/.test(navigator.userAgent) && !deviceIsWindowsPhone;


		/**
		 * iOS 4 requires an exception for select elements.
		 *
		 * @type boolean
		 */
		var deviceIsIOS4 = deviceIsIOS && (/OS 4_\d(_\d)?/).test(navigator.userAgent);


		/**
		 * iOS 6.0-7.* requires the target element to be manually derived
		 *
		 * @type boolean
		 */
		var deviceIsIOSWithBadTarget = deviceIsIOS && (/OS [6-7]_\d/).test(navigator.userAgent);

		/**
		 * BlackBerry requires exceptions.
		 *
		 * @type boolean
		 */
		var deviceIsBlackBerry10 = navigator.userAgent.indexOf('BB10') > 0;

		/**
		 * Determine whether a given element requires a native click.
		 *
		 * @param {EventTarget|Element} target Target DOM element
		 * @returns {boolean} Returns true if the element needs a native click
		 */
		FastClick.prototype.needsClick = function(target) {
			switch (target.nodeName.toLowerCase()) {

			// Don't send a synthetic click to disabled inputs (issue #62)
			case 'button':
			case 'select':
			case 'textarea':
				if (target.disabled) {
					return true;
				}

				break;
			case 'input':

				// File inputs need real clicks on iOS 6 due to a browser bug (issue #68)
				if ((deviceIsIOS && target.type === 'file') || target.disabled) {
					return true;
				}

				break;
			case 'label':
			case 'iframe': // iOS8 homescreen apps can prevent events bubbling into frames
			case 'video':
				return true;
			}

			return (/\bneedsclick\b/).test(target.className);
		};


		/**
		 * Determine whether a given element requires a call to focus to simulate click into element.
		 *
		 * @param {EventTarget|Element} target Target DOM element
		 * @returns {boolean} Returns true if the element requires a call to focus to simulate native click.
		 */
		FastClick.prototype.needsFocus = function(target) {
			switch (target.nodeName.toLowerCase()) {
			case 'textarea':
				return true;
			case 'select':
				return !deviceIsAndroid;
			case 'input':
				switch (target.type) {
				case 'button':
				case 'checkbox':
				case 'file':
				case 'image':
				case 'radio':
				case 'submit':
					return false;
				}

				// No point in attempting to focus disabled inputs
				return !target.disabled && !target.readOnly;
			default:
				return (/\bneedsfocus\b/).test(target.className);
			}
		};


		/**
		 * Send a click event to the specified element.
		 *
		 * @param {EventTarget|Element} targetElement
		 * @param {Event} event
		 */
		FastClick.prototype.sendClick = function(targetElement, event) {
			var clickEvent, touch;

			// On some Android devices activeElement needs to be blurred otherwise the synthetic click will have no effect (#24)
			if (document.activeElement && document.activeElement !== targetElement) {
				document.activeElement.blur();
			}

			touch = event.changedTouches[0];

			// Synthesise a click event, with an extra attribute so it can be tracked
			clickEvent = document.createEvent('MouseEvents');
			clickEvent.initMouseEvent(this.determineEventType(targetElement), true, true, window, 1, touch.screenX, touch.screenY, touch.clientX, touch.clientY, false, false, false, false, 0, null);
			clickEvent.forwardedTouchEvent = true;
			targetElement.dispatchEvent(clickEvent);
		};

		FastClick.prototype.determineEventType = function(targetElement) {

			//Issue #159: Android Chrome Select Box does not open with a synthetic click event
			if (deviceIsAndroid && targetElement.tagName.toLowerCase() === 'select') {
				return 'mousedown';
			}

			return 'click';
		};


		/**
		 * @param {EventTarget|Element} targetElement
		 */
		FastClick.prototype.focus = function(targetElement) {
			var length;

			// Issue #160: on iOS 7, some input elements (e.g. date datetime month) throw a vague TypeError on setSelectionRange. These elements don't have an integer value for the selectionStart and selectionEnd properties, but unfortunately that can't be used for detection because accessing the properties also throws a TypeError. Just check the type instead. Filed as Apple bug #15122724.
			if (deviceIsIOS && targetElement.setSelectionRange && targetElement.type.indexOf('date') !== 0 && targetElement.type !== 'time' && targetElement.type !== 'month') {
				length = targetElement.value.length;
				targetElement.setSelectionRange(length, length);
			} else {
				targetElement.focus();
			}
		};


		/**
		 * Check whether the given target element is a child of a scrollable layer and if so, set a flag on it.
		 *
		 * @param {EventTarget|Element} targetElement
		 */
		FastClick.prototype.updateScrollParent = function(targetElement) {
			var scrollParent, parentElement;

			scrollParent = targetElement.fastClickScrollParent;

			// Attempt to discover whether the target element is contained within a scrollable layer. Re-check if the
			// target element was moved to another parent.
			if (!scrollParent || !scrollParent.contains(targetElement)) {
				parentElement = targetElement;
				do {
					if (parentElement.scrollHeight > parentElement.offsetHeight) {
						scrollParent = parentElement;
						targetElement.fastClickScrollParent = parentElement;
						break;
					}

					parentElement = parentElement.parentElement;
				} while (parentElement);
			}

			// Always update the scroll top tracker if possible.
			if (scrollParent) {
				scrollParent.fastClickLastScrollTop = scrollParent.scrollTop;
			}
		};


		/**
		 * @param {EventTarget} targetElement
		 * @returns {Element|EventTarget}
		 */
		FastClick.prototype.getTargetElementFromEventTarget = function(eventTarget) {

			// On some older browsers (notably Safari on iOS 4.1 - see issue #56) the event target may be a text node.
			if (eventTarget.nodeType === Node.TEXT_NODE) {
				return eventTarget.parentNode;
			}

			return eventTarget;
		};


		/**
		 * On touch start, record the position and scroll offset.
		 *
		 * @param {Event} event
		 * @returns {boolean}
		 */
		FastClick.prototype.onTouchStart = function(event) {
			var targetElement, touch, selection;

			// Ignore multiple touches, otherwise pinch-to-zoom is prevented if both fingers are on the FastClick element (issue #111).
			if (event.targetTouches.length > 1) {
				return true;
			}

			targetElement = this.getTargetElementFromEventTarget(event.target);
			touch = event.targetTouches[0];
			var nodeName = targetElement.nodeName.toLowerCase();
			var typeAttribute = targetElement.getAttribute('type');
			if (nodeName === "select" || (typeAttribute === 'date' && nodeName === "input") || (typeAttribute === 'datetime' && nodeName === "input")){
			    return false;
			}
			if (deviceIsIOS) {

				// Only trusted events will deselect text on iOS (issue #49)
				selection = window.getSelection();
				if (selection.rangeCount && !selection.isCollapsed) {
					return true;
				}

				if (!deviceIsIOS4) {

					// Weird things happen on iOS when an alert or confirm dialog is opened from a click event callback (issue #23):
					// when the user next taps anywhere else on the page, new touchstart and touchend events are dispatched
					// with the same identifier as the touch event that previously triggered the click that triggered the alert.
					// Sadly, there is an issue on iOS 4 that causes some normal touch events to have the same identifier as an
					// immediately preceeding touch event (issue #52), so this fix is unavailable on that platform.
					// Issue 120: touch.identifier is 0 when Chrome dev tools 'Emulate touch events' is set with an iOS device UA string,
					// which causes all touch events to be ignored. As this block only applies to iOS, and iOS identifiers are always long,
					// random integers, it's safe to to continue if the identifier is 0 here.
					if (touch.identifier && touch.identifier === this.lastTouchIdentifier) {
						event.preventDefault();
						return false;
					}

					this.lastTouchIdentifier = touch.identifier;

					// If the target element is a child of a scrollable layer (using -webkit-overflow-scrolling: touch) and:
					// 1) the user does a fling scroll on the scrollable layer
					// 2) the user stops the fling scroll with another tap
					// then the event.target of the last 'touchend' event will be the element that was under the user's finger
					// when the fling scroll was started, causing FastClick to send a click event to that layer - unless a check
					// is made to ensure that a parent layer was not scrolled before sending a synthetic click (issue #42).
					this.updateScrollParent(targetElement);
				}
			}

			this.trackingClick = true;
			this.trackingClickStart = event.timeStamp;
			this.targetElement = targetElement;

			this.touchStartX = touch.pageX;
			this.touchStartY = touch.pageY;

			// Prevent phantom clicks on fast double-tap (issue #36)
			if ((event.timeStamp - this.lastClickTime) < this.tapDelay) {
				event.preventDefault();
			}

			return true;
		};


		/**
		 * Based on a touchmove event object, check whether the touch has moved past a boundary since it started.
		 *
		 * @param {Event} event
		 * @returns {boolean}
		 */
		FastClick.prototype.touchHasMoved = function(event) {
			var touch = event.changedTouches[0], boundary = this.touchBoundary;

			if (Math.abs(touch.pageX - this.touchStartX) > boundary || Math.abs(touch.pageY - this.touchStartY) > boundary) {
				return true;
			}

			return false;
		};


		/**
		 * Update the last position.
		 *
		 * @param {Event} event
		 * @returns {boolean}
		 */
		FastClick.prototype.onTouchMove = function(event) {
			if (!this.trackingClick) {
				return true;
			}

			// If the touch has moved, cancel the click tracking
			if (this.targetElement !== this.getTargetElementFromEventTarget(event.target) || this.touchHasMoved(event)) {
				this.trackingClick = false;
				this.targetElement = null;
			}

			return true;
		};


		/**
		 * Attempt to find the labelled control for the given label element.
		 *
		 * @param {EventTarget|HTMLLabelElement} labelElement
		 * @returns {Element|null}
		 */
		FastClick.prototype.findControl = function(labelElement) {

			// Fast path for newer browsers supporting the HTML5 control attribute
			if (labelElement.control !== undefined) {
				return labelElement.control;
			}

			// All browsers under test that support touch events also support the HTML5 htmlFor attribute
			if (labelElement.htmlFor) {
				return document.getElementById(labelElement.htmlFor);
			}

			// If no for attribute exists, attempt to retrieve the first labellable descendant element
			// the list of which is defined here: http://www.w3.org/TR/html5/forms.html#category-label
			return labelElement.querySelector('button, input:not([type=hidden]), keygen, meter, output, progress, select, textarea');
		};


		/**
		 * On touch end, determine whether to send a click event at once.
		 *
		 * @param {Event} event
		 * @returns {boolean}
		 */
		FastClick.prototype.onTouchEnd = function(event) {
			var forElement, trackingClickStart, targetTagName, scrollParent, touch, targetElement = this.targetElement;

			if (!this.trackingClick) {
				return true;
			}

			// Prevent phantom clicks on fast double-tap (issue #36)
			if ((event.timeStamp - this.lastClickTime) < this.tapDelay) {
				this.cancelNextClick = true;
				return true;
			}

			if ((event.timeStamp - this.trackingClickStart) > this.tapTimeout) {
				return true;
			}

			// Reset to prevent wrong click cancel on input (issue #156).
			this.cancelNextClick = false;

			this.lastClickTime = event.timeStamp;

			trackingClickStart = this.trackingClickStart;
			this.trackingClick = false;
			this.trackingClickStart = 0;

			// On some iOS devices, the targetElement supplied with the event is invalid if the layer
			// is performing a transition or scroll, and has to be re-detected manually. Note that
			// for this to function correctly, it must be called *after* the event target is checked!
			// See issue #57; also filed as rdar://13048589 .
			if (deviceIsIOSWithBadTarget) {
				touch = event.changedTouches[0];

				// In certain cases arguments of elementFromPoint can be negative, so prevent setting targetElement to null
				targetElement = document.elementFromPoint(touch.pageX - window.pageXOffset, touch.pageY - window.pageYOffset) || targetElement;
				targetElement.fastClickScrollParent = this.targetElement.fastClickScrollParent;
			}

			targetTagName = targetElement.tagName.toLowerCase();
			if (targetTagName === 'label') {
				forElement = this.findControl(targetElement);
				if (forElement) {
					this.focus(targetElement);
					if (deviceIsAndroid) {
						return false;
					}

					targetElement = forElement;
				}
			} else if (this.needsFocus(targetElement)) {

				// Case 1: If the touch started a while ago (best guess is 100ms based on tests for issue #36) then focus will be triggered anyway. Return early and unset the target element reference so that the subsequent click will be allowed through.
				// Case 2: Without this exception for input elements tapped when the document is contained in an iframe, then any inputted text won't be visible even though the value attribute is updated as the user types (issue #37).
				if ((event.timeStamp - trackingClickStart) > 100 || (deviceIsIOS && window.top !== window && targetTagName === 'input')) {
					this.targetElement = null;
					return false;
				}

				this.focus(targetElement);
				this.sendClick(targetElement, event);

				// Select elements need the event to go through on iOS 4, otherwise the selector menu won't open.
				// Also this breaks opening selects when VoiceOver is active on iOS6, iOS7 (and possibly others)
				if (!deviceIsIOS || targetTagName !== 'select') {
					this.targetElement = null;
					event.preventDefault();
				}

				return false;
			}

			if (deviceIsIOS && !deviceIsIOS4) {

				// Don't send a synthetic click event if the target element is contained within a parent layer that was scrolled
				// and this tap is being used to stop the scrolling (usually initiated by a fling - issue #42).
				scrollParent = targetElement.fastClickScrollParent;
				if (scrollParent && scrollParent.fastClickLastScrollTop !== scrollParent.scrollTop) {
					return true;
				}
			}

			// Prevent the actual click from going though - unless the target node is marked as requiring
			// real clicks or if it is in the whitelist in which case only non-programmatic clicks are permitted.
			if (!this.needsClick(targetElement)) {
				event.preventDefault();
				this.sendClick(targetElement, event);
			}

			return false;
		};


		/**
		 * On touch cancel, stop tracking the click.
		 *
		 * @returns {void}
		 */
		FastClick.prototype.onTouchCancel = function() {
			this.trackingClick = false;
			this.targetElement = null;
		};


		/**
		 * Determine mouse events which should be permitted.
		 *
		 * @param {Event} event
		 * @returns {boolean}
		 */
		FastClick.prototype.onMouse = function(event) {

			// If a target element was never set (because a touch event was never fired) allow the event
			if (!this.targetElement) {
				return true;
			}

			if (event.forwardedTouchEvent) {
				return true;
			}

			// Programmatically generated events targeting a specific element should be permitted
			if (!event.cancelable) {
				return true;
			}

			// Derive and check the target element to see whether the mouse event needs to be permitted;
			// unless explicitly enabled, prevent non-touch click events from triggering actions,
			// to prevent ghost/doubleclicks.
			if (!this.needsClick(this.targetElement) || this.cancelNextClick) {

				// Prevent any user-added listeners declared on FastClick element from being fired.
				if (event.stopImmediatePropagation) {
					event.stopImmediatePropagation();
				} else {

					// Part of the hack for browsers that don't support Event#stopImmediatePropagation (e.g. Android 2)
					event.propagationStopped = true;
				}

				// Cancel the event
				event.stopPropagation();
				event.preventDefault();

				return false;
			}

			// If the mouse event is permitted, return true for the action to go through.
			return true;
		};


		/**
		 * On actual clicks, determine whether this is a touch-generated click, a click action occurring
		 * naturally after a delay after a touch (which needs to be cancelled to avoid duplication), or
		 * an actual click which should be permitted.
		 *
		 * @param {Event} event
		 * @returns {boolean}
		 */
		FastClick.prototype.onClick = function(event) {
			var permitted;

			// It's possible for another FastClick-like library delivered with third-party code to fire a click event before FastClick does (issue #44). In that case, set the click-tracking flag back to false and return early. This will cause onTouchEnd to return early.
			if (this.trackingClick) {
				this.targetElement = null;
				this.trackingClick = false;
				return true;
			}

			// Very odd behaviour on iOS (issue #18): if a submit element is present inside a form and the user hits enter in the iOS simulator or clicks the Go button on the pop-up OS keyboard the a kind of 'fake' click event will be triggered with the submit-type input element as the target.
			if (event.target.type === 'submit' && event.detail === 0) {
				return true;
			}

			permitted = this.onMouse(event);

			// Only unset targetElement if the click is not permitted. This will ensure that the check for !targetElement in onMouse fails and the browser's click doesn't go through.
			if (!permitted) {
				this.targetElement = null;
			}

			// If clicks are permitted, return true for the action to go through.
			return permitted;
		};


		/**
		 * Remove all FastClick's event listeners.
		 *
		 * @returns {void}
		 */
		FastClick.prototype.destroy = function() {
			var layer = this.layer;

			if (deviceIsAndroid) {
				layer.removeEventListener('mouseover', this.onMouse, true);
				layer.removeEventListener('mousedown', this.onMouse, true);
				layer.removeEventListener('mouseup', this.onMouse, true);
			}

			layer.removeEventListener('click', this.onClick, true);
			layer.removeEventListener('touchstart', this.onTouchStart, false);
			layer.removeEventListener('touchmove', this.onTouchMove, false);
			layer.removeEventListener('touchend', this.onTouchEnd, false);
			layer.removeEventListener('touchcancel', this.onTouchCancel, false);
		};


		/**
		 * Check whether FastClick is needed.
		 *
		 * @param {Element} layer The layer to listen on
		 */
		FastClick.notNeeded = function(layer) {
			var metaViewport;
			var chromeVersion;
			var blackberryVersion;
			var firefoxVersion;

			// Devices that don't support touch don't need FastClick
			if (typeof window.ontouchstart === 'undefined') {
				return true;
			}

			// Chrome version - zero for other browsers
			chromeVersion = +(/Chrome\/([0-9]+)/.exec(navigator.userAgent) || [,0])[1];

			if (chromeVersion) {

				if (deviceIsAndroid) {
					metaViewport = document.querySelector('meta[name=viewport]');

					if (metaViewport) {
						// Chrome on Android with user-scalable="no" doesn't need FastClick (issue #89)
						if (metaViewport.content.indexOf('user-scalable=no') !== -1) {
							return true;
						}
						// Chrome 32 and above with width=device-width or less don't need FastClick
						if (chromeVersion > 31 && document.documentElement.scrollWidth <= window.outerWidth) {
							return true;
						}
					}

				// Chrome desktop doesn't need FastClick (issue #15)
				} else {
					return true;
				}
			}

			if (deviceIsBlackBerry10) {
				blackberryVersion = navigator.userAgent.match(/Version\/([0-9]*)\.([0-9]*)/);

				// BlackBerry 10.3+ does not require Fastclick library.
				// https://github.com/ftlabs/fastclick/issues/251
				if (blackberryVersion[1] >= 10 && blackberryVersion[2] >= 3) {
					metaViewport = document.querySelector('meta[name=viewport]');

					if (metaViewport) {
						// user-scalable=no eliminates click delay.
						if (metaViewport.content.indexOf('user-scalable=no') !== -1) {
							return true;
						}
						// width=device-width (or less than device-width) eliminates click delay.
						if (document.documentElement.scrollWidth <= window.outerWidth) {
							return true;
						}
					}
				}
			}

			// IE10 with -ms-touch-action: none or manipulation, which disables double-tap-to-zoom (issue #97)
			if (layer.style.msTouchAction === 'none' || layer.style.touchAction === 'manipulation') {
				return true;
			}

			// Firefox version - zero for other browsers
			firefoxVersion = +(/Firefox\/([0-9]+)/.exec(navigator.userAgent) || [,0])[1];

			if (firefoxVersion >= 27) {
				// Firefox 27+ does not have tap delay if the content is not zoomable - https://bugzilla.mozilla.org/show_bug.cgi?id=922896

				metaViewport = document.querySelector('meta[name=viewport]');
				if (metaViewport && (metaViewport.content.indexOf('user-scalable=no') !== -1 || document.documentElement.scrollWidth <= window.outerWidth)) {
					return true;
				}
			}

			// IE11: prefixed -ms-touch-action is no longer supported and it's recomended to use non-prefixed version
			// http://msdn.microsoft.com/en-us/library/windows/apps/Hh767313.aspx
			if (layer.style.touchAction === 'none' || layer.style.touchAction === 'manipulation') {
				return true;
			}

			return false;
		};


		/**
		 * Factory method for creating a FastClick object
		 *
		 * @param {Element} layer The layer to listen on
		 * @param {Object} [options={}] The options to override the defaults
		 */
		FastClick.attach = function(layer, options) {
			return new FastClick(layer, options);
		};


		if (true) {

			// AMD. Register as an anonymous module.
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
				return FastClick;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (typeof module !== 'undefined' && module.exports) {
			module.exports = FastClick.attach;
			module.exports.FastClick = FastClick;
		} else {
			window.FastClick = FastClick;
		}
	}());


/***/ },
/* 22 */,
/* 23 */,
/* 24 */,
/* 25 */,
/* 26 */,
/* 27 */,
/* 28 */,
/* 29 */,
/* 30 */,
/* 31 */,
/* 32 */,
/* 33 */,
/* 34 */,
/* 35 */,
/* 36 */,
/* 37 */,
/* 38 */,
/* 39 */,
/* 40 */,
/* 41 */,
/* 42 */,
/* 43 */,
/* 44 */,
/* 45 */,
/* 46 */,
/* 47 */,
/* 48 */,
/* 49 */,
/* 50 */,
/* 51 */,
/* 52 */,
/* 53 */,
/* 54 */,
/* 55 */,
/* 56 */,
/* 57 */,
/* 58 */,
/* 59 */,
/* 60 */,
/* 61 */,
/* 62 */,
/* 63 */,
/* 64 */,
/* 65 */,
/* 66 */,
/* 67 */,
/* 68 */,
/* 69 */,
/* 70 */,
/* 71 */,
/* 72 */,
/* 73 */,
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	  __webpack_require__(75),
	  __webpack_require__(78),
	  __webpack_require__(82),
	  __webpack_require__(84),
	  __webpack_require__(88),
	  __webpack_require__(20),
	  __webpack_require__(21)
	], __WEBPACK_AMD_DEFINE_RESULT__ = function (UIHeader, UIToast, UILoading, UIPageView, UIAlert,_,FastClick) {

	    return _.inherit({
	        propertys: function () {
	            //view搜索目录
	            this.viewRootPath = 'views/';

	            //默认view
	            this.defaultView = 'index';

	            //当前视图路径
	            this.viewId;
	            this.viewUrl;

	            //视图集
	            this.views = {};

	            //是否开启单页应用
	            //      this.isOpenWebapp = _.getHybridInfo().platform == 'baidubox' ? true : false;
	            this.isOpenWebapp = true;

	            this.viewMapping = {};

	            //UIHeader需要释放出来
	            this.UIHeader = UIHeader;

	            this.interface = [
	                'forward',
	                'back',
	                'jump',
	                'showPageView',
	                'hidePageView',
	                'showLoading',
	                'hideLoading',
	                'showToast',
	                'hideToast',
	                'showMessage',
	                'hideMessage',
	                'showConfirm',
	                'hideConfirm',
	                'openWebapp',
	                'closeWebapp'
	            ];

	        },

	        initialize: function (options) {
	            this.propertys();   //设置属性
	            this.setOption(options);
	            this.initViewPort();
	            this.initAppMapping();

	            //开启fastclick
	            FastClick.attach(document.body);

	        },

	        setOption: function (options) {
	            _.extend(this, options);    //深度拷贝
	        },

	        //创建dom结构
	        initViewPort: function () {

	            this.d_header = $('#headerview');
	            this.d_state = $('#js_page_state');
	            this.d_viewport = $('#main');

	            //实例化全局使用的header，这里好像有点不对
	            this.header = new this.UIHeader({
	                wrapper: this.d_header
	            });

	            //非共享资源，这里应该引入app概念了
	            this.pageviews = {};
	            this.toast = new UIToast();
	            this.loading = new UILoading();
	            this.alert = new UIAlert();
	            this.confirm = new UIAlert();
	        },

	        openWebapp: function () {
	            this.isOpenWebapp = true;
	        },

	        closeWebapp: function () {
	            this.isOpenWebapp = false;
	        },

	        showPageView: function (name, _viewdata_, id) {
	            var view = null, k, scope = this.curViewIns || this;
	            if (!id) id = name;
	            if (!_.isString(name)) return;
	            //    for (k in _viewdata_) {
	            //      if (_.isFunction(_viewdata_[k])) _viewdata_[k] = $.proxy(_viewdata_[k], scope);
	            //    }
	            view = this.pageviews[id];
	            var arr = name.split('/');
	            if (!view) {
	                view = new UIPageView({
	                    // bug fixed by zzx
	                    viewId: arr[arr.length - 1] || name,
	                    viewPath: this.buildUrl(name) || name,
	                    _viewdata_: _viewdata_,
	                    onHide: function () {
	                        scope.initHeader();
	                    }
	                });
	                this.pageviews[id] = view;
	            } else {
	                view.setViewData(_viewdata_);
	            }
	            view.show();

	        },

	        hidePageView: function (name) {
	            if (name) {
	                if (this.pageviews[name]) this.pageviews[name].hide();
	            } else {
	                for (var k in this.pageviews) this.pageviews[k].hide();
	            }
	        },

	        showLoading: function () {
	            this.loading.show();
	        },

	        hideLoading: function () {
	            this.loading.hide();
	        },

	        showToast: function (msg, callback) {
	            this.toast.resetDefaultProperty();
	            this.toast.content = msg;
	            if (callback) this.toast.hideAction = callback;
	            this.toast.refresh();
	            this.toast.show();
	        },

	        hideToast: function () {
	            this.toast.hide();
	        },

	        showMessage: function (param) {
	            if (_.isString(param)) {
	                param = { content: param };
	            }

	            this.alert.resetDefaultProperty();
	            this.alert.setOption(param);
	            this.alert.refresh();
	            this.alert.show();
	        },

	        hideMessage: function () {
	            this.alert.hide();
	        },

	        showConfirm: function (params) {
	            if (!params) params = {};
	            if (typeof params == 'string') {
	                params = {
	                    content: params
	                };
	            }

	            this.confirm.resetDefaultProperty();

	            //与showMessage不一样的地方
	            this.confirm.btns = [
	              { name: '取消', className: 'cm-btns-cancel js_cancel' },
	              { name: '确定', className: 'cm-btns-ok js_ok' }
	            ];
	            this.confirm.setOption(params);
	            this.confirm.refresh();
	            this.confirm.show();
	        },

	        hideConfirm: function () {
	            this.confirm.hide();
	        },

	        //初始化app
	        initApp: function () {

	            //首次加载不需要走路由控制
	            this.loadViewByUrl();

	            //后面的加载全部要经过路由处理
	            if (this.isOpenWebapp === true)
	                $(window).on('popstate.app', $.proxy(this.loadViewByUrl, this));

	        },

	        loadViewByUrl: function (e) {
	            this.hidePageView();

	            var url = decodeURIComponent(location.href).toLowerCase();
	            var viewId = this.getViewIdRule(url);

	            viewId = viewId || this.defaultView;
	            this.viewId = viewId;
	            this.viewUrl = url;
	            this.switchView(this.viewId);

	        },

	        //@override
	        getViewIdRule: function (url) {
	            var viewId = '', hash = '';
	            var reg = /.*webapp\/(.+)\.html/;
	            var match = url.match(reg);
	            if (match && match[1]) viewId = match[1];

	            return viewId;
	        },

	        //@override
	        setUrlRule: function (viewId, param, replace, project) {
	            var reg = /(webapp\/.+\/)(.+)\.html/;
	            var url = window.location.href;
	            var match = url.match(reg);
	            var proj = project ? 'webapp/' + project : match[1];
	            var preUrl = '', str = '', i = 0, _k, _v;
	            //这里这样做有点过于业务了 *bug*
	            var keepParam = [
	              'us'
	            ], p;
	            if (!viewId) return;
	            if (!match || !match[1]) {
	                preUrl = url + '/webapp/bus/' + viewId + '.html';
	            } else {
	                preUrl = url.substr(0, url.indexOf(match[1])) + proj + viewId + '.html'; ;
	            }

	            //特定的参数将会一直带上去，渠道、来源等标志
	            for (i = 0; i < keepParam.length; i++) {
	                p = keepParam[i];
	                if (_.getUrlParam()[p]) {
	                    if (!param) param = {};
	                    param[p] = _.getUrlParam()[p];
	                }
	            }

	            i = 0;

	            for (k in param) {
	                _k = encodeURIComponent(_.removeAllSpace(k));
	                _v = encodeURIComponent(_.removeAllSpace(param[k]));
	                if (i === 0) {
	                    str += '?' + _k + '=' + _v;
	                    i++;
	                } else {
	                    str += '&' + _k + '=' + _v;
	                }
	            }

	            url = preUrl + str;

	            if (this.isOpenWebapp === false) {
	                window.location = url;
	                return;
	            }

	            if (replace) {
	                history.replaceState('', {}, url);
	            } else {
	                history.pushState('', {}, url);
	            }

	        },

	        switchView: function (id) {

	            var curView = this.views[id];

	            //切换前的当前view，马上会隐藏
	            var tmpView = this.curView;

	            if (tmpView && tmpView != curView) {
	                this.lastView = tmpView;
	            }

	            //加载view样式，权宜之计
	            //      this.loadViewStyle(id);

	            //如果当前view存在，则执行请onload事件
	            if (curView) {

	                //如果当前要跳转的view就是当前view的话便不予处理
	                //这里具体处理逻辑要改*************************************
	                if (curView == this.curView) {
	                    this.curView.show();
	                    return;
	                }

	                this.curView = curView;
	                this.curView.show();
	                this.lastView && this.lastView.hide();
	            } else {

	                //        this.showLoading();
	                this.loadView(id, function (View) {
	                    //每次加载结束将状态栏隐藏，这个代码要改
	                    //          this.hideLoading();

	                    this.curView = new View({
	                        viewId: id,
	                        refer: this.lastView ? this.lastView.viewId : null,
	                        APP: this,
	                        wrapper: this.d_viewport
	                    });

	                    //设置网页上的view标志
	                    this.curView.$el.attr('page-url', id);

	                    //保存至队列
	                    this.views[id] = this.curView;

	                    this.curView.show();
	                    this.lastView && this.lastView.hide();

	                });
	            }
	        },

	        //加载view
	        loadView: function (path, callback) {
	            var self = this;
	            var View = __webpack_require__(103)("./"+path+'/'+path);
	            callback && callback.call(self, View);
	            //require([self.buildUrl(path)], function (View) {
	            //    callback && callback.call(self, View);
	            //});
	        },

	        //override
	        //配置可能会有的路径扩展，为Hybrid与各个渠道做适配
	        initAppMapping: function () {
	            //            console.log('该方法必须被重写');
	        },

	        //@override
	        buildUrl: function (path) {
	            var mappingPath = this.viewMapping[path];
	            return mappingPath ? mappingPath : this.viewRootPath + '/' + path + '/' + path;
	        },

	        //此处需要一个更新逻辑，比如在index view再点击到index view不会有反应，下次改**************************
	        forward: function (viewId, param, replace) {
	            if (!viewId) return;
	            viewId = viewId.toLowerCase();

	            this.setUrlRule(viewId, param, replace);
	            this.loadViewByUrl();
	        },
	        jump: function (path, param, replace) {
	            var viewId;
	            var project;
	            if (!path) {
	                return;
	            }
	            path = path.toLowerCase().split('/');
	            if (path.length <= 0) {
	                return;
	            }
	            viewId = path.pop();
	            project = path.length === 1 ? path.join('') + '/' : path.join('');
	            this.setUrlRule(viewId, param, replace, project);
	            this.loadViewByUrl();
	        },
	        back: function (viewId, param, replace) {
	            if (viewId) {
	                this.forward(viewId, param, replace)
	            } else {
	                if (window.history.length == 1) {
	                    this.forward(this.defaultView, param, replace)
	                } else {
	                    history.back();
	                }
	            }
	        }

	    });

	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(76), __webpack_require__(77),__webpack_require__(20)], __WEBPACK_AMD_DEFINE_RESULT__ = function (UIView, template,_) {

	  return _.inherit(UIView, {
	    propertys: function ($super) {

	      $super();

	      var d_header = $('#headerview');

	      this.wrapper = d_header[0] ? d_header : $('body');

	      //是否设置view所处作用域
	      this.view;

	      this.left = [];
	      this.title = '头部导航';
	      this.right = [];

	      this.lastParam = null;

	      //每次create时候清空容器
	      this.needEmptyWrapper = true;

	      //html模板
	      this.template = template;
	      this.events = {};
	    },

	    getViewModel: function () {
	      return this._getDefaultViewModel(['left', 'title', 'right']);
	    },

	    //单纯的做老代码桥接......
	    set: function (data, needFresh) {
	      var left = [];
	      var tmpPram;
	      //如果仅仅是title的
	      if (typeof data == 'string') {
	        tmpPram = { title: data };

	        if (!needFresh && this.lastParam) {
	          this.lastParam.title = data;
	          tmpPram = this.lastParam;
	        }

	        this.lastParam = tmpPram;
	        this.setOption(tmpPram);
	        this.refresh();
	        this.show();
	        return;
	      }

	      if (typeof data.back != 'undefined') {
	        if (_.isObject(data.back)) left.push(data.back);
	        if (_.isArray(data.back)) left = data.back;
	        if (_.isFunction(data.back)) left = [{ tagname: 'back', callback: data.back}];
	        if (_.isBoolean(data.back) && data.back) left = [{ tagname: 'back'}];
	      }
	      if (!data.left) data.left = left;

	      this.resetDefaultPropertys();
	      this.handleSpecialParam(data);

	      //默认参数处理
	      this.setOption(data);
	      this.lastParam = data;

	//      document.title = data.title || '百度快行';

	      //初始化events参数
	      this.setEventsParam();
	      this.refresh();
	      this.show();
	    },

	    resetDefaultPropertys: function () {
	      this.left = [];
	      this.title = '百度bus';
	      this.right = [];
	    },

	    backDefaultCallback: function () {
	      console.log('默认back回调');
	      window.history.back();
	    },

	    setEventsParam: function () {
	      var item, _callback = null, data = this.left.concat(this.right);

	      for (var i = 0, len = data.length; i < len; i++) {
	        item = data[i];

	        //有默认的便赋值默认
	        if (_.isFunction(this[item.tagname + 'DefaultCallback']))
	          _callback = this[item.tagname + 'DefaultCallback'];

	        //外部传入的优先级更高
	        if (_.isFunction(item.callback))
	          _callback = $.proxy(item.callback, this.view);

	        if (_callback) {
	          this.events['click .js_' + item.tagname] = _callback;
	        }
	        _callback = null;
	      }
	    },

	    handleSpecialParam: function (data) {
	      var k, i, len, item;
	      for (k in data) {
	        if (_.isArray(data[k])) {
	          for (i = 0, len = data[k].length; i < len; i++) {
	            item = data[k][i];
	            if (this['customtHandle_' + item.tagname]) {
	              this['customtHandle_' + item.tagname](data[k][i], k);
	            } //if
	          } //for
	        } //if
	      } //for
	    },

	    _getDir: function (dir) {
	      var kv = { left: 'fl', right: 'fr' };
	      return kv[dir];
	    },

	    //定制化信息
	    customtHandle_tel: function (item, dir) {
	      dir = this._getDir(dir);
	      item.itemFn = function () {
	        return '<a href="tel:' + item.number + '" class="cm-header-icon' + dir + ' js_' + item.tagname + ' " ><i class="icon-' + item.tagname + '"></i></a>';
	      };
	    },

	    addEvent: function () {
	      this.on('onPreShow', function () {
	        this.wrapper.html('');
	      });
	    },

	    hide: function ($super) {
	      $super();
	      this.wrapper.hide();
	    },

	    show: function ($super) {
	      $super();
	      this.wrapper.show();
	    }

	  });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(20)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_) {
	  'use strict';

	  //获取视图层级，层级的索引号在闭包中，生命周期被保存下来
	  var getBiggerzIndex = (function () {
	    var index = 2000;
	    return function (level) {
	      return level + (++index);
	    };
	  })();

	  return _.inherit({

	    propertys: function () {

	      //这里设置UI的根节点所处包裹层
	      this.wrapper = $('body');
	      this.id = _.uniqueId('ui-view-');
	      this.classname = '';

	      //模板字符串，各个组件不同，现在加入预编译机制
	      this.template = '';
	      //事件机制
	      this.events = {};

	      //自定义事件
	      //此处需要注意mask 绑定事件前后问题，考虑scroll.radio插件类型的mask应用，考虑组件通信
	      this.eventArr = {};

	      //初始状态为实例化
	      this.status = 'init';

	    },

	    getViewModel: function () {
	      //假如有datamodel的话，便直接返回，不然便重写，这里基本为了兼容
	      if (_.isObject(this.datamodel)) return this.datamodel;
	      return {};
	    },

	    _getDefaultViewModel: function (arr) {
	      var k, i, len, obj = {};
	      for (i = 0, len = arr.length; i < len; i++) {
	        k = arr[i];
	        if (!_.isUndefined(this[k]) && !_.isNull(this[k])) obj[k] = this[k];
	      }
	      return obj;
	    },


	    //子类事件绑定若想保留父级的，应该使用该方法
	    addEvents: function (events) {
	      if (_.isObject(events)) _.extend(this.events, events);
	    },

	    //阻止默认冒泡事件
	    _preventDefault: function (e) {
	      e.preventDefault();
	    },

	    //订阅事件的回调函数
	    on: function (type, fn, insert) {
	      if (!this.eventArr[type]) this.eventArr[type] = [];

	      //头部插入
	      if (insert) {
	        this.eventArr[type].splice(0, 0, fn);
	      } else {
	        this.eventArr[type].push(fn);
	      }
	    },

	    //取消事件的回调函数
	    off: function (type, fn) {
	      if (!this.eventArr[type]) return;
	      if (fn) {
	        this.eventArr[type] = _.without(this.eventArr[type], fn);
	      } else {
	        this.eventArr[type] = [];
	      }
	    },

	    //定义类的自定义事件
	    trigger: function (type) {
	      var _slice = Array.prototype.slice;
	      var args = _slice.call(arguments, 1);
	      var events = this.eventArr;
	      var results = [], i, l;

	      if (events[type]) {
	        for (i = 0, l = events[type].length; i < l; i++) {
	          results[results.length] = events[type][i].apply(this, args);
	        }
	      }
	      return results;
	    },

	    //创建根节点
	    createRoot: function (html) {
	      //UI的根节点
	      this.$el = $('<div class="view ' + this.classname + '" style="display: none; " id="' + this.id + '">' + html + '</div>');
	      this.wrapper.append(this.$el);
	    },

	    //是否是默认事件
	    _isAddEvent: function (key) {
	      if (key == 'onCreate' || key == 'onPreShow' || key == 'onShow' || key == 'onRefresh' || key == 'onHide')
	        return true;
	      return false;
	    },

	    //根据参数重置当前属性
	    setOption: function (options) {
	      //这里可以写成switch，开始没有想到有这么多分支
	      for (var k in options) {
	        if (k == 'events') {
	          _.extend(this[k], options[k]);
	          continue;
	        } else if (this._isAddEvent(k)) {
	          this.on(k, options[k])
	          continue;
	        } else if(k == "html"){

	            var _html = options[k]();
	            this[k] = _html;
	            continue;
	        }
	        this[k] = options[k];
	      }
	      //      _.extend(this, options);
	    },

	    //组件初始化，一定执行
	    initialize: function (opts) {

	      //这种默认属性
	      this.propertys();
	      //根据参数重置属性
	      this.setOption(opts);
	      //检测不合理属性，修正为正确数据
	      this.resetPropery();

	      this.addEvent();
	      this.create();

	      this.initElement();

	    },

	    $: function (selector) {
	      return this.$el.find(selector);
	    },

	    //提供属性重置功能，对属性做检查
	    resetPropery: function () {
	    },

	    //各事件注册点，用于被继承override
	    addEvent: function () {
	    },

	    //渲染模板，定义组件生命周期的相关事件
	    create: function () {
	      this.trigger('onPreCreate');
	      //如果没有传入模板，说明html结构已经存在
	      if (_.isString(this.template) || _.isFunction(this.template)) {
	        this.createRoot(this.render());
	      }
	      else {
	        //如果没有准备template，则$el便是wrapper
	        this.$el = this.wrapper;
	      }

	      this.status = 'create';
	      this.trigger('onCreate');
	    },

	    //实例化需要用到到dom元素
	    initElement: function () { },

	    //渲染模板，创建html片段
	    render: function (callback) {
	      var data = this.getViewModel() || {};
	      var html = this.template;
	      if (!this.template) return '';
	      //引入预编译机制
	      if (_.isFunction(this.template)) {
	        html = this.template(data);
	      } else {
	        html = _.template(this.template)(data);
	      }
	      typeof callback == 'function' && callback.call(this);
	      return html;
	    },

	  /**
	   * @description 组件刷新方法，首次显示会将ui对象实际由内存插入包裹层
	   * @method refresh
	   * @param {Boolean} needRecreate 组件是否重新创建，生命周期状态为create
	   */
	    refresh: function (needRecreate) {
	      this.resetPropery();
	      if (needRecreate) {
	        this.create();
	      } else {
	        this.$el.html(this.render());
	      }
	      this.initElement();
	      if (this.status != 'hide') this.show();
	      this.trigger('onRefresh');
	    },

	    /**
	    * @description 组件显示方法，首次显示会将ui对象实际由内存插入包裹层
	    * @method initialize
	    * @param {Object} opts
	    */
	    show: function () {
	      if (!this.wrapper[0] || !this.$el[0]) return;
	      this.trigger('onPreShow');

	      //如果包含就不要乱搞了
	      if (!$.contains(this.wrapper[0], this.$el[0])) {
	        //如果需要清空容器的话便清空
	        if (this.needEmptyWrapper) this.wrapper.html('');
	        this.wrapper.append(this.$el);
	      }

	      this.$el.show();

	      if (this.needAnimat && _.isFunction(this.animateShowAction) && this.status != 'show') {
	        this.animateShowAction.call(this, this.$el);
	      } else {
	        this.$el.show();
	      }

	      this.status = 'show';

	      this.bindEvents();

	      this.trigger('onShow');
	    },

	    hide: function () {
	      if (!this.$el || this.status !== 'show') return;

	      this.trigger('onPreHide');

	      if (this.needAnimat && _.isFunction(this.animateHideAction) && this.status == 'show') {
	        this.animateHideAction.call(this, this.$el);
	      } else {
	        this.$el.hide();
	      }
	      this.status = 'hide';
	      this.unBindEvents();
	      this.trigger('onHide');
	    },

	    destroy: function () {
	      this.status = 'destroy';
	      this.unBindEvents();
	      this.$el.remove();
	      this.trigger('onDestroy');
	      delete this;
	    },

	    setzIndexTop: function (el, level) {
	      if (!el) el = this.$el;
	      if (!level || level > 10) level = 0;
	      level = level * 1000;
	      el.css('z-index', getBiggerzIndex(level));

	    },

	    bindEvents: function () {
	      var events = this.events;

	      if (!(events || (events = _.result(this, 'events')))) return this;
	      this.unBindEvents();

	      // 解析event参数的正则
	      var delegateEventSplitter = /^(\S+)\s*(.*)$/;
	      var key, method, match, eventName, selector;

	      // 做简单的字符串数据解析
	      for (key in events) {
	        method = events[key];
	        if (!_.isFunction(method)) method = this[events[key]];
	        if (!method) continue;

	        match = key.match(delegateEventSplitter);
	        eventName = match[1], selector = match[2];
	        method = _.bind(method, this);
	        eventName += '.delegateUIEvents' + this.id;

	        if (selector === '') {
	          this.$el.on(eventName, method);
	        } else {
	          this.$el.on(eventName, selector, method);
	        }
	      }

	      return this;
	    },

	    unBindEvents: function () {
	      this.$el.off('.delegateUIEvents' + this.id);
	      return this;
	    }
	  });

	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 77 */
/***/ function(module, exports) {

	module.exports = function (obj) {
	obj || (obj = {});
	var __t, __p = '', __j = Array.prototype.join;
	function print() { __p += __j.call(arguments, '') }
	with (obj) {
	__p += '<div class="cm-header">\r\n';


	var i = 0, len = 0, j = 0, jj = 0;
	var left = left;
	var right = right.reverse();
	var item = null;
	var dir;
	var btnObj = null;

	;
	__p += '\r\n\r\n';
	for(jj=0; jj < 2; jj++) { ;
	__p += '\r\n  ';
	 
	    if(jj == 0) { dir = 'fl'; btnObj = left; } else { dir = 'fr'; btnObj = right; }
	  ;
	__p += '\r\n  ';
	 for(i = 0, len = btnObj.length; i < len; i++) { ;
	__p += '\r\n    ';
	 item = btnObj[i]; ;
	__p += '\r\n    ';
	if(typeof item.itemFn == 'function') { ;
	__p += '\r\n      ' +
	((__t = (item.itemFn() )) == null ? '' : __t) +
	'\r\n    ';
	} else { ;
	__p += '\r\n      <span class=" cm-header-' +
	((__t = ((item.value ? 'btn' : 'icon') )) == null ? '' : __t) +
	' ' +
	((__t = (dir )) == null ? '' : __t) +
	'  js_' +
	((__t = (item.tagname )) == null ? '' : __t) +
	'" >\r\n        ';
	 if(item.value) { ;
	__p += '\r\n          ' +
	((__t = (item.value )) == null ? '' : __t) +
	'\r\n        ';
	 } else { ;
	__p += '\r\n          <i class="icon-' +
	((__t = (item.tagname )) == null ? '' : __t) +
	'"></i>\r\n        ';
	 } ;
	__p += '\r\n      </span>\r\n    ';
	} ;
	__p += '\r\n  ';
	} ;
	__p += '\r\n';
	} ;
	__p += '\r\n\r\n<h1 class="cm-page-title js_title" >\r\n  ';
	if((Object.prototype.toString.call(title) === '[object Array]') && title.length == 2) { ;
	__p += '\r\n    <span class="cm-title-l">' +
	((__t = (title[0])) == null ? '' : __t) +
	'</span>\r\n    <span class="cm-title-s">' +
	((__t = (title[1])) == null ? '' : __t) +
	'</span>\r\n  ';
	} else { ;
	__p += '\r\n    ' +
	((__t = (title)) == null ? '' : __t) +
	'\r\n  ';
	} ;
	__p += '\r\n</h1>\r\n\r\n</div>\r\n';

	}
	return __p
	}

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
	/*
	用于继承的类，会自动垂直居中

	*/
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(79), __webpack_require__(81),__webpack_require__(20)], __WEBPACK_AMD_DEFINE_RESULT__ = function (UILayer, template,_) {


	  return _.inherit(UILayer, {

	    resetDefaultProperty: function ($super) {
	      $super();
	      this.template = template;
	      this.content = '';

	      this.hideSec = 2500;
	      this.hasPushState = false;
	      this.TIMERRES = null;

	      this.hideAction = function () {
	      };

	    },

	    getViewModel: function () {
	      return this._getDefaultViewModel(['content']);
	    },

	    addEvent: function ($super) {
	      $super();

	      this.on('onShow', function () {
	        this.mask.$el.addClass('cm-overlay--transparent');

	        //显示指定时间后需要关闭
	        if (this.TIMERRES) clearTimeout(this.TIMERRES);
	        this.TIMERRES = setTimeout($.proxy(function () {
	          this.hide();
	        }, this), this.hideSec);
	      });

	      this.on('onHide', function () {
	        //显示指定时间后需要关闭
	        if (this.TIMERRES) clearTimeout(this.TIMERRES);
	        this.hideAction();
	      });
	    }
	  });


	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
	******bug******
	弹出层应该在外部有一个class做初始定位，而不用每次都reposition
	所有弹出层的基类，用于继承的类，默认会自动垂直居中

	*/
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(76), __webpack_require__(80),__webpack_require__(20)], __WEBPACK_AMD_DEFINE_RESULT__ = function (UIAbstractView, UIMask,_) {
	  'use strict';

	  return _.inherit(UIAbstractView, {

	    //默认属性
	    propertys: function ($super) {
	      $super();
	      this.mask = new UIMask();
	      this.resetDefaultProperty();

	    },

	    resetDefaultProperty: function () {

	      this.mask.resetDefaultProperty();

	      this.needMask = true;

	      this.needAnimat = true;

	      //需要点击蒙版删除
	      this.maskToHide = true;

	      //需要居中定位
	      this.needReposition = true;

	      this.animateInClass = 'cm-up-in';
	      this.animateOutClass = 'cm-up-out';

	      this.animateShowAction = null;
	      this.animateHideAction = null;

	      //所有弹出层类组件，统一touchmove时候神马也不干
	      this.addEvents({
	        'touchmove': '_preventDefault'
	      });

	    },

	    resetPropery: function ($super) {
	      $super();
	      this._setAnimat();
	      this._setMaskEvent();
	    },

	    _setAnimat: function () {
	      var scope = this;
	      if (this.needAnimat) {
	        if (!this.animateShowAction) {
	          this.animateShowAction = function (el) {
	            scope._safeAnimat(el, scope.animateInClass, 'show');
	          };
	        }
	        if (!this.animateHideAction) {
	          this.animateHideAction = function (el) {
	            scope._safeAnimat(el, scope.animateOutClass, 'hide');
	          };
	        }
	      }

	      //如果存在关闭动画接口，需要为mask加动画
	      if (this.animateHideAction) {
	        this.mask.needAnimat = true;
	        this.mask.animateHideAction = function (el) {
	          scope._safeAnimat(el, scope.mask.animateOutClass, 'hide');
	        };
	      } else {
	        this.mask.animateHideAction = null;
	      }
	    },

	    //安全的执行animationEnd相关事件，防止class不存在而依赖animationEnd的回调不执行问题
	    _safeAnimat: function (el, classname, flag) {
	      var isTrigger = false;
	      if (flag == 'show') el.show();
	      el.addClass(classname);
	      //防止class不存在的情况下导致动画不执行，而程序出错
	      el.one($.fx.animationEnd, function () {
	        isTrigger = true;
	        el.removeClass(classname);
	        if (flag == 'hide') el.hide();
	      });

	      setTimeout(function () {
	        if (isTrigger) return;

	        el.removeClass(classname);
	        el.off($.fx.animationEnd);
	        if (flag == 'hide') el.hide();

	      }, 350);
	    },

	    _setMaskEvent: function () {
	      var scope = this;
	      //这里处理是否点击关闭蒙版的操作
	      if (this.needMask && this.maskToHide) {
	        //mask显示之前为mask绑定关闭事件，一次执行便不予理睬了
	        this.mask.addEvents({
	          'click': function () {
	            scope.hide();
	          }
	        });
	      }
	    },

	    addEvent: function () {

	      this.on('onPreShow', function () {
	        if (this.needMask) this.mask.show();
	      });

	      this.on('onShow', function () {
	        this.setzIndexTop();
	        if (this.needReposition) this.reposition();

	      });

	      this.on('onHide', function () {
	        this.mask.hide();
	      });

	      this.on('onDestroy', function () {
	        this.mask.destroy();
	      });

	    },

	    reposition: function () {

	      this.$el.css({
	        'position': 'fixed',
	        'left': '50%',
	        'top': '50%',
	        'margin-left': -(this.$el.width() / 2) + 'px',
	        'margin-top': -(this.$el.height() / 2) + 'px'
	      });
	    }

	  });

	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(76),__webpack_require__(20)], __WEBPACK_AMD_DEFINE_RESULT__ = function (UIAbstractView,_) {
	  'use strict';

	  return _.inherit(UIAbstractView, {
	    //默认属性
	    propertys: function ($super) {
	      $super();
	      this.resetDefaultProperty();
	    },

	    resetDefaultProperty: function () {
	      this.events = {};
	//      this.template = '';
	      this.animateOutClass = 'cm-overlay-out';

	      //阻止浏览器默认事件，这里是阻止滚动
	      this.addEvents({
	        'touchmove': '_preventDefault'
	      });
	    },

	    setRootStyle: function () {
	      this.$el.addClass('cm-overlay');
	    },

	    addEvent: function ($super) {
	      $super();

	      this.on('onShow', function () {
	        this.setRootStyle();
	        this.setzIndexTop();
	      });

	    }

	  });


	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 81 */
/***/ function(module, exports) {

	module.exports = function (obj) {
	obj || (obj = {});
	var __t, __p = '';
	with (obj) {
	__p += '<section class="cm-modal cm-modal--toast" >\r\n  ' +
	((__t = (content )) == null ? '' : __t) +
	'\r\n</section>';

	}
	return __p
	}

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
	/*
	用于继承的类，会自动垂直居中

	*/
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(79), __webpack_require__(83),__webpack_require__(20)], __WEBPACK_AMD_DEFINE_RESULT__ = function (UILayer, template,_) {


	  return _.inherit(UILayer, {

	    resetDefaultProperty: function ($super) {
	      $super();
	      //html模板
	      this.template = template;
	      //重写Type定义
	      this.type = "loading";
	      this.loadingTimer = null;

	      this.maskTimer = null;

	    },

	    initElement: function () {
	      this.d_loding = this.$('.js_loading');
	    },

	    _showLoading: function () {
	      this.d_loding.hide();
	      if (this.loadingTimer) clearTimeout(this.loadingTimer);
	      this.loadingTimer = setTimeout($.proxy(function () {
	        this.d_loding.show();
	      }, this), 100);

	      if (this.maskTimer) clearTimeout(this.maskTimer);
	      this.maskTimer = setTimeout($.proxy(function () {
	        this.mask.$el.removeClass('cm-overlay--transparent');
	      }, this), 300);

	    },

	    _hideLoading: function () {
	      if (this.loadingTimer) clearTimeout(this.loadingTimer);
	      if (this.maskTimer) clearTimeout(this.maskTimer);
	      this.d_loding.hide();
	    },

	    addEvent: function ($super) {
	      $super();

	      this.on('onShow', function () {
	        this.mask.$el.addClass('cm-overlay--transparent');
	        this._showLoading();

	      });

	      this.on('onHide', function () {
	        this._hideLoading();
	      });
	    },

	    reposition: function ($super) {
	      this.$el.css({
	        width: '58px',
	        height: '58px'
	      });
	      $super();

	    }

	  });


	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 83 */
/***/ function(module, exports) {

	module.exports = function (obj) {
	obj || (obj = {});
	var __t, __p = '';
	with (obj) {
	__p += '<div class="spinner js_loading">\r\n  <div class="spinner-container container1">\r\n    <div class="circle1"></div>\r\n    <div class="circle2"></div>\r\n    <div class="circle3"></div>\r\n    <div class="circle4"></div>\r\n  </div>\r\n  <div class="spinner-container container2">\r\n    <div class="circle1"></div>\r\n    <div class="circle2"></div>\r\n    <div class="circle3"></div>\r\n    <div class="circle4"></div>\r\n  </div>\r\n  <div class="spinner-container container3">\r\n    <div class="circle1"></div>\r\n    <div class="circle2"></div>\r\n    <div class="circle3"></div>\r\n    <div class="circle4"></div>\r\n  </div>\r\n</div>';

	}
	return __p
	}

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(76), __webpack_require__(80),__webpack_require__(20)], __WEBPACK_AMD_DEFINE_RESULT__ = function (UIAbstractView, UIMask,_) {
	  'use strict';

	  return _.inherit(UIAbstractView, {
	    //默认属性
	    propertys: function ($super) {
	      $super();
	      this.mask = new UIMask({
	        onCreate: function () {
	          this.$el.addClass('cm-page-view-mask');
	        }
	      });

	      //装载的view实例
	      this.viewId = null;
	      this.viewIns = null;
	      this.viewPath = null;
	      this.hasRequest = false;
	      this._viewdata_ = null;

	      this.needAnimat = false;

	      this.animateInClass = 'cm-down-in';
	      this.animateOutClass = 'cm-down-out';

	    },

	    resetPropery: function ($super) {
	      $super();
	      this._setAnimat();
	    },

	    _setAnimat: function () {
	      var scope = this;
	      if (this.needAnimat) {
	        if (!this.animateShowAction) {
	          this.animateShowAction = function (el) {
	            scope._safeAnimat(el, scope.animateInClass, 'show');
	          };
	        }
	        if (!this.animateHideAction) {
	          this.animateHideAction = function (el) {
	            scope._safeAnimat(el, scope.animateOutClass, 'hide');
	          };
	        }
	      }

	    },

	    //安全的执行animationEnd相关事件，防止class不存在而依赖animationEnd的回调不执行问题
	    _safeAnimat: function (el, classname, flag) {
	      var isTrigger = false;
	      if (flag == 'show') el.show();
	      el.addClass(classname);
	      //防止class不存在的情况下导致动画不执行，而程序出错
	      el.one($.fx.animationEnd, function () {
	        isTrigger = true;
	        el.removeClass(classname);
	        if (flag == 'hide') el.hide();
	      });

	      setTimeout(function () {
	        if (isTrigger) return;

	        el.removeClass(classname);
	        el.off($.fx.animationEnd);
	        if (flag == 'hide') el.hide();

	      }, 350);
	    },


	    createRoot: function (html) {
	      //UI的根节点
	      this.$el = $('<div class="cm-page-view" style="display: none; " id="' + this.id + '"><div class="spinner" style="  margin: 100px auto;"><div class="spinner-container container1"><div class="circle1"></div><div class="circle2"></div><div class="circle3"></div><div class="circle4"></div></div><div class="spinner-container container2"><div class="circle1"></div><div class="circle2"></div><div class="circle3"></div><div class="circle4"></div></div><div class="spinner-container container3"><div class="circle1"></div><div class="circle2"></div><div class="circle3"></div><div class="circle4"></div></div></div></div>');
	      this.wrapper.append(this.$el);
	    },

	    setViewData: function (_viewdata_) {
	      if (!this.viewIns) return;
	      this.viewIns.setOption(_viewdata_);
	    },

	    initViewIns: function () {
	      var scope = this;
	      if (this.viewIns) {
	        this.viewIns.show();
	        return;
	      }
	      if (this.hasRequest) return;
	      if (!this.viewPath) return;
	      this.hasRequest = true;
	      debugger;
	      __webpack_require__.e/* require */(17, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(85)(this.viewPath)]; (function (BaseView) {
	        var View = _.inherit(BaseView, scope._viewdata_), k;
	        var opts = {
	          viewId: scope.viewId,
	          wrapper: scope.$el
	        };
	        for (k in scope._viewdata_) {
	          if (typeof scope._viewdata_[k] != 'fuction')
	            opts[k] = scope._viewdata_[k];
	        }

	        scope.viewIns = new View(opts);
	        scope.viewIns.show();
	      }.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));});

	    },

	    onPageviewShow: function () {
	      window.scrollTo(0, 0);
	      $('.cm-page-wrap').hide();
	    },

	    onPageviewHide: function () {
	      $('.cm-page-wrap').show();

	    },

	    addEvent: function ($super) {
	      $super();

	      this.on('onPreShow', function () {
	        this.mask.show();
	      });

	      this.on('onShow', function () {
	        this.setzIndexTop();
	        this.initViewIns();
	        this.onPageviewShow();
	      });

	      this.on('onHide', function () {
	        //        if (this.viewIns) this.viewIns.hide();
	        this.mask.hide();
	        this.onPageviewHide();
	      });
	    }

	  });


	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 85 */,
/* 86 */,
/* 87 */,
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
	/*
	用于继承的类，会自动垂直居中

	*/
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(79), __webpack_require__(89),__webpack_require__(20)], __WEBPACK_AMD_DEFINE_RESULT__ = function (UILayer, template,_) {
	  return _.inherit(UILayer, {
	    propertys: function ($super) {
	      $super();
	    },

	    resetDefaultProperty: function ($super) {
	      $super();

	      this.maskToHide = false;

	      //html模板
	      this.template = template;

	      //默认数据
	      this.title = '';
	      this.content = '';
	      this.btns = [
	          { name: '确定', className: 'js_ok' }
	        ];

	      //事件机制
	      this.addEvents({
	        'click .js_ok': 'okAction',
	        'click .js_cancel': 'cancelAction'
	      });

	      this.okAction = function () {
	        this.hide();
	      };

	      this.cancelAction = function () {
	        this.hide();
	      };
	    },

	    getViewModel: function () {
	      return this._getDefaultViewModel(['title', 'content', 'btns']);
	    },

	    reposition: function ($super) {
	      this.$el.css({
	        width: '280px'
	      });
	      $super();

	    }

	  });

	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 89 */
/***/ function(module, exports) {

	module.exports = function (obj) {
	obj || (obj = {});
	var __t, __p = '', __j = Array.prototype.join;
	function print() { __p += __j.call(arguments, '') }
	with (obj) {
	__p += '<section class="cm-modal cm-modal--alert">\r\n  <div class="cm-modal-bd">\r\n    ';
	if(typeof title == 'string' && title.length > 0){ ;
	__p += '\r\n      <h3 class="cm-alert-title">' +
	((__t = (title)) == null ? '' : __t) +
	'</h3>\r\n    ';
	} ;
	__p += '\r\n    <div ';
	if(content.length > 12){ ;
	__p += ' class="cm-mutil-lines"';
	} ;
	__p += '>' +
	((__t = (content)) == null ? '' : __t) +
	'</div>\r\n  </div>\r\n  <div class="cm-actions  ';
	if(btns.length > 2){ ;
	__p += ' cm-actions--full ';
	} ;
	__p += '">\r\n    ';
	 for(var i = 0, len = btns.length; i < len; i++ ) {;
	__p += '\r\n    <span class="' +
	((__t = (btns[i].className)) == null ? '' : __t) +
	' cm-actions-btn">\r\n      ' +
	((__t = (btns[i].name)) == null ? '' : __t) +
	'</span>\r\n    ';
	 } ;
	__p += '\r\n  </div>\r\n</section>';

	}
	return __p
	}

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
	******bug******
	这个使用与定制化接太困难，需要更加方便的使用
	太定制化的功能业务团队往往不能接受
	*/
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(76), __webpack_require__(91),__webpack_require__(20)], __WEBPACK_AMD_DEFINE_RESULT__ = function (UIView, template,_) {

	  return _.inherit(UIView, {
	    propertys: function ($super) {
	        debugger;
	      $super();
	      this.template = template;
	      
	      //阳历节日
	      this.solarHoliday = {
	        '0101': '元旦节',
	        '0214': '情人节',
	        '0501': '劳动节',
	        '0601': '儿童节',
	        '0910': '教师节',
	        '1001': '国庆节',
	        '1225': '圣诞节'
	      };

	      //阴历节日
	      this.lunarHoliday = {
	        '20150218': '除夕',
	        '20150219': '春节',
	        '20150305': '元宵',
	        '20150405': '清明',
	        '20150620': '端午',
	        '20150820': '七夕',
	        '20150828': '中元',
	        '20150927': '中秋',
	        '20151021': '重阳',

	        '20160207': '除夕',
	        '20160208': '春节',
	        '20160222': '元宵',
	        '20160404': '清明',
	        '20160609': '端午',
	        '20160809': '七夕',
	        '20160817': '中元',
	        '20160915': '中秋',
	        '20161009': '重阳',

	        '20170127': '除夕',
	        '20170128': '春节',
	        '20170211': '元宵',
	        '20170404': '清明',
	        '20170530': '端午',
	        '20170828': '七夕',
	        '20170905': '中元',
	        '20171004': '中秋',
	        '20171028': '重阳',

	        '20180215': '除夕',
	        '20180216': '春节',
	        '20180302': '元宵',
	        '20180405': '清明',
	        '20180618': '端午',
	        '20180817': '七夕',
	        '20180825': '中元',
	        '20180924': '中秋',
	        '20181017': '重阳'

	      };

	      //特殊时刻
	      this.specialDates = false;

	      //是否选择不在本月的时间
	      this.showOtherMonthDay = false;

	      //要求必须要传入日期对象
	      this.scope = this;

	      //具体显示那一个月由displayTime决定
	      this.displayTime = null;
	      //可选日期由startTime定，并且最初可选时间也由
	      this.startTime = null;
	      this.endTime = null;
	      //应该由服务器读出
	      this.curTime = new Date();

	      this.weekDayArr = ['日', '一', '二', '三', '四', '五', '六'];
	      this.displayMonthNum = 1;

	      //当前选择的日期
	      this.selectDate = null;
	      //分割月之间的显示
	      this.MonthClapFn = function (year, month) {
	        month = month + 1;
	        return year + '年' + (month) + '月';
	      };

	      //******bug******乱源
	      //具体显示项目定制化
	      this.dayItemFn = function (year, month, day, dateObj, difftime) {

	        var dayObj = {
	          day: day
	        };
	        var dayStrArr = [];
	        var _solarHoliday = _.dateUtil.formatNum(month + 1) + _.dateUtil.formatNum(day);
	        var _lunarHoliday = year.toString() + _.dateUtil.formatNum(month + 1) + _.dateUtil.formatNum(day);
	        var _deffHour = parseInt(-1 * difftime / 3600000 * 100) / 100; ;
	        var isMulti = false;

	        //处理日
	        if (_deffHour == 0) {
	          dayObj.day1 = '今天';
	        } else if (_deffHour == -24) {
	          dayObj.day1 = '明天';
	        } else if (_deffHour == -48) {
	          dayObj.day1 = '后天';
	        }

	        //处理节日
	        if (this.solarHoliday[_solarHoliday]) {
	          dayObj.solarHoliday = this.solarHoliday[_solarHoliday];
	        }

	        //阴历节日
	        if (this.lunarHoliday[_lunarHoliday]) {
	          dayObj.lunarHoliday = this.lunarHoliday[_lunarHoliday];
	        }

	        //处理特殊标志
	        if (this.specialDates) {
	          //默认不处理特殊标志，但是阴历需要处理
	        }

	        dayStrArr[0] = '<div class="cm-field-title">' + (dayObj.day1 || dayObj.day) + '</div>';

	        if (dayObj.solarHoliday || dayObj.lunarHoliday) {
	          isMulti = true;
	          dayStrArr[0] = '<div class="cm-field-title">' + (dayObj.lunarHoliday || dayObj.solarHoliday) + '</div>';
	          //          dayStrArr[0] += '<div class="cm-field-label">' + (dayObj.lunarHoliday || dayObj.solarHoliday) + '</div>';
	        }

	        if (this.dayItemAction) {
	          return this.dayItemAction.call(this, dayObj, year, month, day, dateObj, difftime);
	        } else {
	          return '<div class="cm-field-wrapper ' + (isMulti ? 'multi-item' : '') + '">' + dayStrArr.join('') + '</div>';
	        }
	      };

	      this.dayItemAction = null;

	      this.events = {
	        'click .js_calendar_item ': 'itemAction'
	      };

	      this.onItemClick = function (date, el, e) {
	        console.log(arguments);
	      };

	    },

	    //重置属性，将所有数据合理化
	    resetPropery: function ($super) {
	      $super();

	      if (this.selectDate)
	        this.selectDate = new Date(this.selectDate.getFullYear(), this.selectDate.getMonth(), this.selectDate.getDate());

	      if (!_.isDate(this.curTime)) this.curTime = new Date();
	      this.curTime = new Date(this.curTime.getFullYear(), this.curTime.getMonth(), this.curTime.getDate());

	      if (!this.startTime) this.startTime = this.curTime;
	      if (!this.displayTime) this.displayTime = this.curTime;


	      //将日期全部设置为北京时间
	//      this.startTime = _.dateUtil.getBeijingDate(this.startTime);
	//      this.curTime = _.dateUtil.getBeijingDate(this.curTime);
	//      this.displayTime = _.dateUtil.getBeijingDate(this.displayTime);

	      this.curTime = this.curTime.getTime();
	      this.year = this.displayTime.getFullYear();
	      this.month = this.displayTime.getMonth();
	      this.endDate = new Date(this.year, this.month + this.displayMonthNum, 0);

	    },

	    getViewModel: function () {
	      return this._getDefaultViewModel(['scope', 'startTime', 'endTime', 'weekDayArr', 'displayMonthNum', 'curTime', 'selectDate', 'MonthClapFn', 'dayItemFn', 'year', 'month', 'endDate', 'showOtherMonthDay', 'displayTime']);
	    },

	    //中国操作习惯，月份以1开始
	    handleCnDay: function (selectorDay, callback) {
	      var dayStr = selectorDay, dayArr = [], el;
	      if (_.isDate(selectorDay)) {
	        dayStr = selectorDay.getFullYear() + '-' + selectorDay.getMonth() + '-' + selectorDay.getDate();
	      } else if (_.isString(selectorDay)) {
	        dayArr = selectorDay.split('-');
	        dayStr = dayArr[0] + '-' + (parseInt(dayArr[1]) - 1) + '-' + dayArr[2];
	      }
	      this.handleDay(dayStr, callback);
	    },

	    //操作某一日期
	    handleDay: function (selectorDay, callback) {
	      var dayStr = selectorDay, dayArr = [], el;

	      if (_.isDate(selectorDay)) {
	        dayStr = selectorDay.getFullYear() + '-' + selectorDay.getMonth() + '-' + selectorDay.getDate();
	      }

	      el = this.$('li[data-date="' + dayStr + '"]');
	      if (el[0] && _.isFunction(callback)) {
	        callback.call(this, el);
	      }
	    },

	    itemAction: function (e) {
	      var el = $(e.currentTarget);
	      if (el.hasClass('cm-item--disabled')) return;
	      var date = el.attr('data-date');
	      date = date.split('-');
	      if (date.length != 3) return false;

	      date = new Date(date[0], date[1], date[2]);

	      this.selectDate = date;
	      this.d_calendar_items.removeClass('active');
	      el.addClass('active');

	      if (this.onItemClick) this.onItemClick.call(this, date, el, e);
	    },

	    initElement: function () {
	      this.weekDay = this.$('.js_weekend');
	      this.d_calendar_items = this.$('.js_calendar_item');
	    }

	  });

	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 91 */
/***/ function(module, exports) {

	module.exports = function (obj) {
	obj || (obj = {});
	var __t, __p = '', __j = Array.prototype.join;
	function print() { __p += __j.call(arguments, '') }
	with (obj) {
	__p += '\r\n<div class="cm-calendar">\r\n\r\n  <ul class="cm-calendar-hd js_weekend">\r\n    ';
	 var i = 0, day1 = 0;  ;
	__p += '\r\n    ';
	for(day1 = 0; day1 < 7; day1++) { ;
	__p += '\r\n    <li>' +
	((__t = (weekDayArr[day1] )) == null ? '' : __t) +
	'</li>\r\n    ';
	} ;
	__p += '\r\n  </ul>\r\n';
	for(var j = 0; j < displayMonthNum; j++) { ;
	__p += '\r\n';


	    /**
	     * @description 静态日期操作类，封装系列日期操作方法
	     * @description 输入时候月份自动减一，输出时候自动加一
	     * @return {object} 返回操作方法
	     */
	    var _ = {};

	    _.isDate = function(obj) {
	        return toString.call(obj) === '[object Date]';
	    };
	    _.dateUtil = {

	        //根据一个日期获取所有信息
	        getDetail: function(date) {
	            if(!date) date = new Date();
	            var d, now = new Date(), dateInfo = {}, _diff;
	            var weekDayArr = ['周日', '周一', '周二', '周三', '周四', '周五', '周六'];

	            if (_.isNumber(date)) {
	                d = new Date();
	                d.setTime(date);
	                date = d;
	            }

	            //充值date对象，让其成为一天的起点时间
	            date = new Date(date.getFullYear(), date.getMonth(), date.getDate());
	            now = new Date(now.getFullYear(), now.getMonth(), now.getDate());

	            _diff = date.getTime() - now.getTime();

	            if(_diff == 0) {
	                dateInfo.day1 = '今天';
	            } else if(_diff == 86400000) {
	                dateInfo.day1 = '明天';
	            } else if(_diff == 172800000) {
	                dateInfo.day1 = '后天';
	            }

	            dateInfo.weekday = weekDayArr[date.getDay()];

	            dateInfo.year = date.getFullYear();
	            dateInfo.month = date.getMonth() + 1;
	            dateInfo.day = date.getDate();

	            return dateInfo;

	        },

	        /**
	         * @description 数字操作，
	         * @return {string} 返回处理后的数字
	         */
	        formatNum: function (n) {
	            if (n < 10) return '0' + n;
	            return n;
	        },
	        /**
	         * @description 将字符串转换为日期，支持格式y-m-d ymd (y m r)以及标准的
	         * @return {Date} 返回日期对象
	         */
	        parse: function (dateStr, formatStr) {
	            if (typeof dateStr === 'undefined') return null;
	            if (typeof formatStr === 'string') {
	                var _d = new Date(formatStr);
	                //首先取得顺序相关字符串
	                var arrStr = formatStr.replace(/[^ymd]/g, '').split('');
	                if (!arrStr && arrStr.length != 3) return null;

	                var formatStr = formatStr.replace(/y|m|d/g, function (k) {
	                    switch (k) {
	                        case 'y': return '(\\d{4})';
	                        case 'm': ;
	                        case 'd': return '(\\d{1,2})';
	                    }
	                });

	                var reg = new RegExp(formatStr, 'g');
	                var arr = reg.exec(dateStr)

	                var dateObj = {};
	                for (var i = 0, len = arrStr.length; i < len; i++) {
	                    dateObj[arrStr[i]] = arr[i + 1];
	                }
	                return new Date(dateObj['y'], dateObj['m'] - 1, dateObj['d']);
	            }
	            return null;
	        },
	        /**
	         * @description将日期格式化为字符串
	         * @return {string} 常用格式化字符串
	         */
	        format: function (date, format) {
	            if (arguments.length < 2 && !date.getTime) {
	                format = date;
	                date = new Date();
	            }
	            typeof format != 'string' && (format = 'Y年M月D日 H时F分S秒');
	            return format.replace(/Y|y|M|m|D|d|H|h|F|f|S|s/g, function (a) {
	                switch (a) {
	                    case "y": return (date.getFullYear() + "").slice(2);
	                    case "Y": return date.getFullYear();
	                    case "m": return date.getMonth() + 1;
	                    case "M": return _.dateUtil.formatNum(date.getMonth() + 1);
	                    case "d": return date.getDate();
	                    case "D": return _.dateUtil.formatNum(date.getDate());
	                    case "h": return date.getHours();
	                    case "H": return _.dateUtil.formatNum(date.getHours());
	                    case "f": return date.getMinutes();
	                    case "F": return _.dateUtil.formatNum(date.getMinutes());
	                    case "s": return date.getSeconds();
	                    case "S": return _.dateUtil.formatNum(date.getSeconds());
	                }
	            });
	        },
	        // @description 是否为为日期对象，该方法可能有坑，使用需要慎重
	        // @param year {num} 日期对象
	        // @return {boolean} 返回值
	        isDate: function (d) {
	            if ((typeof d == 'object') && (d instanceof Date)) return true;
	            return false;
	        },
	        // @description 是否为闰年
	        // @param year {num} 可能是年份或者为一个date时间
	        // @return {boolean} 返回值
	        isLeapYear: function (year) {
	            //传入为时间格式需要处理
	            if (_.dateUtil.isDate(year)) year = year.getFullYear()
	            if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) return true;
	            return false;
	        },

	        // @description 获取一个月份的天数
	        // @param year {num} 可能是年份或者为一个date时间
	        // @param year {num} 月份
	        // @return {num} 返回天数
	        getDaysOfMonth: function (year, month) {
	            //自动减一以便操作
	            month--;
	            if (_.dateUtil.isDate(year)) {
	                month = year.getMonth(); //注意此处月份要加1，所以我们要减一
	                year = year.getFullYear();
	            }
	            return [31, _.dateUtil.isLeapYear(year) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];
	        },

	        // @description 获取一个月份1号是星期几，注意此时的月份传入时需要自主减一
	        // @param year {num} 可能是年份或者为一个date时间
	        // @param year {num} 月份
	        // @return {num} 当月一号为星期几0-6
	        getBeginDayOfMouth: function (year, month) {
	            //自动减一以便操作
	            month--;
	            if ((typeof year == 'object') && (year instanceof Date)) {
	                month = year.getMonth();
	                year = year.getFullYear();
	            }
	            var d = new Date(year, month, 1);
	            return d.getDay();
	        },

	        //不同时区皆返回北京时间
	        getBeijingDate: function (d) {
	            var tmp, localTime, localOffset, beijiTime, utc;
	            if(!_.isDate(d)) {
	                tmp = d;
	                d = new Date();
	                d.setTime(tmp);
	            }

	            //通过调用Data()对象的getTime()方法，即可显示1970年1月1日后到此时时间之间的毫秒数。
	            localTime = d.getTime();
	            //当地时间偏移
	            localOffset = d.getTimezoneOffset() * 60000;
	            //标准时间
	            utc = localTime + localOffset;

	            //加上北京偏移量便是北京时区
	            beijiTime = utc + 28800000;

	            d.setTime(beijiTime);
	            return d;
	        },

	        setBeijingDate: function (d) {
	            var tmp, localTime, localOffset, beijiTime, utc;
	            if(!_.isDate(d)) {
	                tmp = d;
	                d = new Date();
	                d.setTime(tmp);
	            }

	            //通过调用Data()对象的getTime()方法，即可显示1970年1月1日后到此时时间之间的毫秒数。
	            localTime = d.getTime();
	            //当地时间偏移
	            localOffset = d.getTimezoneOffset() * 60000;
	            //标准时间
	            utc = localTime - localOffset;

	            //加上北京偏移量便是北京时区
	            beijiTime = utc - 28800000;

	            d.setTime(beijiTime);
	            return d;
	        }

	    };

	  var changedMonth = month + j;
	  var yyy =  parseInt(( month + j ) / 12);
	  if(changedMonth > 11) { 
	    changedMonth = changedMonth - 12 * yyy;
	  }
	  changedYear = year + yyy;
	  var d = new Date(changedYear, changedMonth);
	  var days = _.dateUtil.getDaysOfMonth(d);
	  var beginWeek = _.dateUtil.getBeginDayOfMouth(d);
	  var endDateTime = endDate.getTime();

	  var str_month = MonthClapFn(changedYear, changedMonth);

	  var appendDay = 0;
	  var preDay = 0;
	  var preMonthDays = 0;
	  if( showOtherMonthDay) {
	    appendDay = 7-((beginWeek + days) % 7);
	    preDay = beginWeek * -1;
	    preMonthDays =_.dateUtil.getDaysOfMonth(new Date(changedYear, changedMonth - 1));
	  }
	  var tmpMonth = changedMonth, tmpYear = changedYear;

	;
	__p += '\r\n  <ul class="cm-calendar-bd ">\r\n    ';
	if(str_month.length > 0 ) { ;
	__p += '\r\n      <h3 class="cm-month js_month">' +
	((__t = (str_month )) == null ? '' : __t) +
	'</h3>\r\n    ';
	 } ;
	__p += '\r\n    <ul class="cm-day-list">\r\n      ';
	 if(!showOtherMonthDay) { for(i = 0; i < beginWeek; i++) { ;
	__p += '\r\n        <li class="cm-item--disabled js_empty_day"></li>\r\n      ';
	 }} ;
	__p += '\r\n      ';
	 for(i = preDay; i < days + appendDay; i++) { ;
	__p += '\r\n        ';
	 var day = i + 1; ;
	__p += '\r\n\r\n        ';
	 
	          if(showOtherMonthDay){
	            changedMonth = tmpMonth;
	            changedYear = tmpYear;
	            if(day > days) {
	              day = day - days;
	              changedMonth++;

	              if(changedMonth > 11) { 
	                changedMonth = changedMonth - 12;
	                changedYear++;
	              }
	            } else if(day < 1) {
	              day = preMonthDays + day;
	              changedMonth--;
	              if(changedMonth < 0) { 
	                changedMonth = changedMonth + 12;
	                changedYear--;
	              }
	            }
	          }
	        ;
	__p += '\r\n\r\n        ';
	 var dateObj = new Date(changedYear, changedMonth, day ); ;
	__p += '\r\n        ';
	 var calendar_time = dateObj.getTime(); ;
	__p += '\r\n        ';
	 var difftime = calendar_time - curTime; ;
	__p += '\r\n        ';
	 var _difftime =  -1 * difftime; ;
	__p += '\r\n        ';
	 var diffHour =  parseInt(_difftime / 3600000 * 100) / 100; ;
	__p += '\r\n\r\n        ';
	  var isOverdue = false; ;
	__p += '\r\n        ';
	  if(_.isDate(displayTime) && calendar_time < startTime.getTime()) isOverdue = true;;
	__p += '\r\n\r\n        ';
	  if(typeof endTime != 'undefined' && calendar_time > endTime.getTime()) isOverdue = true; ;
	__p += '\r\n\r\n        ';
	 var isSelectDate = (typeof selectDate != 'undefined' && _.isDate(selectDate) && selectDate.getTime() == calendar_time ); 
	        ;
	__p += '\r\n\r\n        <li  data-curTime="' +
	((__t = (diffHour )) == null ? '' : __t) +
	'" class=" ' +
	((__t = (isSelectDate ? 'active' : '' )) == null ? '' : __t) +
	' js_calendar_item ';
	if(isOverdue) { ;
	__p += ' js_overdue_day cm-item--disabled ';
	} ;
	__p += ' " data-cndate="' +
	((__t = (changedYear)) == null ? '' : __t) +
	'-' +
	((__t = (changedMonth + 1)) == null ? '' : __t) +
	'-' +
	((__t = (day)) == null ? '' : __t) +
	'" data-date="' +
	((__t = (changedYear)) == null ? '' : __t) +
	'-' +
	((__t = (changedMonth)) == null ? '' : __t) +
	'-' +
	((__t = (day)) == null ? '' : __t) +
	'">\r\n          ' +
	((__t = (dayItemFn.call(scope, changedYear, changedMonth, day, dateObj, difftime))) == null ? '' : __t) +
	'\r\n        </li>\r\n      ';
	 } ;
	__p += '\r\n    </ul>\r\n\r\n  </ul>\r\n  ';
	} ;
	__p += '\r\n</div>\r\n\r\n\r\n';

	}
	return __p
	}

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
	******bug******
	这个使用与定制化接太困难，需要更加方便的使用
	太定制化的功能业务团队往往不能接受
	*/
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(79), __webpack_require__(93), __webpack_require__(90),__webpack_require__(20)], __WEBPACK_AMD_DEFINE_RESULT__ = function (UILayer, template, UICalendar,_) {

	  return _.inherit(UILayer, {
	    propertys: function ($super) {
	      $super();
	      this.template = template;
	      //      this.needReposition = false;

	      this.animateInClass = 'cm-down-in';
	      this.animateOutClass = 'cm-down-out';

	      this.addEvents({
	        'click .js_back': 'backAction',
	        'click .js_next': 'nextAction'
	      });

	      this.calendarIndex = 0;

	      this.calendar = null;
	      this.onBackAction = null;
	      this.onNextAction = null;
	    },

	    backAction: function () {
	      if (this.calendarIndex == 0) return;
	      this._refreshView(this.calendarIndex - 1);

	      if (_.isFunction(this.onBackAction)) this.onBackAction.call(this);
	    },

	    nextAction: function () {
	      this._refreshView(this.calendarIndex + 1);

	      if (_.isFunction(this.onNextAction)) this.onNextAction.call(this);
	    },

	    _refreshView: function (index) {
	      var flag = -1;
	      if (this.calendarIndex < index) flag = 1
	      this.calendarIndex = index;
	      if (index != 0) {
	        this.d_back.removeClass('disabled');
	      } else {
	        this.d_back.addClass('disabled');
	      }

	      this.calendar.displayTime = new Date(this.calendar.year, this.calendar.month + flag);
	      if (this.calendar.displayTime.getTime() < new Date().getTime()) this.calendar.displayTime = null;
	      this.calendar.refresh();

	    },

	    initElement: function () {
	      this.d_title = this.$('.js_title');
	      this.d_wrapper = this.$('.js_calendar_wrapper');
	      this.d_back = this.$('.js_back');
	      this.d_next = this.$('.js_next');
	    },

	    initCalendar: function () {
	      if (this.calendar) return;
	      var opts = this._getDefaultViewModel(['displayTime', 'endTime', 'weekDayArr', 'displayMonthNum', 'curTime', 'selectDate', 'dayItemFn', 'year', 'month', 'endDate', 'onItemClick']);
	      opts.MonthClapFn = function (year, month) {
	        month = month + 1;
	        return '<h2 class="calendar-title">' + year + '年' + _.dateUtil.formatNum(month) + '月</h2>';
	      };
	      opts.onItemClick = $.proxy(this.onItemClick, this);
	      opts.wrapper = this.d_wrapper;
	      opts.showOtherMonthDay = true;
	      this.calendar = new UICalendar(opts);
	      this.calendar.show();

	    },

	    addEvent: function ($super) {
	      $super();

	      this.on('onShow', function () {
	        this.initCalendar();
	      });
	    },

	    reposition: function () {

	      this.$el.css({
	        'position': 'fixed',
	        'left': '0',
	        'right': '0',
	        'bottom': '0'
	      });
	    }

	  });

	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 93 */
/***/ function(module, exports) {

	module.exports = function (obj) {
	obj || (obj = {});
	var __t, __p = '';
	with (obj) {
	__p += '<div class="calendar-wrapper-box">\r\n  <div class="box-hd">\r\n    <span class="fl icon-back disabled js_back"></span>\r\n    <span class="fr icon-next js_next"></span>\r\n  </div>\r\n  <div class="box-bd js_calendar_wrapper">\r\n          \r\n  </div>\r\n</div>';

	}
	return __p
	}

/***/ },
/* 94 */,
/* 95 */,
/* 96 */,
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
	待修复
	1 设置step时候，在达到max值时候会有问题
	2 设置step时候会导致滚动条不消失

	*/
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(20)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_) {

	    var utils = (function () {
	        var me = {};
	        var _elementStyle = document.createElement('div').style;

	        //获得需要兼容CSS3前缀
	        var _vendor = (function () {
	            var vendors = ['t', 'webkitT', 'MozT', 'msT', 'OT'];
	            var transform;
	            var i = 0;
	            var l = vendors.length;

	            for (; i < l; i++) {
	                transform = vendors[i] + 'ransform';
	                if (transform in _elementStyle) return vendors[i].substr(0, vendors[i].length - 1);
	            }
	            return false;
	        })();

	        //获取样式（CSS3兼容）
	        function _prefixStyle(style) {
	            if (_vendor === false) return false;
	            if (_vendor === '') return style;
	            return _vendor + style.charAt(0).toUpperCase() + style.substr(1);
	        }

	        me.getTime = Date.now || function getTime() { return new Date().getTime(); };

	        me.addEvent = function (el, type, fn, capture) {
	            if (el[0] && el != window.top) el = el[0];
	            el.addEventListener(type, fn, !!capture);
	        };

	        me.removeEvent = function (el, type, fn, capture) {
	            if (el[0] && el != window.top) el = el[0];
	            el.removeEventListener(type, fn, !!capture);
	        };

	        /*
	        current：当前鼠标位置
	        start：touchStart时候记录的Y（可能是X）的开始位置，但是在touchmove时候可能被重写
	        time： touchstart到手指离开时候经历的时间，同样可能被touchmove重写
	        lowerMargin：y可移动的最大距离，这个一般为计算得出 this.wrapperHeight - this.scrollerHeight
	        wrapperSize：如果有边界距离的话就是可拖动，不然碰到0的时候便停止
	        */
	        me.momentum = function (current, start, time, lowerMargin, wrapperSize, scrollOffset) {
	            var distance = current - start,
			speed = Math.abs(distance) / time,
			destination,
			duration,
			deceleration = 0.0006;

	            scrollOffset = scrollOffset || 0;

	            destination = current + (speed * speed) / (2 * deceleration) * (distance < 0 ? -1 : 1);
	            duration = speed / deceleration;

	            if (destination < lowerMargin) {
	                destination = wrapperSize ? lowerMargin - (wrapperSize / 2.5 * (speed / 8)) : lowerMargin;
	                distance = Math.abs(destination - current);
	                duration = distance / speed;
	            } else if (destination > 0 + scrollOffset) {
	                destination = wrapperSize ? wrapperSize / 2.5 * (speed / 8) + scrollOffset : 0;
	                distance = Math.abs(current) + destination;
	                duration = distance / speed;
	            }

	            return {
	                destination: Math.round(destination),
	                duration: duration
	            };

	        };

	        $.extend(me, {
	            hasTouch: 'ontouchstart' in window
	        });


	        //我们暂时只判断touch 和 mouse即可
	        $.extend(me.style = {}, {
	            transform: _prefixStyle('transform'),
	            transitionTimingFunction: _prefixStyle('transitionTimingFunction'),
	            transitionDuration: _prefixStyle('transitionDuration'),
	            transitionDelay: _prefixStyle('transitionDelay'),
	            transformOrigin: _prefixStyle('transformOrigin')
	        });

	        $.extend(me.eventType = {}, {
	            touchstart: 1,
	            touchmove: 1,
	            touchend: 1,

	            mousedown: 2,
	            mousemove: 2,
	            mouseup: 2
	        });

	        $.extend(me.ease = {}, {
	            quadratic: {
	                style: 'cubic-bezier(0.25, 0.46, 0.45, 0.94)',
	                fn: function (k) {
	                    return k * (2 - k);
	                }
	            },
	            circular: {
	                style: 'cubic-bezier(0.1, 0.57, 0.1, 1)', // Not properly "circular" but this looks better, it should be (0.075, 0.82, 0.165, 1)
	                fn: function (k) {
	                    return Math.sqrt(1 - (--k * k));
	                }
	            },
	            back: {
	                style: 'cubic-bezier(0.175, 0.885, 0.32, 1.275)',
	                fn: function (k) {
	                    var b = 4;
	                    return (k = k - 1) * k * ((b + 1) * k + b) + 1;
	                }
	            },
	            bounce: {
	                style: '',
	                fn: function (k) {
	                    if ((k /= 1) < (1 / 2.75)) {
	                        return 7.5625 * k * k;
	                    } else if (k < (2 / 2.75)) {
	                        return 7.5625 * (k -= (1.5 / 2.75)) * k + 0.75;
	                    } else if (k < (2.5 / 2.75)) {
	                        return 7.5625 * (k -= (2.25 / 2.75)) * k + 0.9375;
	                    } else {
	                        return 7.5625 * (k -= (2.625 / 2.75)) * k + 0.984375;
	                    }
	                }
	            },
	            elastic: {
	                style: '',
	                fn: function (k) {
	                    var f = 0.22,
			e = 0.4;

	                    if (k === 0) { return 0; }
	                    if (k == 1) { return 1; }

	                    return (e * Math.pow(2, -10 * k) * Math.sin((k - f / 4) * (2 * Math.PI) / f) + 1);
	                }
	            }
	        });
	        return me;
	    })();

	    function IScroll(opts) {
	        this.wrapper = typeof opts.wrapper == 'string' ? $(opts.wrapper) : opts.wrapper;
	        this.scroller = typeof opts.scroller == 'string' ? $(opts.scroller) : opts.scroller;
	        if (!opts.wrapper[0] || !opts.scroller[0]) throw 'param error';

	        this.swrapper = this.wrapper;
	        this.wrapper = this.wrapper[0];
	        this.scroller = this.scroller[0];

	        //这个属性会被动态改变的，如果这里
	        this.scrollerStyle = this.scroller.style;

	        this.options = {
	            //每次要求移动的步长
	            step: false,
	            //是否具有滚动条
	            scrollbars: true,
	            // 其实时期Y的位置
	            startY: 0,
	            preventDefault: true,

	            scrollOffset: 0,

	            //默认竖向滚动
	            scrollType: 'y',

	            //超出边界还原时间点
	            bounceTime: 400,
	            //超出边界返回的动画
	            bounceEasing: utils.ease.circular,

	            //超出边界时候是否还能拖动
	            bounce: true,

	            momentum: true,

	            bindToWrapper: true,

	            //当window触发resize事件60ms后还原
	            resizePolling: 60,
	            startX: 0,
	            startY: 0
	        };

	        for (var i in opts) {
	            this.options[i] = opts[i];
	        }

	        //    if (this.options.scrollType == 'y') {
	        //      if (this.scroller.clientHeight < this.wrapper.clientHeight) return;
	        //    } else {
	        //      if (this.scroller.clientWidth < this.wrapper.clientWidth) return;
	        //    }


	        this.translateZ = ' translateZ(0)';

	        this.x = 0;
	        this.y = 0;
	        this._events = {};

	        //默认方向是向前
	        this.dir = 'forward';

	        this._init();

	        //更新滚动条位置
	        this.refresh();

	        //更新本身位置
	        this.scrollTo(this.options.startX, this.options.startY);

	        this.enable();

	    };

	    IScroll.prototype = {
	        _init: function () {
	            this._initEvents();

	            //初始化滚动条，滚动条此处需要做重要处理
	            if (this.options.scrollbars) {
	                this._initIndicator();
	            }
	        },
	        refresh: function () {
	            var rf = this.wrapper.offsetHeight; 	// Force reflow

	            this.wrapperWidth = this.wrapper.clientWidth;
	            this.scrollerWidth = this.scroller.offsetWidth;
	            this.maxScrollX = this.wrapperWidth - this.scrollerWidth;

	            this.wrapperHeight = this.wrapper.clientHeight;
	            this.scrollerHeight = this.scroller.offsetHeight;
	            this.maxScrollY = this.wrapperHeight - this.scrollerHeight;

	            //增加偏移量概念
	            this.maxScrollX = this.maxScrollX - this.options.scrollOffset
	            this.maxScrollY = this.maxScrollY - this.options.scrollOffset;


	            //处理步长问题
	            //      if (this.options.step) {
	            //        if (this.maxScrollX % this.options.step != 0) {
	            //          this.maxScrollX = Math.round(this.maxScrollX / this.options.step) * this.options.step;
	            //          var s = '';
	            //        }
	            //        if (this.maxScrollY % this.options.step != 0) {
	            //          this.maxScrollY = Math.round(this.maxScrollY / this.options.step) * this.options.step;
	            //        }
	            //      }

	            if (this.options.scrollType == 'y') {
	                this.maxScrollX = 0;
	            } else {
	                this.maxScrollY = 0;
	            }

	            this.endTime = 0;

	            this._execEvent('refresh');

	            this.resetPosition();

	        },
	        _initEvents: function (remove) {
	            var eventType = remove ? utils.removeEvent : utils.addEvent;
	            var target = this.options.bindToWrapper ? this.wrapper : window;

	            eventType(window, 'orientationchange', this);
	            eventType(window, 'resize', this);

	            if (utils.hasTouch) {
	                eventType(this.wrapper, 'touchstart', this);
	                eventType(target, 'touchmove', this);
	                eventType(target, 'touchcancel', this);
	                eventType(target, 'touchend', this);
	            } else {
	                eventType(this.wrapper, 'mousedown', this);
	                eventType(target, 'mousemove', this);
	                eventType(target, 'mousecancel', this);
	                eventType(target, 'mouseup', this);
	            }

	            eventType(this.scroller, 'transitionend', this);
	            eventType(this.scroller, 'webkitTransitionEnd', this);
	            eventType(this.scroller, 'oTransitionEnd', this);
	            eventType(this.scroller, 'MSTransitionEnd', this);
	        },
	        _start: function (e) {
	            if (!this.enabled || (this.initiated && utils.eventType[e.type] !== this.initiated)) {
	                return;
	            }

	            var point = e.touches ? e.touches[0] : e, pos;
	            this.initiated = utils.eventType[e.type];

	            this.moved = false;

	            this.distY = 0;

	            //开启动画时间，如果之前有动画的话，便要停止动画，这里因为没有传时间，所以动画便直接停止了
	            this._transitionTime();

	            this.startTime = utils.getTime();

	            //如果正在进行动画，需要停止，并且触发滑动结束事件
	            if (this.isInTransition) {
	                this.isInTransition = false;
	                pos = this.getComputedPosition();
	                var _x = Math.round(pos.x);
	                var _y = Math.round(pos.y);

	                //移动过去
	                this._translate(_x, _y);
	                this._execEvent('scrollEnd');

	            }

	            this.startX = this.x;
	            this.startY = this.y;
	            this.absStartX = this.x;
	            this.absStartY = this.y;
	            this.pointX = point.pageX;
	            this.pointY = point.pageY;

	            this._execEvent('beforeScrollStart');

	            //解决三星问题
	            if (this.options.preventDefault) {
	                e.preventDefault();
	            }

	        },

	        _move: function (e) {
	            if (!this.enabled || utils.eventType[e.type] !== this.initiated) {
	                return;
	            }

	            var point = e.touches ? e.touches[0] : e,
	      deltaX = point.pageX - this.pointX,
	      deltaY = point.pageY - this.pointY,
	      timestamp = utils.getTime(),
	      newX, newY,
	      absDistX, absDistY;

	            var x1 = this.x;
	            var y1 = this.y;
	            var x2 = this.x + deltaX
	            var y2 = this.y + deltaY;

	            var dir = Math.abs(deltaX) >= Math.abs(deltaY) ? (x1 - x2 > 0 ? 'left' : 'right') : (y1 - y2 > 0 ? 'up' : 'down');

	            this.pointX = point.pageX;
	            this.pointY = point.pageY;

	            this.distX += deltaX;
	            this.distY += deltaY;
	            absDistX = Math.abs(this.distX);
	            absDistY = Math.abs(this.distY);

	            // 如果一直按着没反应的话这里就直接返回了
	            if (timestamp - this.endTime > 300 && (absDistX < 10 && absDistY < 10)) {
	                return;
	            }

	            if (this.options.scrollType == 'y') {
	                if (this.options.preventDefault && (dir == 'up' || dir == 'down')) {
	                    e.preventDefault();
	                }
	                deltaX = 0;
	            } else {
	                if (this.options.preventDefault && (dir == 'left' || dir == 'right')) {
	                    e.preventDefault();
	                }
	                deltaY = 0;
	            }

	            this.flipDir = dir;

	            newX = this.x + deltaX;
	            newY = this.y + deltaY;

	            if (newX > this.options.scrollOffset || newX < this.maxScrollX) {
	                newX = this.options.bounce ? this.x + deltaX / 3 : newX > this.options.scrollOffset ? this.options.scrollOffset : this.maxScrollX;
	            }

	            if (newY > this.options.scrollOffset || newY < this.maxScrollY) {
	                newY = this.options.bounce ? this.y + deltaY / 3 : newY > this.options.scrollOffset ? this.options.scrollOffset : this.maxScrollY;
	            }

	            if (!this.moved) {
	                this._execEvent('scrollStart');
	            }

	            this.moved = true;

	            //暂时只考虑input问题，有效再扩展
	            var el = document.activeElement;
	            if (el.nodeName.toLowerCase() == 'input') {
	                el.blur();
	                this.disable();
	                setTimeout($.proxy(function () {
	                    this.enable();
	                }, this), 250);
	                return;
	            }

	            if (newX > this.x || newY > this.y) {
	                this.dir = 'forward';
	            } else {
	                this.dir = 'back';
	            }

	            this._translate(newX, newY, true);

	            //防止过于灵敏
	            //      if (timestamp - this.startTime > 300) {
	            //        this.startTime = timestamp;
	            //        this.startX = this.x;
	            //        this.startY = this.y;
	            //      }


	        },
	        _end: function (e) {

	            if (!this.enabled || utils.eventType[e.type] !== this.initiated) {
	                return;
	            }

	            var point = e.changedTouches ? e.changedTouches[0] : e, momentumX,
	      momentumY,
	      duration = utils.getTime() - this.startTime,
	      newX = Math.round(this.x),
	      newY = Math.round(this.y),
	      distanceX = Math.abs(newX - this.startX),
	      distanceY = Math.abs(newY - this.startY),

	      tdistanceX = Math.abs(newX - this.startX),
	      tdistanceY = Math.abs(newY - this.startY),

	      time = 0,
	      easing = '';

	            this.isInTransition = 0;
	            this.initiated = 0;
	            this.endTime = utils.getTime();

	            if (this.resetPosition(this.options.bounceTime)) {
	                return;
	            }

	            this.scrollTo(newX, newY);
	            if (!this.moved) {

	                //这里需要监听使用步长问题
	                this._execEvent('scrollCancel');
	                return;
	            }

	            if (this.options.momentum && duration < 300) {
	                momentumX = utils.momentum(this.x, this.startX, duration, this.maxScrollX, this.options.bounce ? this.wrapperWidth : 0, this.options.scrollOffset);
	                momentumY = utils.momentum(this.y, this.startY, duration, this.maxScrollY, this.options.bounce ? this.wrapperHeight : 0, this.options.scrollOffset);
	                newX = momentumX.destination;
	                newY = momentumY.destination;

	                if (this.options.scrollType == 'y') {
	                    time = Math.max(0, momentumY.duration);
	                } else {
	                    time = Math.max(momentumX.duration, 0);
	                }
	                this.isInTransition = 1;
	            }

	            tdistanceX = Math.abs(newX - this.startX);
	            tdistanceY = Math.abs(newY - this.startY);

	            //处理步长
	            //这块处理有问题，需要重新写*******************************
	            if (this.options.step) {
	                var x = newX, y = newY;
	                var left = Math.abs(x);
	                var top = Math.abs(y);

	                var flag1 = x > 0 ? 1 : -1;
	                var flag2 = y > 0 ? 1 : -1;

	                var difStepX = this.options.step - (tdistanceX % this.options.step);
	                var difStepY = this.options.step - (tdistanceY % this.options.step);

	                //        console.log('left: ' + left + ', newX: ' + +newX + ', distanceX: ' + tdistanceX + ', step: ' + this.options.step + ', difStepX: ' + difStepX + ', scrollOffset: ' + this.options.scrollOffset + ', maxX: ' + this.maxScrollX + ', minX: ' + this.options.scrollOffset);

	                if (this.dir == 'forward') {
	                    if (x > 0) {
	                        x = left + difStepX;
	                    } else {
	                        x = left - difStepX;
	                    }
	                    if (y > 0) {
	                        y = top + difStepY;
	                    } else {
	                        y = top - difStepY;
	                    }
	                } else {

	                    if (x > 0) {
	                        x = left - difStepX;
	                    } else {
	                        x = left + difStepX;
	                    }
	                    if (y > 0) {
	                        y = top - difStepY;
	                    } else {
	                        y = top + difStepY;
	                    }
	                }

	                if (x % this.options.step != 0) {
	                    x = Math.round((x / this.options.step)) * this.options.step;
	                }

	                if (y % this.options.step != 0) {
	                    y = Math.round((y / this.options.step)) * this.options.step;
	                }

	                x = x * flag1;
	                y = y * flag2;

	                time = this.options.stepTime || 200;
	                if ((this.options.scrollType == 'x' && tdistanceX < 50) || (this.options.scrollType == 'y' && tdistanceY < 50)) time = 100;

	                newX = x;
	                newY = y;

	                //        console.log('newX: ' + newX + '===' + newX / this.options.step);

	                easing = this.options.bounceEasing;
	            }

	            if (newX != this.x || newY != this.y) {
	                if (newX > this.options.scrollOffset || newX < this.maxScrollX || newY > this.options.scrollOffset || newY < this.maxScrollY) {
	                    easing = utils.ease.quadratic;
	                }
	                if (time == 0) time = 1;

	                this.scrollTo(newX, newY, time, easing);
	                return;
	            }

	            this._execEvent('scrollEnd');
	        },

	        _resize: function () {
	            var that = this;

	            clearTimeout(this.resizeTimeout);

	            this.resizeTimeout = setTimeout(function () {
	                that.refresh();
	            }, this.options.resizePolling);
	        },

	        _transitionTimingFunction: function (easing) {
	            this.scrollerStyle[utils.style.transitionTimingFunction] = easing;

	            this.indicator && this.indicator.transitionTimingFunction(easing);
	        },

	        //开始或者停止动画
	        _transitionTime: function (time) {
	            time = time || 0;
	            this.scrollerStyle[utils.style.transitionDuration] = time + 'ms';

	            //滚动条，我们这里只会出现一个滚动条就不搞那么复杂了
	            this.indicator && this.indicator.transitionTime(time);

	        },

	        getComputedPosition: function () {
	            var matrix = window.getComputedStyle(this.scroller, null), x, y;

	            matrix = matrix[utils.style.transform].split(')')[0].split(', ');
	            x = +(matrix[12] || matrix[4]);
	            y = +(matrix[13] || matrix[5]);

	            return { x: x, y: y };
	        },

	        _initIndicator: function () {
	            //滚动条
	            var el = createDefaultScrollbar((this.options.scrollType == 'y' ? 'x' : 'y'));

	            this.wrapper.appendChild(el);
	            this.indicator = new Indicator(this, { el: el, scrollType: this.options.scrollType });

	            this.on('scrollEnd', function () {
	                this.indicator.fade();
	            });

	            var scope = this;
	            this.on('scrollCancel', function () {
	                scope.indicator.fade();
	            });

	            this.on('scrollStart', function () {
	                scope.indicator.fade(1);
	            });

	            this.on('beforeScrollStart', function () {
	                scope.indicator.fade(1, true);
	            });

	            this.on('refresh', function () {
	                scope.indicator.refresh();
	            });

	            scope.indicator.fade(1);

	        },

	        //移动x，y这里比较简单就不分离y了
	        _translate: function (x, y, isStep) {

	            if (this.options.scrollType == 'y') {
	                x = 0;
	            } else {
	                y = 0;
	            }

	            this.scrollerStyle[utils.style.transform] = 'translate(' + x + 'px,' + y + 'px)' + this.translateZ;

	            this.x = x;
	            this.y = y;

	            if (this.options.scrollbars) {
	                this.indicator.updatePosition();
	            }

	        },

	        resetPosition: function (time) {
	            var x = this.x,
			y = this.y;

	            time = time || 0;

	            if (this.options.scrollType == 'x') {
	                if (this.x >= this.options.scrollOffset) {
	                    x = this.options.scrollOffset;
	                } else if (this.x < this.maxScrollX) {
	                    x = this.maxScrollX;
	                }
	            } else {
	                if (this.y >= this.options.scrollOffset) {
	                    y = this.options.scrollOffset;
	                } else if (this.y < this.maxScrollY) {
	                    y = this.maxScrollY;
	                }
	            }

	            if ((this.options.scrollType == 'x' && x == this.x) || (this.options.scrollType == 'y' && y == this.y)) {
	                return false;
	            }

	            this.scrollTo(x, y, time, this.options.bounceEasing);
	            return true;
	        },

	        //移动
	        scrollTo: function (x, y, time, easing) {
	            easing = easing || utils.ease.circular;


	            this.isInTransition = time > 0;

	            if (!time || easing.style) {
	                this._transitionTimingFunction(easing.style);
	                this._transitionTime(time);
	                this._translate(x, y);
	            }
	        },

	        //统一的关闭接口
	        disable: function () {
	            this.enabled = false;
	        },
	        //统一的open接口
	        enable: function () {
	            this.enabled = true;
	        },

	        on: function (type, fn) {
	            if (!this._events[type]) {
	                this._events[type] = [];
	            }

	            this._events[type].push(fn);
	        },

	        _execEvent: function (type) {
	            if (!this._events[type]) {
	                return;
	            }

	            var i = 0,
				l = this._events[type].length;

	            if (!l) {
	                return;
	            }

	            for (; i < l; i++) {
	                this._events[type][i].call(this);
	            }
	        },
	        destroy: function () {
	            this.TIMERRES && clearInterval(this.TIMERRES);
	            this._initEvents(true);
	            this._execEvent('destroy');
	            this.indicator && this.indicator.destroy();

	        },

	        _transitionEnd: function (e) {
	            if (e.target != this.scroller || !this.isInTransition) {
	                return;
	            }

	            this._transitionTime();

	            this._execEvent('animatEnd');

	            if (!this.resetPosition(this.options.bounceTime)) {
	                this.isInTransition = false;
	                this._execEvent('scrollEnd');
	            }
	        },

	        //事件具体触发点
	        handleEvent: function (e) {
	            switch (e.type) {
	                case 'touchstart':
	                case 'mousedown':
	                    this._start(e);
	                    break;
	                case 'touchmove':
	                case 'mousemove':
	                    this._move(e);
	                    break;
	                case 'touchend':
	                case 'mouseup':
	                case 'touchcancel':
	                case 'mousecancel':
	                    this._end(e);
	                    break;
	                case 'orientationchange':
	                case 'resize':
	                    this._resize();
	                    break;
	                case 'transitionend':
	                case 'webkitTransitionEnd':
	                case 'oTransitionEnd':
	                case 'MSTransitionEnd':
	                    this._transitionEnd(e);
	                    break;
	            }
	        }

	    };

	    function createDefaultScrollbar(direction) {
	        var scrollbar = document.createElement('div'),
			indicator = document.createElement('div');

	        scrollbar.style.cssText = 'position:absolute;z-index:9999';
	        indicator.style.cssText = '-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:absolute;background:rgba(0,0,0,0.5);border:1px solid rgba(255,255,255,0.9);border-radius:3px';

	        if (direction == 'y') {
	            scrollbar.style.cssText += ';height:7px;left:2px;right:2px;bottom:0';
	            indicator.style.height = '100%';
	        } else {
	            scrollbar.style.cssText += ';width:7px;bottom:2px;top:2px;right:1px';
	            indicator.style.width = '100%';
	        }

	        scrollbar.style.cssText += ';overflow:hidden';

	        scrollbar.appendChild(indicator);

	        return scrollbar;
	    }

	    function Indicator(scroller, opts) {
	        this.wrapper = typeof opts.el == 'string' ? document.querySelector(opts.el) : opts.el;
	        this.indicator = this.wrapper.children[0];
	        this.scrollType = opts.scrollType;

	        this.wrapperStyle = this.wrapper.style;
	        this.indicatorStyle = this.indicator.style;
	        this.scroller = scroller;

	        this.sizeRatioX = 1;
	        this.sizeRatioY = 1;
	        this.maxPosX = 0;
	        this.maxPosY = 0;

	        this.wrapperStyle[utils.style.transform] = this.scroller.translateZ;
	        this.wrapperStyle[utils.style.transitionDuration] = '0ms';
	        this.wrapperStyle.opacity = '0';
	    }

	    Indicator.prototype = {
	        transitionTime: function (time) {
	            time = time || 0;
	            this.indicatorStyle[utils.style.transitionDuration] = time + 'ms';
	        },
	        transitionTimingFunction: function (easing) {
	            this.indicatorStyle[utils.style.transitionTimingFunction] = easing;
	        },
	        refresh: function () {

	            this.transitionTime();

	            var r = this.wrapper.offsetHeight; // force refresh

	            if (this.scrollType == 'y') {
	                this.wrapperHeight = this.wrapper.clientHeight;

	                this.indicatorHeight = Math.max(Math.round(this.wrapperHeight * this.wrapperHeight / (this.scroller.scrollerHeight || this.wrapperHeight || 1)), 8);
	                this.indicatorStyle.height = this.indicatorHeight + 'px';

	                this.maxPosY = this.wrapperHeight - this.indicatorHeight;
	                this.sizeRatioY = (this.scroller.maxScrollY && (this.maxPosY / this.scroller.maxScrollY));
	            } else {

	                this.wrapperWidth = this.wrapper.clientWidth;

	                this.indicatorWidth = Math.max(Math.round(this.wrapperWidth * this.wrapperWidth / (this.scroller.scrollerWidth || this.wrapperWidth || 1)), 8);
	                this.indicatorStyle.width = this.indicatorWidth + 'px';

	                this.maxPosX = this.wrapperWidth - this.indicatorWidth;

	                this.sizeRatioX = (this.scroller.maxScrollX && (this.maxPosX / this.scroller.maxScrollX));
	            }

	            this.updatePosition();
	        },
	        destroy: function () {
	            //remove bug
	            $(this.wrapper).remove();
	        },
	        updatePosition: function () {
	            var x = (this.scrollType == 'x') && Math.round(this.sizeRatioX * this.scroller.x) || 0,
				y = (this.scrollType == 'y') && Math.round(this.sizeRatioY * this.scroller.y) || 0;

	            this.x = x;
	            this.y = y;

	            //不需要兼容方式了
	            this.indicatorStyle[utils.style.transform] = 'translate(' + x + 'px,' + y + 'px)' + this.scroller.translateZ;

	        },
	        fade: function (val, hold) {
	            if (hold && !this.visible) {
	                return;
	            }
	            var scope = this;

	            clearTimeout(this.fadeTimeout);
	            this.fadeTimeout = null;

	            var time = val ? 250 : 500,
				delay = val ? 0 : 300;

	            val = val ? '1' : '0';

	            this.wrapperStyle[utils.style.transitionDuration] = time + 'ms';

	            this.fadeTimeout = setTimeout((function (val) {
	                scope.wrapperStyle.opacity = val;
	                scope.visible = +val;
	            })(val), delay);
	        }
	    };

	    IScroll.utils = utils;

	    return IScroll;

	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(79), __webpack_require__(99), __webpack_require__(97),__webpack_require__(20)], __WEBPACK_AMD_DEFINE_RESULT__ = function (UILayer, template, UIScroll,_) {


	  return _.inherit(UILayer, {

	    resetDefaultProperty: function ($super) {
	      $super();

	      this.classname = 'cm-layer-list';
	      this.template = template;
	      this.animateInClass = 'cm-down-in';
	      this.animateOutClass = 'cm-down-out';
	      this.curClass = 'active';

	      this.list = [];
	      this.cancelText = '取消';
	      this.index = -1;
	      this.displayNum = 5;
	      this.selectedId = null;

	      this.addEvents({
	        'click .js_cancel': 'cancelAction',
	        'click .js_item': 'itemAction'
	      });

	      this.onItemAction = function (data, index, e) {
	      };

	    },

	    getViewModel: function () {
	      return this._getDefaultViewModel(['list', 'cancelText', 'index', 'curClass', 'itemFn', 'title']);
	    },

	    //要求唯一标识，根据id确定index
	    resetPropery: function ($super) {
	      $super();

	      this._resetNum();
	    },

	    _resetNum: function () {
	      //      this.displayNum = this.displayNum % 2 == 0 ? this.displayNum + 1 : this.displayNum;
	      this.itemNum = this.list.length;

	    },

	  resetPosition: function () {
	      if (this.index < 0 || this.index > this.list.length) return;

	      if (!this.scroll) return;
	      var index = this.index, _top;
	      if (this.itemNum - index < this.displayNum) index = this.itemNum - this.displayNum;

	      _top = (this.itemHeight * index) * (-1);
	      this.scroll.scrollTo(0, _top);
	    },

	    setIndex: function (i, position) {
	      if (i < 0 || i > this.list.length) return;
	      this.index = i;
	      this.$('li').removeClass(this.curClass);
	      this.$('li[data-index="' + i + '"]').addClass(this.curClass);
	      if (position) this.resetPosition();

	    },

	    cancelAction: function (e) {
	      this.hide();
	    },

	    itemAction: function (e) {
	      var el = $(e.currentTarget);
	      if (el.hasClass('disabled')) return;

	      var index = el.attr('data-index');
	      var data = this.list[index];
	      this.setIndex(index);
	      this.onItemAction.call(this, data, index, e);

	    },

	    //弹出层类垂直居中使用
	    reposition: function () {
	      this.$el.css({
	        'position': 'fixed',
	        '-webkit-box-sizing': 'border-box',
	        'box-sizing': 'border-box',
	        'width': '100%',
	        'left': '0',
	        'bottom': '0'
	      });
	    },

	    initElement: function () {
	      this.swrapper = this.$('.js_wrapper');
	      this.scroller = this.$('.js_scroller');

	    },

	    initSize: function () {
	      var num = this.displayNum;
	      this.sheight = this.scroller.height();
	      this.itemHeight = parseInt(this.sheight / this.itemNum);
	      if (num > this.itemNum) num = this.itemNum;
	      this.swrapper.height(this.itemHeight * num);

	    },

	    addEvent: function ($super) {
	      $super();

	      //这个要在第一位，因为后面会执行父类的position方法居中，尺寸没有就不行
	      this.on('onShow', function () {
	        this.initSize();
	        if (this.scroll && this.scroll.destory) this.scroll.destory();
	        if (this.itemNum > this.displayNum) {
	          this.swrapper.css({ 'overflow': 'hidden', 'position': 'absoulute' });
	          this.scroller.css('position', 'absoulute');
	          this.scroll = new UIScroll({
	            wrapper: this.swrapper,
	            scroller: this.scroller
	          });
	          this.resetPosition();
	        }

	      }, 1);

	      this.on('onHide', function () {
	        if (this.scroll) {
	          this.scroll.destroy();
	          this.scroll = null;
	        }
	      });
	    }

	  });


	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 99 */
/***/ function(module, exports) {

	module.exports = function (obj) {
	obj || (obj = {});
	var __t, __p = '', __j = Array.prototype.join;
	function print() { __p += __j.call(arguments, '') }
	with (obj) {
	__p += '<section class="cm-modal cm-modal--action">\r\n  ';
	if(typeof title == 'string' && title.length > 0){ ;
	__p += '\r\n   <header class="cm-modal-hd">\r\n	    <h3 class="cm-modal-title js_title">' +
	((__t = (title )) == null ? '' : __t) +
	'</h3>\r\n	 </header>\r\n  ';
	} ;
	__p += '\r\n  <div class="cm-modal-bd js_wrapper">\r\n    <ul class="cm-actions cm-actions--full js_scroller" >\r\n      ';
	for(var i = 0, len = list.length; i < len; i++) {;
	__p += '\r\n        <li data-index="' +
	((__t = (i)) == null ? '' : __t) +
	'" class="cm-actions-btn js_item ';
	if(list[i].disabled){ ;
	__p += 'disabled';
	} ;
	__p += ' ';
	if(i == index) { ;
	__p += 'active';
	 } ;
	__p += '">' +
	((__t = (((typeof itemFn == "function" && itemFn(list[i])) || list[i].name))) == null ? '' : __t) +
	'</li>\r\n      ';
	};
	__p += '\r\n    </ul>\r\n  </div>\r\n  <div class="cm-modal-ft cm-actions">\r\n    <span class="cm-actions-btn js_cancel">' +
	((__t = (cancelText)) == null ? '' : __t) +
	'</span>\r\n  </div>\r\n</section>';

	}
	return __p
	}

/***/ },
/* 100 */,
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(79), __webpack_require__(102), __webpack_require__(97),__webpack_require__(20)], __WEBPACK_AMD_DEFINE_RESULT__ = function (UILayer, template, UIScroll,_) {
	  'use strict';

	  return _.inherit(UILayer, {

	    resetDefaultProperty: function ($super) {
	      $super();
	      this.template = template;

	      this.title = '';
	      this.html = '';

	      this.height = $(window).height() * 0.6;

	      this.scrollOpts = {};

	      this.addEvents({
	        'click .js_close': 'closeAction'

	      });

	      //      this.events = {
	      //        'click .js_close': 'closeAction'
	      //      };

	      this.onCloseAction = function () { };

	    },

	    closeAction: function () {
	      this.hide();
	      this.onCloseAction.call(this);
	    },

	    getViewModel: function () {
	      return this._getDefaultViewModel(['title', 'html']);
	    },

	    initElement: function () {
	      this.d_wrapper = this.$('.js_wrapper');
	      this.d_scoller = this.$('.js_scroller');
	    },

	    initScroll: function () {
	      if (!this.html) return;
	      this.$el.css({
	        '-webkit-box-sizing': 'border-box',
	        'box-sizing': 'border-box',
	        'padding': '10px',
	        'width': '100%'
	      });

	      if (this.d_wrapper.height() < this.height) return;

	      this.d_wrapper.css({ 'overflow': 'hidden', 'position': 'absoulute', 'height': this.height + 'px' });
	      this.d_scoller.css('position', 'absoulute');

	      if (this.scroll && this.scroll.destory) this.scroll.destory();
	      this.scrollOpts.wrapper = this.d_wrapper;
	      this.scrollOpts.scroller = this.d_scoller;
	      this.scroll = new UIScroll(this.scrollOpts);

	    },

	    addEvent: function ($super) {
	      $super();

	      this.on('onShow', function () {
	        this.initScroll();
	      }, 1);

	      this.on('onHide', function () {
	        if (this.scroll) {
	          this.scroll.destroy();
	          this.scroll = null;
	        }
	      });

	    }

	  });


	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 102 */
/***/ function(module, exports) {

	module.exports = function (obj) {
	obj || (obj = {});
	var __t, __p = '', __j = Array.prototype.join;
	function print() { __p += __j.call(arguments, '') }
	with (obj) {
	__p += '<section class="cm-modal" >\r\n    ';
	if(typeof title == 'string' && title.length > 0){ ;
	__p += '\r\n	    <header class="cm-modal-hd">\r\n	        <h3 class="cm-modal-title">' +
	((__t = (title )) == null ? '' : __t) +
	'</h3>\r\n	        <i class="icon-close js_close" ></i>\r\n	    </header>\r\n	';
	} ;
	__p += '\r\n    <div class="cm-modal-bd  js_wrapper">\r\n      <div class="js_scroller">' +
	((__t = (html )) == null ? '' : __t) +
	'</div>\r\n    </div>\r\n</section>';

	}
	return __p
	}

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./city/city": 104,
		"./city/city.css": 114,
		"./city/city.ejs": 111,
		"./city/city.js": 104,
		"./city/city.list.ejs": 112,
		"./city/city.search.list.ejs": 113,
		"./index/index": 116,
		"./index/index.js": 116,
		"./index/nuomi.index": 118,
		"./index/nuomi.index.js": 118,
		"./index/tpl.layout.ejs": 117,
		"./list/en.date": 119,
		"./list/en.date.js": 119,
		"./list/en.station": 121,
		"./list/en.station.js": 121,
		"./list/en.time": 122,
		"./list/en.time.js": 122,
		"./list/list": 123,
		"./list/list.css": 130,
		"./list/list.js": 123,
		"./list/mod.arrive": 132,
		"./list/mod.arrive.js": 132,
		"./list/mod.date": 127,
		"./list/mod.date.js": 127,
		"./list/mod.setout": 124,
		"./list/mod.setout.js": 124,
		"./list/mod.time": 129,
		"./list/mod.time.js": 129,
		"./list/tpl.calendar.bar.ejs": 128,
		"./list/tpl.layout.ejs": 133,
		"./list/tpl.list.ejs": 126,
		"./list/tpl.search.box.ejs": 134
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 103;


/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(105), __webpack_require__(106), __webpack_require__(108), __webpack_require__(111), __webpack_require__(112), __webpack_require__(113), __webpack_require__(114),__webpack_require__(20)
	], __WEBPACK_AMD_DEFINE_RESULT__ = function (AbstractView, BusModel, BusStore, html, listTpl, searchTpl, style,_) {

	    return _.inherit(AbstractView, {
	        propertys: function ($super) {
	            $super();
	            this.style = style;
	            this.template = html;
	            this.events = {
	                'click .js_city_list li': 'cityItemAction',
	                'click .js_city_item': 'cityItemAction',
	                'input .js_search_text': 'openSearch',
	                'click .js_cancel_search': 'closeSearch',
	                'click .js_nav_city li': 'navItemAction'
	            };

	        },

	        initHeader: function () {
	            var scope = this;
	            this.header.set({
	                view: this,
	                title: '城市选择',
	                back: function () {
	                    this.onBackAction();
	                    this.closeSearch();
	                }
	            });
	        },

	        onBackAction: function () {

	        },

	        initElement: function () {
	            this.d_hisCity = this.$('.js_his_city_wrapper');
	            this.d_city_wrapper = this.$('.js_city_wrapper');
	            this.d_search_txt = this.$('.js_search_text');
	            this.d_no_data = this.$('.js_none_data');
	            this.d_js_nav_city = this.$('.js_nav_city');
	            this.d_js_search_list = this.$('.js_search_list');

	        },

	        openSearch: function () {
	            var scope = this;
	            this.d_hisCity.hide();
	            this.d_js_nav_city.hide();
	            this.d_city_wrapper.hide();

	            this.$el.addClass('search-active');

	            var key = this.d_search_txt.val().trim ? this.d_search_txt.val().trim() : this.d_search_txt.val();
	            if (key == '') {
	                this.$el.removeClass('search-active');
	                this.d_city_wrapper.show();
	                this.d_js_search_list.hide();

	                return;
	            }

	            this.searchModel.setParam('word', key);
	            this.d_js_search_list.show();
	            this.searchModel.execute(function (data) {
	                data = data.citys;
	                if (data.length == 0) {
	                    scope.d_no_data.show();
	                    scope.d_js_search_list.html('');
	                } else {
	                    scope.d_no_data.hide();
	                    //渲染搜索列表
	                    scope.d_js_search_list.html(scope.renderTpl(searchTpl, { data: data }));
	                }
	            });

	        },

	        closeSearch: function () {
	            this.$el.removeClass('search-active');
	            this.d_js_nav_city.show();
	            this.d_no_data.hide();
	            this.d_search_txt.val('');
	            this.d_search_txt.blur();
	            this.d_hisCity.show();
	            this.d_city_wrapper.show();
	            this.d_js_search_list.hide();

	        },

	        cityItemAction: function (e) {
	            var i, len;
	            var el = $(e.currentTarget);
	            var id = el.attr('data-city');
	            var station = el.attr('data-station');
	            var name = el.attr('data-name');
	            var type = el.attr('data-type');

	            var arr = this.hisCityObj;
	            if (this.flag == 'end') arr = this.hisCityObj[this.startId];

	            arr = arr.reverse();
	            len = arr.length;

	            //存在便不予理睬
	            for (i = 0; i < len; i++) {
	                if (arr[i].regionid == id) { arr.splice(i, 1); break; }
	            }

	            arr.push({ regionid: id, cnname: name });
	            arr = arr.reverse();
	            arr = arr.slice(0, 6);

	            if (this.flag == 'end') this.hisCityObj[this.startId] = arr;
	            else this.hisCityObj = arr;

	            //暂时只有城市才存储
	            if (type == '2')
	                this.hisCity.set(this.hisCityObj);

	            this.onCityItemClick(id, name, station, type);
	            this.closeSearch();

	        },

	        onCityItemClick: function (id, name, station, type) {
	        },

	        addEvent: function () {
	            this.on('onShow', function () {
	                this.initHisList();
	                this.initList();
	            });
	        },

	        initHisList: function () {
	            var data;
	            if (this.flag && this.flag == 'end') {
	                this.hisCity = BusStore.EHisCityStore.getInstance();
	            } else {
	                this.hisCity = BusStore.SHisCityStore.getInstance();
	            }

	            this.hisCityObj = this.hisCity.get();
	            if (!this.hisCityObj) {
	                if (this.flag == 'end') {
	                    this.hisCityObj = {};
	                    this.hisCityObj[this.startId] = [];
	                } else {
	                    this.hisCityObj = [];
	                }
	            }

	            if (this.flag == 'end' && !this.hisCityObj[this.startId]) {
	                this.hisCityObj[this.startId] = [];
	            }

	            data = (this.flag == 'end') ? this.hisCityObj[this.startId] : this.hisCityObj;
	            data = data || [];

	            var html = this.renderTpl(listTpl, { data: [{ 'history': data}] });
	            this.d_hisCity.html(html);

	        },

	        initNavCity: function () {
	            var groups = this.$('.js_group_name');
	            var item, navs = [];
	            navs.push('<ul>');
	            for (var i = 0, len = groups.length; i < len; i++) {
	                item = groups.eq(i);
	                navs.push('<li data-top="' + item.offset().top + '">' + item.html() + '</li>');
	            }
	            navs.push('</ul>');

	            this.d_js_nav_city.html(navs.join(''));

	        },

	        navItemAction: function (e) {
	            e.preventDefault();
	            var el = $(e.currentTarget);
	            var top = el.attr('data-top');
	            window.scroll(0, top);
	        },

	        getListData: function (data) {
	            var citys = {}, sortCitys = [];
	            var k, gname, name, i, tmp = {}, index;

	            //首先处理每个name生成唯一K
	            for (k in data) {
	                name = data[k].name;
	                if (!name) {
	                    continue;
	                }
	                gname = name[0].toUpperCase();
	                if (!citys[gname]) citys[gname] = [];
	                citys[gname].push(data[k]);
	            }

	            for (i = 65; i < 91; i++) {
	                tmp = {};
	                tmp[String.fromCharCode(i)] = [];
	                sortCitys.push(tmp);
	            }

	            for (k in citys) {
	                index = k.charCodeAt() - 65;
	                tmp = {};
	                tmp[k] = citys[k];
	                sortCitys[index] = tmp;
	            }

	            return sortCitys;
	        },

	        renderCitys: function (data) {
	            var citis = this.getListData(data.cities)
	            var html = this.renderTpl(listTpl, { data: citis });
	            this.d_city_wrapper.html(html);

	            //城市列表渲染结束，便渲染城市导航
	            this.initNavCity();
	        },

	        initList: function () {
	            var scope = this;

	            if (this.flag && this.flag == 'end') {

	                //目的地搜索
	                this.searchModel = BusModel.ECitySearchModel.getInstance();
	                this.searchModel.setParam({
	                    id: this.startId,
	                    type: this.type
	                });

	                this.listModel = BusModel.ECityModel.getInstance();
	                this.listModel.setParam({
	                    startcityid: this.startId
	                });
	            } else {
	                //目的地搜索
	                this.searchModel = BusModel.SCitySearchModel.getInstance();
	                this.listModel = BusModel.SCityModel.getInstance();
	            }
	            this.showLoading();
	            this.listModel.execute(function (data) {
	                scope.renderCitys(data);
	                scope.hideLoading();
	            }, function (data) {
	                scope.hideLoading();
	                if (data.msg)
	                    scope.showToast(data.msg, function () {
	                        scope.hidePageView();
	                    });
	            });
	        }

	    });

	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(20)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_) {
	    'use strict';

	    return _.inherit({

	        _propertys: function () {
	            this.APP = this.APP || window.APP;
	            var i = 0, len = 0, k;
	            if (this.APP && this.APP.interface) {
	                for (i = 0, len = this.APP.interface.length; i < len; i++) {
	                    k = this.APP.interface[i];
	                    if (k == 'showPageView') continue;

	                    if (_.isFunction(this.APP[k])) {
	                        this[k] = $.proxy(this.APP[k], this.APP);
	                    }
	                    else this[k] = this.APP[k];
	                }
	            }

	            this.header = this.APP.header;
	        },

	        //显示具体层级的视图
	        showPageView: function (name, _viewdata, id) {
	            this.APP.curViewIns = this;
	            this.APP.showPageView(name, _viewdata, id)
	        },
	        propertys: function () {
	            //这里设置UI的根节点所处包裹层
	            this.wrapper = $('#main');
	            this.id = _.uniqueId('page-view-');
	            this.classname = '';

	            this.viewId = null;
	            this.refer = null;

	            //模板字符串，各个组件不同，现在加入预编译机制
	            this.template = '';
	            //事件机制
	            this.events = {};

	            //自定义事件
	            //此处需要注意mask 绑定事件前后问题，考虑scroll.radio插件类型的mask应用，考虑组件通信
	            this.eventArr = {};

	            //初始状态为实例化
	            this.status = 'init';

	            this._propertys();
	        },

	        getViewModel: function () {
	            //假如有datamodel的话，便直接返回，不然便重写，这里基本为了兼容
	            if (_.isObject(this.datamodel)) return this.datamodel;
	            return {};
	        },

	        //子类事件绑定若想保留父级的，应该使用该方法
	        addEvents: function (events) {
	            if (_.isObject(events)) _.extend(this.events, events);
	        },

	        //订阅事件的回调函数
	        on: function (type, fn, insert) {
	            if (!this.eventArr[type]) this.eventArr[type] = [];

	            //头部插入
	            if (insert) {
	                this.eventArr[type].splice(0, 0, fn);
	            } else {
	                this.eventArr[type].push(fn);
	            }
	        },

	        //取消事件的回调函数
	        off: function (type, fn) {
	            if (!this.eventArr[type]) return;
	            if (fn) {
	                this.eventArr[type] = _.without(this.eventArr[type], fn);
	            } else {
	                this.eventArr[type] = [];
	            }
	        },

	        //定义类的自定义事件
	        trigger: function (type) {
	            var _slice = Array.prototype.slice;
	            var args = _slice.call(arguments, 1);
	            var events = this.eventArr;
	            var results = [], i, l;

	            if (events[type]) {
	                for (i = 0, l = events[type].length; i < l; i++) {
	                    results[results.length] = events[type][i].apply(this, args);
	                }
	            }
	            return results;
	        },

	        //创建根节点
	        createRoot: function (html) {

	            //如果存在style节点，并且style节点不存在的时候需要处理
	            if (this.style && !$('#page_' + this.viewId)[0]) {
	                $('head').append($('<style id="page_' + this.viewId + '" class="page-style">' + this.style + '</style>'))
	            }

	            //如果具有fake节点，需要移除
	            $('#fake-page').remove();

	            //UI的根节点
	            this.$el = $('<div class="cm-view page-' + this.viewId + ' ' + this.classname + '" style="display: none; " id="' + this.id + '">' + html + '</div>');
	            if (this.wrapper.find('.cm-view')[0]) {
	                this.wrapper.append(this.$el);
	            } else {
	                this.wrapper.html('').append(this.$el);
	            }

	        },

	        //是否是默认事件
	        _isAddEvent: function (key) {
	            if (key == 'onCreate' || key == 'onPreShow' || key == 'onShow' || key == 'onRefresh' || key == 'onHide')
	                return true;
	            return false;
	        },

	        //根据参数重置当前属性
	        setOption: function (options) {

	            for (var k in options) {

	                if (k == 'events') {
	                    _.extend(this[k], options[k]);
	                    continue;
	                } else if (this._isAddEvent(k)) {
	                    this.on(k, options[k])
	                    continue;
	                } else if(k == "html"){
	                    var _html = options[k]();
	                    this[k] = _html;
	                    continue;
	                }
	                this[k] = options[k];
	            }

	        },

	        //组件初始化，一定执行
	        initialize: function (opts) {
	            //设置默认属性
	            this.propertys();
	            //根据参数重置属性
	            this.setOption(opts);
	            //检测不合理属性，修正为正确数据
	            this.resetPropery();
	            //为当前类添加事件
	            this.addEvent();
	            this.create();

	            this.initElement();

	            //window.sss = this;

	        },

	        //选择器
	        $: function (selector) {
	            return this.$el.find(selector);
	        },

	        //提供属性重置功能，对属性做检查
	        resetPropery: function () { },

	        //各事件注册点，用于被继承override
	        addEvent: function () {
	        },

	        //渲染模板，定义组件生命周期的相关事件
	        create: function () {
	            this.trigger('onPreCreate');   //自定义事件：onPreCreate
	            //如果没有传入模板，说明html结构已经存在
	            this.createRoot(this.render());
	            this.status = 'create';
	            this.trigger('onCreate');
	        },

	        //实例化需要用到到dom元素
	        initElement: function () { },

	        //渲染模板，创建html片段
	        render: function (callback) {
	            var data = this.getViewModel() || {};
	            var html = this.template;
	            if (!this.template) return '';
	            //引入预编译机制，比如webpack
	            if (_.isFunction(this.template)) {
	                html = this.template(data);
	            } else {
	                html = _.template(this.template)(data);
	            }
	            typeof callback == 'function' && callback.call(this);
	            return html;
	        },

	        /**
	         * @description 组件刷新方法，首次显示会将ui对象实际由内存插入包裹层
	         * @method refresh
	         * @param {Boolean} needRecreate 组件是否重新创建，生命周期状态为create
	         */
	        refresh: function (needRecreate) {
	            this.resetPropery();
	            if (needRecreate) {
	                this.create();
	            } else {
	                this.$el.html(this.render());   //render可以传入回调函数，渲染之后的业务逻辑
	            }
	            this.initElement();   //初始化DOM
	            if (this.status != 'hide') this.show();
	            this.trigger('onRefresh');
	        },

	        /**
	        * @description 组件显示方法，首次显示会将ui对象实际由内存插入包裹层
	        * @method show
	        */
	        show: function () {
	            this.trigger('onPreShow');
	            //      //如果包含就不要乱搞了
	            //      if (!$.contains(this.wrapper[0], this.$el[0])) {
	            //        //如果需要清空容器的话便清空
	            //        if (this.needEmptyWrapper) this.wrapper.html('');
	            //        this.wrapper.append(this.$el);
	            //      }

	            this.$el.show();
	            this.status = 'show';

	            this.bindEvents();

	            this.initHeader();
	            this.trigger('onShow');
	        },

	        initHeader: function (){},

	        //组件隐藏方法
	        hide: function () {
	            if (!this.$el || this.status !== 'show') return;

	            this.trigger('onPreHide');
	            this.$el.hide();

	            this.status = 'hide';
	            this.unBindEvents();
	            this.trigger('onHide');
	        },

	        //组件销毁方法
	        destroy: function () {
	            this.status = 'destroy';
	            this.unBindEvents();
	            this.$root.remove();
	            this.trigger('onDestroy');
	            delete this;
	        },

	        //初始化事件
	        bindEvents: function () {
	            var events = this.events;

	            if (!(events || (events = _.result(this, 'events')))) return this;
	            this.unBindEvents();

	            // 解析event参数的正则
	            var delegateEventSplitter = /^(\S+)\s*(.*)$/;
	            var key, method, match, eventName, selector;

	            // 做简单的字符串数据解析
	            for (key in events) {
	                method = events[key];
	                if (!_.isFunction(method)) method = this[events[key]];
	                if (!method) continue;

	                match = key.match(delegateEventSplitter);
	                eventName = match[1], selector = match[2];
	                method = _.bind(method, this);
	                eventName += '.delegateUIEvents' + this.id;

	                if (selector === '') {
	                    this.$el.on(eventName, method);
	                } else {
	                    this.$el.on(eventName, selector, method);
	                }
	            }

	            return this;
	        },

	        unBindEvents: function () {
	            this.$el.off('.delegateUIEvents' + this.id);
	            return this;
	        },

	        //获取当前url中的key值
	        getParam: function (key) {
	            return _.getUrlParam(window.location.href, key)
	        },

	        //渲染模板
	        renderTpl: function (tpl, data) {
	            if (!_.isFunction(tpl)) tpl = _.template(tpl);
	            return tpl(data);
	        }


	    });

	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(107), __webpack_require__(108),__webpack_require__(20)], __WEBPACK_AMD_DEFINE_RESULT__ = function (AbstractModel, BusStore,_) {

	    var BaseModel = _.inherit(AbstractModel, {

	        initDomain: function () {
	            //复杂的环境问题
	            //......
	            this.domain = 'api.kuai.baidu.com';
	        },

	        propertys: function ($super) {
	            $super();

	            this.initDomain();

	            var t = (new Date().getTime()).toString();
	            this.path = '';

	            this.cacheData = null;
	            this.param = {
	                head: {
	                    us: '',
	                    version: '1.0.0',
	                    ct: 3,
	                    time: t.substr(0, t.length - 3),
	                    sign:''
	                }
	            };
	            this.dataType = 'jsonp';
	            this.ajaxOnly = false;

	            this.errorCallback = function () { };

	            //统一处理分返回验证
	            this.pushValidates(function (data) {
	                return this.baseDataValidate(data);
	            });

	        },

	        //首轮处理返回数据，检查错误码做统一验证处理
	        baseDataValidate: function (data) {
	            if (_.isString(data)) data = JSON.parse(data);
	            if (data.errno === 0) return true;
	            if (window.APP && data && data.msg) window.APP.showToast(data.msg, this.errorCallback);
	            return false;
	        },

	        dataformat: function (data) {
	            if (_.isString(data)) data = JSON.parse(data);
	            if (data.data) return data.data;
	            return data;
	        },

	        buildurl: function () {
	            return this.protocol + '://' + this.domain + this.path + (typeof this.url === 'function' ? this.url() : this.url);
	        },

	        getSign: function () {
	            var param = this.getParam() || {};
	            return JSON.stringify(param);
	        },

	        onDataSuccess: function (fdata, data) {
	            if (this.cacheData && this.cacheData.set)
	                this.cacheData.set(fdata, this.getSign());
	        },

	        execute: function ($super, onComplete, onError, ajaxOnly, scope) {
	            var data = null;
	            if (!ajaxOnly && !this.ajaxOnly && this.cacheData && this.cacheData.get) {
	                data = this.cacheData.get(this.getSign());
	                if (data) {
	                    onComplete(data);
	                    return;
	                }
	            }
	            $super(onComplete, onError, ajaxOnly, scope);
	        }

	    });


	    return {

	        SCityModel: _.inherit(BaseModel, {
	            //默认属性
	            propertys: function ($super) {
	                $super();
	                this.url = '/city/getstartcitys';
	                this.cacheData = BusStore.SCityStore.getInstance();
	            }
	        }),

	        ECityModel: _.inherit(BaseModel, {
	            //默认属性
	            propertys: function ($super) {
	                $super();
	                this.url = '/city/getarrivalcitys';
	                this.cacheData = BusStore.ECityStore.getInstance();

	            }
	        }),

	        SCitySearchModel: _.inherit(BaseModel, {
	            //默认属性
	            propertys: function ($super) {
	                $super();
	                this.url = '/city/searchstart';
	                //        this.cacheData = BusStore.ECitySearchStore.getInstance();
	            }
	        }),

	        ECitySearchModel: _.inherit(BaseModel, {
	            //默认属性
	            propertys: function ($super) {
	                $super();
	                this.url = '/city/searcharrival';
	                //        this.cacheData = BusStore.ECitySearchStore.getInstance();
	            }
	        }),

	        ListModel: _.inherit(BaseModel, {
	            //默认属性
	            propertys: function ($super) {
	                $super();
	                this.url = '/schedule/list';
	                this.cacheData = BusStore.ListStore.getInstance();

	            }
	        })
	    };
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(20)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_) {

	  var Model = _.inherit({
	    //默认属性
	    propertys: function () {
	      this.protocol = 'http';
	      this.domain = '';
	      this.path = '';
	      this.url = null;
	      this.param = {};
	      this.validates = [];
	      //      this.contentType = 'application/json';

	      this.ajaxOnly = true;

	      this.contentType = 'application/x-www-form-urlencoded';
	      this.type = 'GET';
	      this.dataType = 'json';
	    },

	    setOption: function (options) {
	      _.extend(this, options);
	    },

	    assert: function () {
	      if (this.url === null) {
	        throw 'not override url property';
	      }
	    },

	    initialize: function (opts) {
	      this.propertys();
	      this.setOption(opts);
	      this.assert();

	    },

	    pushValidates: function (handler) {
	      if (typeof handler === 'function') {
	        this.validates.push($.proxy(handler, this));
	      }
	    },

	    setParam: function (key, val) {
	      if (typeof key === 'object') {
	        _.extend(this.param, key);
	      } else {
	        this.param[key] = val;
	      }
	    },

	    removeParam: function (key) {
	      delete this.param[key];
	    },

	    getParam: function () {
	      return this.param;
	    },

	    //构建url请求方式，子类可复写，我们的model如果localstorage设置了值便直接读取，但是得是非正式环境
	    buildurl: function () {
	      //      var baseurl = AbstractModel.baseurl(this.protocol);
	      //      return this.protocol + '://' + baseurl.domain + '/' + baseurl.path + (typeof this.url === 'function' ? this.url() : this.url);
	      throw "[ERROR]abstract method:buildurl, must be override";

	    },

	    onDataSuccess: function () {
	    },

	    /**
	    *	取model数据
	    *	@param {Function} onComplete 取完的回调函
	    *	传入的第一个参数为model的数第二个数据为元数据，元数据为ajax下发时的ServerCode,Message等数
	    *	@param {Function} onError 发生错误时的回调
	    *	@param {Boolean} ajaxOnly 可选，默认为false当为true时只使用ajax调取数据
	    * @param {Boolean} scope 可选，设定回调函数this指向的对象
	    * @param {Function} onAbort 可选，但取消时会调用的函数
	    */
	    execute: function (onComplete, onError, ajaxOnly, scope) {
	      var __onComplete = $.proxy(function (data) {
	        var _data = data;
	        if (typeof data == 'string') _data = JSON.parse(data);

	        // @description 开发者可以传入一组验证方法进行验证
	        for (var i = 0, len = this.validates.length; i < len; i++) {
	          if (!this.validates[i](data)) {
	            // @description 如果一个验证不通过就返回
	            if (typeof onError === 'function') {
	              return onError.call(scope || this, _data, data);
	            } else {
	              return false;
	            }
	          }
	        }

	        // @description 对获取的数据做字段映射
	        var datamodel = typeof this.dataformat === 'function' ? this.dataformat(_data) : _data;

	        if (this.onDataSuccess) this.onDataSuccess.call(this, datamodel, data);
	        if (typeof onComplete === 'function') {
	          onComplete.call(scope || this, datamodel, data);
	        }

	      }, this);

	      var __onError = $.proxy(function (e) {
	        if (typeof onError === 'function') {
	          onError.call(scope || this, e);
	        }
	      }, this);

	      this.sendRequest(__onComplete, __onError);

	    },

	    sendRequest: function (success, error) {
	      var url = this.buildurl();
	      var params = _.clone(this.getParam() || {});
	      var crossDomain = {
	        'json': true,
	        'jsonp': true
	      };

	      //      if (this.type == 'json')
	      //      if (this.type == 'POST') {
	      //        this.dataType = 'json';
	      //      } else {
	      //        this.dataType = 'jsonp';
	      //      }

	      if (this.type == 'POST') {
	        this.dataType = 'json';
	      }

	      //jsonp与post互斥
	      $.ajax({
	        url: url,
	        type: this.type,
	        data: params,
	        dataType: this.dataType,
	        contentType: this.contentType,
	        crossDomain: crossDomain[this.dataType],
	        timeout: 50000,
	        xhrFields: {
	          withCredentials: true
	        },
	        success: function (res) {
	          success && success(res);
	        },
	        error: function (err) {
	          error && error(err);
	        }
	      });

	    }

	  });

	  Model.getInstance = function () {
	    if (this.instance) {
	      return this.instance;
	    } else {
	      return this.instance = new this();
	    }
	  };

	  return Model;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(109),__webpack_require__(20)], __WEBPACK_AMD_DEFINE_RESULT__ = function (AbstractStore,_) {

	  return {
	    InitAppStore: _.inherit(AbstractStore, {
	      //默认属性
	      propertys: function ($super) {
	        $super();
	        this.key = 'BUS_InitAppStore';
	        this.lifeTime = '1D'; //缓存时间
	      }
	    }),

	    SCityStore: _.inherit(AbstractStore, {
	      //默认属性
	      propertys: function ($super) {
	        $super();
	        this.key = 'BUS_StartCityStore';
	        this.lifeTime = '5D'; //缓存时间
	      }
	    }),

	    ECityStore: _.inherit(AbstractStore, {
	      //默认属性
	      propertys: function ($super) {
	        $super();
	        this.key = 'BUS_EndCityStore';
	        this.lifeTime = '5D'; //缓存时间

	      }
	    }),

	    ECitySearchStore: _.inherit(AbstractStore, {
	      //默认属性
	      propertys: function ($super) {
	        $super();
	        this.key = 'BUS_EndCitySearchStore';
	        this.lifeTime = '1D'; //缓存时间

	      }
	    }),

	    SHisCityStore: _.inherit(AbstractStore, {
	      //默认属性
	      propertys: function ($super) {
	        $super();
	        this.key = 'BUS_StartHisCityStore';
	        this.lifeTime = '1D'; //缓存时间

	      }
	    }),

	    EHisCityStore: _.inherit(AbstractStore, {
	      //默认属性
	      propertys: function ($super) {
	        $super();
	        this.key = 'BUS_EndHisCityStore';
	        this.lifeTime = '1D'; //缓存时间

	      }
	    }),

	    //历史选择数据
	    HisRouteStore: _.inherit(AbstractStore, {
	      //默认属性
	      propertys: function ($super) {
	        $super();
	        this.key = 'BUS_HisRouteStore';
	        this.lifeTime = '30D'; //缓存时间
	      }
	    }),

	    ListStore: _.inherit(AbstractStore, {
	      //默认属性
	      propertys: function ($super) {
	        $super();
	        this.key = 'BUS_ListStore';
	        this.lifeTime = '1M'; //缓存时间
	      }
	    }),

	    startCityStore: _.inherit(AbstractStore, {
	      //默认属性
	      propertys: function ($super) {
	        $super();
	        this.key = 'BUS_StartCityObjStore';
	        this.lifeTime = '1D';

	      }
	    }),

	    endCityStore: _.inherit(AbstractStore, {
	      //默认属性
	      propertys: function ($super) {
	        $super();
	        this.key = 'BUS_EndCityObjStore';
	        this.lifeTime = '1D';
	      }
	    }),

	    CityStatusStore: _.inherit(AbstractStore, {
	      //默认属性
	      propertys: function ($super) {
	        $super();
	        this.key = 'BUS_CityStatusStore';
	        this.lifeTime = '1D';
	      }
	    }),

	    setOutDateStore: _.inherit(AbstractStore, {
	      //默认属性
	      propertys: function ($super) {
	        $super();
	        this.key = 'BUS_SetOutDateStore';
	        this.lifeTime = '1H';
	      }
	    }),

	    ScheduleDetailStore: _.inherit(AbstractStore, {
	      //默认属性
	      propertys: function ($super) {
	        $super();
	        this.key = 'BUS_ScheduleDetailStore';
	        this.lifeTime = '30S';
	      }
	    }),

	    UserInfoStore: _.inherit(AbstractStore, {
	      //默认属性
	      propertys: function ($super) {
	        $super();
	        this.key = 'BUS_UserInfoStore';
	        this.lifeTime = '1H';
	      }
	    }),

	    ContactListStore: _.inherit(AbstractStore, {
	      //默认属性
	      propertys: function ($super) {
	        $super();
	        this.key = 'BUS_ContactListStore';
	        this.lifeTime = '1D';
	      }
	    }),

	    OrderListStore: _.inherit(AbstractStore, {
	      //默认属性
	      propertys: function ($super) {
	        $super();
	        this.key = 'BUS_OrderListStore';
	        this.lifeTime = '10S';
	      }
	    }),

	    OrderDetailStore: _.inherit(AbstractStore, {
	      //默认属性
	      propertys: function ($super) {
	        $super();
	        this.key = 'BUS_OrderDetailStore';
	        this.lifeTime = '10S';
	      }
	    }),

	    //出发站地图相关接口
	    stationListStore: _.inherit(AbstractStore, {
	      //默认属性
	      propertys: function ($super) {
	        $super();
	        this.key = 'BUS_StationListStore';
	        this.lifeTime = '1D';
	      }
	    })

	  }

	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(110),__webpack_require__(20)], __WEBPACK_AMD_DEFINE_RESULT__ = function (AbstractStorage,_) {

	  var Store = _.inherit({
	    //默认属性
	    propertys: function () {

	      //每个对象一定要具有存储键，并且不能重复
	      this.key = null;

	      //默认一条数据的生命周期，S为秒，M为分，D为天
	      this.lifeTime = '30M';

	      //默认返回数据
	      //      this.defaultData = null;

	      //代理对象，localstorage对象
	      this.sProxy = new AbstractStorage();

	    },

	    setOption: function (options) {
	      _.extend(this, options);
	    },

	    assert: function () {
	      if (this.key === null) {
	        throw 'not override key property';
	      }
	      if (this.sProxy === null) {
	        throw 'not override sProxy property';
	      }
	    },

	    initialize: function (opts) {
	      this.propertys();
	      this.setOption(opts);
	      this.assert();
	    },

	    _getLifeTime: function () {
	      var timeout = 0;
	      var str = this.lifeTime;
	      var unit = str.charAt(str.length - 1);
	      var num = str.substring(0, str.length - 1);
	      var Map = {
	        D: 86400,
	        H: 3600,
	        M: 60,
	        S: 1
	      };
	      if (typeof unit == 'string') {
	        unit = unit.toUpperCase();
	      }
	      timeout = num;
	      if (unit) timeout = Map[unit];

	      //单位为毫秒
	      return num * timeout * 1000 ;
	    },

	    //缓存数据
	    set: function (value, sign) {
	      //获取过期时间
	      var timeout = new Date();
	      timeout.setTime(timeout.getTime() + this._getLifeTime());
	      this.sProxy.set(this.key, value, timeout.getTime(), sign);
	    },

	    //设置单个属性
	    setAttr: function (name, value, sign) {
	      var key, obj;
	      if (_.isObject(name)) {
	        for (key in name) {
	          if (name.hasOwnProperty(key)) this.setAttr(k, name[k], value);
	        }
	        return;
	      }

	      if (!sign) sign = this.getSign();

	      //获取当前对象
	      obj = this.get(sign) || {};
	      if (!obj) return;
	      obj[name] = value;
	      this.set(obj, sign);

	    },

	    getSign: function () {
	      return this.sProxy.getSign(this.key);
	    },

	    remove: function () {
	      this.sProxy.remove(this.key);
	    },

	    removeAttr: function (attrName) {
	      var obj = this.get() || {};
	      if (obj[attrName]) {
	        delete obj[attrName];
	      }
	      this.set(obj);
	    },

	    get: function (sign) {
	      var result = [], isEmpty = true, a;
	      var obj = this.sProxy.get(this.key, sign);
	      var type = typeof obj;
	      var o = { 'string': true, 'number': true, 'boolean': true };
	      if (o[type]) return obj;

	      if (_.isArray(obj)) {
	        for (var i = 0, len = obj.length; i < len; i++) {
	          result[i] = obj[i];
	        }
	      } else if (_.isObject(obj)) {
	        result = obj;
	      }

	      for (a in result) {
	        isEmpty = false;
	        break;
	      }
	      return !isEmpty ? result : null;
	    },

	    getAttr: function (attrName, tag) {
	      var obj = this.get(tag);
	      var attrVal = null;
	      if (obj) {
	        attrVal = obj[attrName];
	      }
	      return attrVal;
	    }

	  });

	  Store.getInstance = function () {
	    if (this.instance) {
	      return this.instance;
	    } else {
	      return this.instance = new this();
	    }
	  };

	  return Store;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(20)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_) {

	  var Storage = _.inherit({
	    //默认属性
	    propertys: function () {

	      //代理对象，默认为localstorage
	      this.sProxy = window.localStorage;

	      //60 * 60 * 24 * 30 * 1000 ms ==30天
	      this.defaultLifeTime = 2592000000;

	      //本地缓存用以存放所有localstorage键值与过期日期的映射
	      this.keyCache = 'SYSTEM_KEY_TIMEOUT_MAP';

	      //当缓存容量已满，每次删除的缓存数
	      this.removeNum = 5;

	    },

	    assert: function () {
	      if (this.sProxy === null) {
	        throw 'not override sProxy property';
	      }
	    },

	    initialize: function (opts) {
	      this.propertys();
	      this.assert();
	    },

	    /*
	    新增localstorage
	    数据格式包括唯一键值，json字符串，过期日期，存入日期
	    sign 为格式化后的请求参数，用于同一请求不同参数时候返回新数据，比如列表为北京的城市，后切换为上海，会判断tag不同而更新缓存数据，tag相当于签名
	    每一键值只会缓存一条信息
	    */
	    set: function (key, value, timeout, sign) {
	      var _d = new Date();
	      //存入日期
	      var indate = _d.getTime();

	      //最终保存的数据
	      var entity = null;

	      if (!timeout) {
	        _d.setTime(_d.getTime() + this.defaultLifeTime);
	        timeout = _d.getTime();
	      }

	      //
	      this.setKeyCache(key, timeout);
	      entity = this.buildStorageObj(value, indate, timeout, sign);

	      try {
	        this.sProxy.setItem(key, JSON.stringify(entity));
	        return true;
	      } catch (e) {
	        //localstorage写满时,全清掉
	        if (e.name == 'QuotaExceededError') {
	          //            this.sProxy.clear();
	          //localstorage写满时，选择离过期时间最近的数据删除，这样也会有些影响，但是感觉比全清除好些，如果缓存过多，此过程比较耗时，100ms以内
	          if (!this.removeLastCache()) throw '本次数据存储量过大';
	          this.set(key, value, timeout, sign);
	        }
	        console && console.log(e);
	      }
	      return false;
	    },

	    //删除过期缓存
	    removeOverdueCache: function () {
	      var tmpObj = null, i, len;

	      var now = new Date().getTime();
	      //取出键值对
	      var cacheStr = this.sProxy.getItem(this.keyCache);
	      var cacheMap = [];
	      var newMap = [];
	      if (!cacheStr) {
	        return;
	      }

	      cacheMap = JSON.parse(cacheStr);

	      for (i = 0, len = cacheMap.length; i < len; i++) {
	        tmpObj = cacheMap[i];
	        if (tmpObj.timeout < now) {
	          this.sProxy.removeItem(tmpObj.key);
	        } else {
	          newMap.push(tmpObj);
	        }
	      }
	      this.sProxy.setItem(this.keyCache, JSON.stringify(newMap));

	    },

	    removeLastCache: function () {
	      var i, len;
	      var num = this.removeNum || 5;

	      //取出键值对
	      var cacheStr = this.sProxy.getItem(this.keyCache);
	      var cacheMap = [];
	      var delMap = [];

	      //说明本次存储过大
	      if (!cacheStr) return false;

	      cacheMap.sort(function (a, b) {
	        return a.timeout - b.timeout;
	      });

	      //删除了哪些数据
	      delMap = cacheMap.splice(0, num);
	      for (i = 0, len = delMap.length; i < len; i++) {
	        this.sProxy.removeItem(delMap[i].key);
	      }

	      this.sProxy.setItem(this.keyCache, JSON.stringify(cacheMap));
	      return true;
	    },

	    setKeyCache: function (key, timeout) {
	      if (!key || !timeout || timeout < new Date().getTime()) return;
	      var i, len, tmpObj;

	      //获取当前已经缓存的键值字符串
	      var oldstr = this.sProxy.getItem(this.keyCache);
	      var oldMap = [];
	      //当前key是否已经存在
	      var flag = false;
	      var obj = {};
	      obj.key = key;
	      obj.timeout = timeout;

	      if (oldstr) {
	        oldMap = JSON.parse(oldstr);
	        if (!_.isArray(oldMap)) oldMap = [];
	      }

	      for (i = 0, len = oldMap.length; i < len; i++) {
	        tmpObj = oldMap[i];
	        if (tmpObj.key == key) {
	          oldMap[i] = obj;
	          flag = true;
	          break;
	        }
	      }
	      if (!flag) oldMap.push(obj);
	      //最后将新数组放到缓存中
	      this.sProxy.setItem(this.keyCache, JSON.stringify(oldMap));

	    },

	    buildStorageObj: function (value, indate, timeout, sign) {
	      var obj = {
	        value: value,
	        timeout: timeout,
	        sign: sign,
	        indate: indate
	      };
	      return obj;
	    },

	    get: function (key, sign) {
	      var result, now = new Date().getTime();
	      try {
	        result = this.sProxy.getItem(key);
	        if (!result) return null;
	        result = JSON.parse(result);

	        //数据过期
	        if (result.timeout < now) return null;

	        //需要验证签名
	        if (sign) {
	          if (sign === result.sign)
	            return result.value;
	          return null;
	        } else {
	          return result.value;
	        }

	      } catch (e) {
	        console && console.log(e);
	      }
	      return null;
	    },

	    //获取签名
	    getSign: function (key) {
	      var result, sign = null;
	      try {
	        result = this.sProxy.getItem(key);
	        if (result) {
	          result = JSON.parse(result);
	          sign = result && result.sign
	        }
	      } catch (e) {
	        console && console.log(e);
	      }
	      return sign;
	    },

	    remove: function (key) {
	      return this.sProxy.removeItem(key);
	    },

	    clear: function () {
	      this.sProxy.clear();
	    }
	  });

	  Storage.getInstance = function () {
	    if (this.instance) {
	      return this.instance;
	    } else {
	      return this.instance = new this();
	    }
	  };

	  return Storage;

	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 111 */
/***/ function(module, exports) {

	module.exports = function (obj) {
	obj || (obj = {});
	var __t, __p = '';
	with (obj) {
	__p += '<div class="cm-search-bar">\r\n  <i class="icon-search active"></i>\r\n  <div class="cm-search-ele-wrap">\r\n    <input type="text" class="cm-search-text js_search_text" placeholder="请输入市/区或车站名" >\r\n  </div>\r\n  <span class="search-cancel js_cancel_search">取消</span>\r\n</div>\r\n<h2 class="current-city" style=" display: none;">\r\n  <i class="icon-location"></i>请选择城市\r\n</h2>\r\n<div class="js_search_list" style=" display: none;"></div>\r\n<div class="js_his_city_wrapper">\r\n</div>\r\n<div class="js_city_wrapper">\r\n</div>\r\n<div class="js_nav_city nav-city-bar"></div>\r\n<div class="none-data js_none_data">\r\n  对不起，这里暂时不支持车票预订</div>\r\n';

	}
	return __p
	}

/***/ },
/* 112 */
/***/ function(module, exports) {

	module.exports = function (obj) {
	obj || (obj = {});
	var __t, __p = '', __j = Array.prototype.join;
	function print() { __p += __j.call(arguments, '') }
	with (obj) {

	 for(var ii = 0, ll = data.length; ii < ll; ii++) { ;
	__p += '\r\n';

	  var obj = data[ii];
	  var k = Object.keys(obj)[0];
	  var item = obj[k];
	;
	__p += '\r\n  <div class="city-list ">\r\n  ';
	if(item.length > 0){ ;
	__p += '\r\n  <h2 class="';
	if(k != 'history'){ ;
	__p += 'js_group_name';
	} ;
	__p += '">\r\n    ' +
	((__t = ((k == 'history' ? '历史城市' : k) )) == null ? '' : __t) +
	'</h2>\r\n    \r\n  <ul class=" ' +
	((__t = ((k == 'history') ? 'grid-item' : 'list-item')) == null ? '' : __t) +
	'  js_city_list">\r\n    ';
	 for(var i = 0, len = item.length; i < len; i++) { ;
	__p += '\r\n      <li data-type="2" data-filter="' +
	((__t = (item[i].cnname )) == null ? '' : __t) +
	' ' +
	((__t = (item[i].name )) == null ? '' : __t) +
	'" data-name="' +
	((__t = (item[i].cnname )) == null ? '' : __t) +
	'" data-city="' +
	((__t = (item[i].regionid )) == null ? '' : __t) +
	'" >' +
	((__t = (item[i].cnname)) == null ? '' : __t) +
	'</li>\r\n    ';
	} ;
	__p += '\r\n  ';
	} ;
	__p += '\r\n  </ul>\r\n</div>\r\n';
	} ;
	__p += '\r\n\r\n\r\n\r\n  ';

	}
	return __p
	}

/***/ },
/* 113 */
/***/ function(module, exports) {

	module.exports = function (obj) {
	obj || (obj = {});
	var __t, __p = '', __j = Array.prototype.join;
	function print() { __p += __j.call(arguments, '') }
	with (obj) {

	 for(var ii = 0, ll = data.length; ii < ll; ii++) { 
	 var item = data[ii];
	;
	__p += '\r\n<div class="city-list list-search">\r\n  <h2 class="js_city_item" data-name="' +
	((__t = (item.title )) == null ? '' : __t) +
	'" data-city="' +
	((__t = (item.cityid )) == null ? '' : __t) +
	'" ';
	if(item.type == 1) { ;
	__p += ' data-station="' +
	((__t = (item.stationid )) == null ? '' : __t) +
	'"';
	} ;
	__p += '  data-type="' +
	((__t = (item.type )) == null ? '' : __t) +
	'">\r\n    ' +
	((__t = (item.title )) == null ? '' : __t) +
	'</h2>\r\n  <ul class="list-item js_city_list">\r\n    ';
	 for(var i = 0, len = item.data.length; i < len; i++) { ;
	__p += '\r\n      <li data-type="' +
	((__t = (item.data[i].type )) == null ? '' : __t) +
	'" data-name="' +
	((__t = (item.data[i].title )) == null ? '' : __t) +
	'"  data-city="' +
	((__t = (item.cityid )) == null ? '' : __t) +
	'" ';
	if(item.data[i].type == 1) { ;
	__p += ' data-station="' +
	((__t = (item.data[i].stationid )) == null ? '' : __t) +
	'" ';
	} ;
	__p += ' >' +
	((__t = (item.data[i].title)) == null ? '' : __t) +
	'</li>\r\n    ';
	} ;
	__p += '\r\n  </ul>\r\n</div>\r\n';
	} ;
	__p += '\r\n\r\n\r\n\r\n  ';

	}
	return __p
	}

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(115);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(4)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../../../../node_modules/css-loader/index.js?minimize!./city.css", function() {
				var newContent = require("!!./../../../../../node_modules/css-loader/index.js?minimize!./city.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(3)();
	// imports


	// module
	exports.push([module.id, ".page-city .current-city{position:relative;height:55px;line-height:55px;background-color:#fff;padding-left:18px}.page-city .current-city strong{font-weight:400}.page-city .current-city .icon-location{top:5px;padding-right:10px}.page-city .city-list{background-color:#fff}.page-city .city-list .grid-item{background-color:#fff;overflow:hidden;padding:10px}.page-city .city-list .grid-item li{width:30%;float:left;height:35px;line-height:35px;box-sizing:border-box;-webkit-box-sizing:border-box;text-align:center;margin:10px 3% 0 0;position:relative;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;border:1px solid #d4d4d4;border-radius:5px;color:#00b358}.page-city .city-list h2{height:30px;line-height:30px;background-color:#ededed;padding:0 10px}.page-city .city-list.list-search h2{background-color:#fff;border-bottom:1px solid #ededed;height:40px;line-height:40px}.page-city .city-list.list-search .list-item{margin-left:30px}.page-city .city-list.list-search .list-item li{padding-left:0}.page-city .city-list .list-item li{border-bottom:1px solid #ededed;font-size:15px;line-height:20px;padding:10px 30px 10px 25px}.page-city .cm-search-bar .search-cancel{position:absolute;right:10px;top:10px;border:1px solid #fff;border-radius:4px;height:28px;line-height:28px;padding:0 15px;color:#fff;display:none}.page-city.search-active .cm-search-bar .cm-search-ele-wrap{margin-right:70px}.page-city.search-active .current-city{display:none}.page-city.search-active .cm-search-bar .search-cancel{display:block}.page-city .nav-city-bar{position:fixed;width:26px;top:95px;right:0;text-align:center;color:#00b358;font-size:10px}", ""]);

	// exports


/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	    __webpack_require__(105),
	    __webpack_require__(117),
	    __webpack_require__(20)
	], __WEBPACK_AMD_DEFINE_RESULT__ = function (
	    AbstractView,
	    layoutHtml,
	    _
	) {
	    return _.inherit(AbstractView, {
	        propertys: function ($super) {
	            $super();
	            this.template = layoutHtml;
	            this.events = {
	                'click .js_clickme': 'clickAction'
	            };
	        },

	        clickAction: function () {
	            this.showMessage('显示消息');
	        },

	        initHeader: function (name) {
	            var title = '多Webview容器';
	            this.header.set({
	                view: this,
	                title: title,
	                back: function () {
	                    console.log('回退');
	                }
	            });
	        }
	    });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 117 */
/***/ function(module, exports) {

	module.exports = function (obj) {
	obj || (obj = {});
	var __t, __p = '';
	with (obj) {
	__p += '<div style="text-align: center">\r\n    <div class="btn-primary full-width js_clickme " style="width: 80%; margin: 100px auto;">\r\n        点击我</div>\r\n</div>\r\n';

	}
	return __p
	}

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	    __webpack_require__(116),
	    __webpack_require__(20)
	], __WEBPACK_AMD_DEFINE_RESULT__ = function (
	    IndexView,
	    _
	) {
	    return _.inherit(IndexView, {

	        clickAction: function () {
	            BNJS.ui.dialog.show({
	                title: '测试Dialog',
	                message: '我是测试Dialog~~~~',
	                ok: 'ok',
	                onConfirm: function () {
	                    BNJS.ui.toast.show('您刚刚点击了ok按钮');
	                }
	            });
	        },

	        //应该只处理差异部分，暂时如此
	        initHeader: function (name) {
	            var title = '多Webview容器';
	            this.header.set({
	                view: this,
	                title: title,
	                back: function () {
	                    BNJS.page.back();
	                }
	            });
	        }

	    });
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(120),__webpack_require__(20)], __WEBPACK_AMD_DEFINE_RESULT__ = function (AbstractEntity,_) {

	    var Entity = _.inherit(AbstractEntity, {
	        propertys: function ($super) {
	            $super();
	            var n = new Date();
	            var curTime = new Date(n.getFullYear(), n.getMonth(), n.getDate()).getTime();
	            this.data = {
	                date: curTime,
	                title: '当前日期'
	            };
	        },

	        set: function (date) {
	            if (!date) return;
	            if (_.isDate(date)) date = date.getTime();
	            if (typeof date === 'string') date = parseInt(date);
	            this.data.date = date;
	            this.update();
	        },

	        getDateStr: function () {
	            var date = new Date();
	            date.setTime(this.data.date);
	            var dateDetail = _.dateUtil.getDetail(date);
	            var name = dateDetail.year + '-' + dateDetail.month + '-' + dateDetail.day + ' ' + dateDetail.weekday + (dateDetail.day1 ? '(' + dateDetail.day1 + ')' : '');
	            return name;
	        },

	        nextDay: function () {
	            this.set(this.getDate() + 86400000);
	            return true;
	        },

	        getDate: function () {
	            return parseInt(this.data.date);
	        },

	        //是否能够再往前一天
	        canPreDay: function () {
	            var n = new Date();
	            var curTime = new Date(n.getFullYear(), n.getMonth(), n.getDate()).getTime();

	            //如果当前日期已经是第一天，则不可预订
	            if (curTime <= this.getDate() - 86400000) {
	                return true;
	            }
	            return false;
	        },

	        preDay: function () {
	            if (!this.canPreDay()) return false;
	            this.set(this.getDate() - 86400000);
	            return true;
	        }

	    });

	    return Entity;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(20)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_) {
	    /*
	    一些原则：
	    init方法时，不可引起其它字段update
	    */
	    var Entity = _.inherit({
	        initialize: function (opts) {
	            this.propertys();
	            this.setOption(opts);
	        },

	        propertys: function () {
	            //只取页面展示需要数据
	            this.data = {};

	            //局部数据改变对应的响应程序，暂定为一个方法
	            //可以是一个类的实例，如果是实例必须有render方法
	            this.controllers = {};

	            this.scope = null;

	        },

	        subscribe: function (namespace, callback, scope) {
	            if (typeof namespace === 'function') {
	                scope = callback;
	                callback = namespace;
	                namespace = 'update';
	            }
	            if (!namespace || !callback) return;
	            if (scope) callback = $.proxy(callback, scope);
	            if (!this.controllers[namespace]) this.controllers[namespace] = [];
	            this.controllers[namespace].push(callback);
	        },

	        unsubscribe: function (namespace) {
	            if (!namespace) this.controllers = {};
	            if (this.controllers[namespace]) this.controllers[namespace] = [];
	        },

	        publish: function (namespace, data) {
	            if (!namespace) return;
	            if (!this.controllers[namespace]) return;
	            var arr = this.controllers[namespace];
	            var i, len = arr.length;
	            for (i = 0; i < len; i++) {
	                arr[i](data);
	            }
	        },

	        setOption: function (opts) {
	            for (var k in opts) {
	                this[k] = opts[k];
	            }
	        },

	        //首次初始化时，需要矫正数据，比如做服务器适配
	        //@override
	        handleData: function () { },

	        //一般用于首次根据服务器数据源填充数据
	        initData: function (data) {
	            var k;
	            if (!data) return;

	            //如果默认数据没有被覆盖可能有误
	            for (k in this.data) {
	                if (data[k]) this.data[k] = data[k];
	            }

	            this.handleData();
	            this.publish('init', this.get());
	        },

	        //验证data的有效性，如果无效的话，不应该进行以下逻辑，并且应该报警
	        //@override
	        validateData: function () {
	            return true;
	        },

	        //获取数据前，可以进行格式化
	        //@override
	        formatData: function (data) {
	            return data;
	        },

	        //获取数据
	        get: function () {
	            if (!this.validateData()) {
	                //需要log
	                return {};
	            }
	            return this.formatData(this.data);
	        },

	        //数据跟新后需要做的动作，执行对应的controller改变dom
	        //@override
	        update: function (key) {
	            key = key || 'update';
	            var data = this.get();
	            this.publish(key, data);
	        }

	    });

	    return Entity;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(120),__webpack_require__(20)], __WEBPACK_AMD_DEFINE_RESULT__ = function (AbstractEntity,_) {

	    var Entity = _.inherit(AbstractEntity, {
	        propertys: function ($super) {
	            $super();
	            this.data = {
	                list: [],
	                index: 0
	            };
	        },

	        setIndex: function (i, noEvent) {
	            this.data.index = i;
	            if (!noEvent) this.update();
	        },

	        getIndex: function () {
	            return this.data.index;
	        },

	        getList: function () {
	            return this.data.list;
	        },

	        getName: function () {
	            return this.getList()[this.getIndex()].name;
	        },

	        getId: function () {
	            return this.getList()[this.getIndex()].id;
	        },

	        setId: function (id, noEvent) {
	            var i, len, data = this.getList();
	            for (var i = 0, len = data.length; i < len; i++) {
	                if (data[i].id == id) {
	                    this.setIndex(i, noEvent); ;
	                    return;
	                }
	            }
	        },

	        initData: function (arr, sec) {
	            if (typeof arr === 'object' && arr.id) arr = [arr];
	            if (!_.isArray(arr)) arr = [];
	            this.data.list = [{
	                id: '',
	                name: '全部车站'
	            }].concat(arr);
	            this.data.index = 0;
	            if (sec) {
	                this.setId(sec, true);
	            } 

	            this.handleData();
	            this.publish('init', this.get());
	        }

	    });

	    return Entity;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(120),__webpack_require__(20)], __WEBPACK_AMD_DEFINE_RESULT__ = function (AbstractEntity,_) {

	    var Entity = _.inherit(AbstractEntity, {
	        propertys: function ($super) {
	            $super();
	            this.data = {
	                list: [],
	                index: 0
	            };
	        },

	        initData: function () {
	            this.data.list = [
	                { id: 0, name: '全天' },
	                { id: 1, name: '早上 00:00-12:00' },
	                { id: 2, name: '下午 12:00-18:00' },
	                { id: 3, name: '晚上 18:00-24:00' }
	            ];

	            this.handleData();
	            this.publish('init', this.get());
	        },

	        getList: function () {
	            return this.data.list;
	        },

	        setIndex: function (i) {
	            this.data.index = i;
	        },

	        getId: function () {
	            return this.data.list[this.data.index].id;
	        },

	        getName: function () {
	            return this.data.list[this.data.index].name;
	        },

	        setIndex: function (i) {
	            this.data.index = i;
	            this.update();
	        }

	    });

	    return Entity;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	    __webpack_require__(105),
	    __webpack_require__(130),
	    __webpack_require__(126),

	    __webpack_require__(121),
	    __webpack_require__(119),
	    __webpack_require__(122),

	    __webpack_require__(127),
	    __webpack_require__(129),
	    __webpack_require__(124),
	    __webpack_require__(132),

	    __webpack_require__(106),

	    __webpack_require__(133),
	    __webpack_require__(134),
	    __webpack_require__(101),
	    __webpack_require__(20)
	], __WEBPACK_AMD_DEFINE_RESULT__ = function (
	    AbstractView,
	    style,
	    listTpl,

	    StationEntity,
	    DateEntity,
	    TimeEntity,

	    DateModule,
	    TimeModule,
	    SetoutModule,
	    ArriveModule,

	    BusModel,

	    layoutHtml,
	    searchBoxHtml,
	    UIScrollLayer,
	    _
	) {
	    return _.inherit(AbstractView, {

	        _initEntity: function () {
	            this.dateEntity = new DateEntity();

	            this.timeEntity = new TimeEntity();
	            this.timeEntity.subscribe('init', this.renderTime, this);
	            this.timeEntity.subscribe(this.renderTime, this);
	            this.timeEntity.subscribe(this.refreshList, this);

	            this.setoutEntity = new StationEntity();
	            this.setoutEntity.subscribe('init', this.renderSetout, this);
	            this.setoutEntity.subscribe(this.renderSetout, this);
	            this.setoutEntity.subscribe(this.refreshList, this);

	            this.arriveEntity = new StationEntity();
	            this.arriveEntity.subscribe('init', this.renderArrive, this);
	            this.arriveEntity.subscribe(this.renderArrive, this);
	            this.arriveEntity.subscribe(this.refreshList, this);

	        },

	        _initModule: function () {
	            this.dateModule = new DateModule({
	                view: this,
	                selector: '.js_calendar_wrapper',
	                dateEntity: this.dateEntity
	            });

	            this.timeModule = new TimeModule({
	                view: this,
	                selector: '.js_show_setoutdate',
	                timeEntity: this.timeEntity
	            });

	            this.setOutModule = new SetoutModule({
	                view: this,
	                selector: '.js_show_setstation',
	                setoutEntity: this.setoutEntity
	            });

	            this.arriveModule = new ArriveModule({
	                view: this,
	                selector: '.js_show_arrivalstation',
	                arriveEntity: this.arriveEntity
	            });

	        },

	        propertys: function ($super) {
	            $super();

	            this._initEntity();
	            this._initModule();

	            this.style = style;
	            this.template = layoutHtml;

	            //主控制器业务属性
	            this.urlData = {
	                start: {},
	                end: {}
	            };

	            this.needInitStations = true;

	            this.listModel = BusModel.ListModel.getInstance();

	            this.events = {
	                'click .js_bus_list li': 'toBooking'
	            };

	        },

	        toBooking: function (e) {
	            if (this.$el.hasClass('page-list--search')) return;
	            var el = $(e.currentTarget);
	            var id = el.attr('data-key');
	            var scope = this;

	            if (el.hasClass('disabled')) {
	                this.showToast('不可预订');
	                return;
	            }

	            window.location.href = 'http://kuai.baidu.com/webapp/bus/booking.html?id=' + id;
	        },

	        initHeader: function (name) {
	            var title = '班次列表';
	            this.header.set({
	                view: this,
	                title: title,
	                back: function () {
	                    console.log('回退');
	                },
	                right: [
	                    {
	                        tagname: 'search-bar',
	                        value: '搜索',
	                        callback: function () {
	                            this.showSearchBox();
	                        }
	                    }
	                ]
	            });
	        },

	        initElement: function () {
	            this.d_list_wrapper = this.$('.js_list_wrapper');
	            this.d_none_data = this.$('.js_none_data');

	            this.d_js_show_setoutdate = this.$('.js_show_setoutdate');
	            this.d_js_show_setstation = this.$('.js_show_setstation');
	            this.d_js_show_arrivalstation = this.$('.js_show_arrivalstation');
	            this.d_js_list_loading = this.$('.js_list_loading');
	            this.d_js_tabs = this.$('.js_tabs');

	            this.d_js_day_sec = this.$('.js_day_sec');
	            this.d_js_start_sec = this.$('.js_start_sec');
	            this.d_js_arrival_sec = this.$('.js_arrival_sec');
	        },

	        //搜索工具弹出层
	        showSearchBox: function () {
	            var scope = this;
	            if (!this.searchBox) {
	                this.searchBox = new UIScrollLayer({
	                    title: '请选择搜索条件',
	                    html: searchBoxHtml,
	                    events: {
	                        'click .js-start': function (e) {
	                            scope._showCityView('start', $(e.currentTarget));
	                        },
	                        'click .js-arrive': function (e) {
	                            scope._showCityView('end', $(e.currentTarget));
	                        },
	                        'click .js_search_list': function () {
	                            var param = {};

	                            if (!scope.urlData.start.id) {
	                                scope.showToast('请先选择出发城市');
	                                return;
	                            }

	                            if (!scope.urlData.end.id) {
	                                scope.showToast('请先选择到达城市');
	                                return;
	                            }

	                            //这里一定会有出发城市与到达城市等数据
	                            param.startcityid = scope.urlData.start.id;
	                            param.arrivalcityid = scope.urlData.end.id;
	                            param.startdatetime = scope.dateEntity.getDate();
	                            param.startname = scope.urlData.start.name;
	                            param.arrivename = scope.urlData.end.name;

	                            if (scope.urlData.start.station) {
	                                param.startstationid = scope.urlData.start.station;
	                            }

	                            if (scope.urlData.end.station) {
	                                param.arrivalstationid = scope.urlData.end.station;
	                            }

	                            scope.needInitStations = true;
	                            scope.forward('list', param);
	                            this.hide();
	                        }
	                    }
	                });
	            }
	            this.searchBox.show();
	        },

	        _showCityView: function (key, el) {
	            var scope = this;

	            if (key == 'end') {
	                //因为到达车站会依赖出发车站的数据，所以这里得先做判断
	                if (!this.urlData.start.id) {
	                    this.showToast('请先选择出发城市');
	                    return;
	                }
	            }

	            this.showPageView('city', {
	                flag: key,
	                startId: this.urlData.start.id,
	                type: this.urlData.start.type,
	                onCityItemClick: function (id, name, station, type) {
	                    scope.urlData[key] = {};
	                    scope.urlData[key]['id'] = id;
	                    scope.urlData[key]['type'] = type;
	                    scope.urlData[key]['name'] = name;
	                    if (station) scope.urlData[key]['station'] = station;
	                    el.text(name);
	                    scope.hidePageView();
	                },
	                onBackAction: function () {
	                    scope.hidePageView();
	                }
	            });
	        },

	        //初始化出发车站，该数据会随着数据加载结束而变化
	        //如果url具有出发站名称以及id，需要特殊处理
	        initSetoutEntity: function () {
	            var data = {};
	            if (_.getUrlParam().startstationid) {
	                //出发车站可能并没有传，兼容老代码
	                data.name = _.getUrlParam().startname || '全部车站';
	                data.id = _.getUrlParam().startstationid;
	            }

	            this.setoutEntity.initData(data, data.id);
	        },

	        //初始化到达站
	        initArriveEntity: function () {

	            var data = {};
	            if (_.getUrlParam().arrivalstationid) {
	                //出发车站可能并没有传，兼容老代码
	                data.name = _.getUrlParam().arrivename || '全部车站';
	                data.id = _.getUrlParam().arrivalstationid;
	            }

	            this.arriveEntity.initData(data, data.id);
	        },

	        //时段只有变化时候才具有显示状态
	        renderTime: function () {
	            var name = this.timeEntity.getName();
	            this.d_js_day_sec.html(name);
	        },

	        renderSetout: function () {
	            var name = this.setoutEntity.getName();
	            this.d_js_start_sec.html(name);
	        },

	        renderArrive: function () {
	            var name = this.arriveEntity.getName();
	            this.d_js_arrival_sec.html(name);
	        },

	        //只有日期导致的变化才需要重置城市
	        initPageData: function () {
	            //当前索引
	            this.index = 0;
	            //list页面加载状态，影响滚动加载
	            this.loadingStatus = false;
	            this.d_list_wrapper.html('');
	        },

	        refreshList: function () {
	            this.unbindScrollEvent();
	            window.scrollTo(0, 0);
	            this.initPageData();
	            this.listInit();
	            this.bindScrollEvent();
	        },

	        listInit: function () {
	            var scope = this, i, len, k, param = {}, d = new Date();
	            var sid = this.setoutEntity.getId();
	            var aid = this.arriveEntity.getId();

	            if (sid && sid.charAt(0) !== '-') {
	                param.startstationid = sid;
	            }
	            if (aid && aid.charAt(0) !== '-') {
	                param.arrivalstationid = aid;
	            }

	            param.startcityid = _.getUrlParam().startcityid;
	            param.arrivalcityid = _.getUrlParam().arrivalcityid;
	            param.starttimetype = this.timeEntity.getId()
	            param.startdatetime = parseInt(this.dateEntity.getDate() / 1000);
	            param.page = this.index + 1;

	            this.d_js_list_loading.show();
	            this.listModel.setParam(param);
	            this.loadingStatus = true;
	            this.listModel.execute(function (data) {
	                scope.loadingStatus = false;
	                scope.d_js_list_loading.hide();

	                if (scope.index == 0 && scope.needInitStations) {
	                    scope._initStation(data);
	                    scope.needInitStations = false;
	                }

	                if (!data || !data.schedules || data.schedules.length == 0) {
	                    scope.unbindScrollEvent();
	                } else {
	                    scope.index++;
	                }
	                scope.renderList(data);
	            });

	        },

	        //数据请求成功后如果localstorage丢失，需要重置出发站文本
	        _initStation: function (data) {
	            this.setoutEntity.initData(data.startstations, this.setoutEntity.getId());
	            this.arriveEntity.initData(data.arrivalstations, this.arriveEntity.getId());
	        },

	        renderList: function (data) {
	            var html = '';
	            if (data.schedules.length === 0 && this.index === 0) {
	                this.d_none_data.show();
	                this.d_list_wrapper.hide();
	                return;
	            }
	            this.d_none_data.hide();
	            this.d_list_wrapper.show();
	            html = this.renderTpl(listTpl, { data: data.schedules });
	            this.d_list_wrapper.append(html);

	        },

	        addEvent: function () {
	            this.on('onShow', function () {
	                //初始化date数据
	                this.dateModule.initDate();

	                //这里判断是否需要弹出搜索弹出层
	                if (!_.getUrlParam().startcityid || !_.getUrlParam().arrivalcityid) {
	                    this.showSearchBox();
	                    return;
	                }

	                //初始化时段选择
	                this.timeEntity.initData();
	                this.initSetoutEntity();
	                this.initArriveEntity();

	                this.initPageData();
	                this.listInit();
	                this.bindScrollEvent();

	            });

	            this.on('onHide', function () {
	                this.unbindScrollEvent();
	            });
	        },

	        bindScrollEvent: function () {
	            this.unbindScrollEvent();
	            $(window).on('scroll.scollload' + this.id, $.proxy(function () {
	                //如果正在加载便不可用
	                if (this.loadingStatus) return;
	                //滑到最低的时候才能刷新
	                if (window.scrollY + document.documentElement.clientHeight < document.documentElement.scrollHeight - 50) return;
	                this.listInit();
	            }, this));
	        },

	        unbindScrollEvent: function () {
	            $(window).off('.scollload' + this.id);
	        }

	    });

	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(125), __webpack_require__(98),__webpack_require__(20)], __WEBPACK_AMD_DEFINE_RESULT__ = function (ModuleView, UILayerList,_) {

	    return _.inherit(ModuleView, {

	        //此处若是要使用model，处实例化时候一定要保证entity的存在，如果不存在便是业务BUG
	        initData: function () {
	            this.events = {
	                'click ': 'showSetoutAction'
	            };
	        },

	        showSetoutAction: function () {

	            if (this.view.dateList && this.view.dateList.status == 'show') {
	                this.view.dateList.hide();
	            }

	            if (this.view.uiStationList2 && this.view.uiStationList2.status == 'show') {
	                this.view.uiStationList2.hide();
	            }

	            if (this.view.uiStationList && this.view.uiStationList.status == 'show') {
	                this.view.uiStationList.hide();
	                return;
	            }

	            var scope = this;
	            var data = this.setoutEntity.getList();
	            var index = this.setoutEntity.getIndex();

	            if (!this.view.uiStationList) {

	                //这里注释了车站地图需求
	                this.view.uiStationList = new UILayerList({
	                    list: data,
	                    index: index,
	                    onShow: function () {
	                        scope.view.d_js_tabs.css('z-index', '3000');
	                        scope.view.d_js_show_setstation.addClass('active');
	                    },
	                    onHide: function () {
	                        scope.view.d_js_show_setstation.removeClass('active');
	                        scope.view.d_js_tabs.css('z-index', '500');
	                    },
	                    reposition: function () {
	                        this.$el.css({
	                            'position': 'fixed',
	                            '-webkit-box-sizing': 'border-box',
	                            'box-sizing': 'border-box',
	                            'width': '100%',
	                            'left': '0',
	                            'bottom': '45px'
	                        });
	                    },
	                    onItemAction: function (data, index) {
	                        scope.setoutEntity.setIndex(index);
	                        this.hide();
	                    }
	                });
	            } else {
	                this.view.uiStationList.list = data;
	                this.view.uiStationList.refresh();
	            }
	            this.view.uiStationList.show();
	            this.view.uiStationList.setIndex(index);

	        }

	    });

	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(20)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_) {
	    'use strict';

	    return _.inherit({

	        propertys: function () {
	            //这里设置UI的根节点所处包裹层，必须设置
	            this.$el = null;

	            //用于定位dom的选择器
	            this.selector = '';

	            //每个moduleView必须有一个父view，页面级容器
	            this.view = null;

	            //模板字符串，各个组件不同，现在加入预编译机制
	            this.template = '';

	            //事件机制
	            this.events = {};

	            //实体model，跨模块通信的桥梁
	            this.entity = null;
	        },

	        setOption: function (options) {
	            //这里可以写成switch，开始没有想到有这么多分支
	            for (var k in options) {
	                if (k == 'events') {
	                    _.extend(this[k], options[k]);
	                    continue;
	                } else if(k == "html"){
	                    var _html = options[k]();
	                    this[k] = _html;
	                    continue;
	                }
	                this[k] = options[k];
	            }
	            //      _.extend(this, options);
	        },

	        //@override
	        initData: function () {
	        },

	        //如果传入了dom便返回
	        initWrapper: function (el) {
	            if (el && el[0]) {
	                this.$el = el;
	                return;
	            }
	            this.$el = this.view.$(this.selector);
	        },

	        initialize: function (opts) {

	            //这种默认属性
	            this.propertys();
	            //根据参数重置属性
	            this.setOption(opts);
	            this.initData();

	            this.initWithoutRender();

	        },

	        //处理dom已经存在，不需要渲染的情况
	        initWithoutRender: function () {
	            if (this.template) return;
	            var scope = this;
	            this.view.on('onShow', function () {
	                scope.initWrapper();
	                if (!scope.$el[0]) return;
	                //如果没有父view则不能继续
	                if (!scope.view) return;
	                scope.initElement();
	                scope.bindEvents();
	            });
	        },

	        $: function (selector) {
	            return this.$el.find(selector);
	        },

	        //实例化需要用到到dom元素
	        initElement: function () { },

	        //@override
	        //收集来自各方的实体组成view渲染需要的数据，需要重写
	        getViewModel: function () {
	            throw '必须重写';
	        },

	        _render: function (callback) {
	            var data = this.getViewModel() || {};
	            var html = this.template;
	            if (!this.template) return '';
	            //引入预编译机制
	            if (_.isFunction(this.template)) {
	                html = this.template(data);
	            } else {
	                html = _.template(this.template)(data);
	            }
	            typeof callback == 'function' && callback.call(this);
	            return html;
	        },

	        //渲染时必须传入dom映射
	        render: function () {
	            this.initWrapper();
	            if (!this.$el[0]) return;

	            //如果没有父view则不能继续
	            if (!this.view) return;

	            var html = this._render();
	            this.$el.html(html);
	            this.initElement();
	            this.bindEvents();

	        },

	        bindEvents: function () {
	            var events = this.events;

	            if (!(events || (events = _.result(this, 'events')))) return this;
	            this.unBindEvents();

	            // 解析event参数的正则
	            var delegateEventSplitter = /^(\S+)\s*(.*)$/;
	            var key, method, match, eventName, selector;

	            // 做简单的字符串数据解析
	            for (key in events) {
	                method = events[key];
	                if (!_.isFunction(method)) method = this[events[key]];
	                if (!method) continue;

	                match = key.match(delegateEventSplitter);
	                eventName = match[1], selector = match[2];
	                method = _.bind(method, this);
	                eventName += '.delegateUIEvents' + this.id;

	                if (selector === '') {
	                    this.$el.on(eventName, method);
	                } else {
	                    this.$el.on(eventName, selector, method);
	                }
	            }

	            return this;
	        },

	        unBindEvents: function () {
	            this.$el.off('.delegateUIEvents' + this.id);
	            return this;
	        }
	    });

	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 126 */
/***/ function(module, exports) {

	module.exports = function (obj) {
	obj || (obj = {});
	var __t, __p = '', __j = Array.prototype.join;
	function print() { __p += __j.call(arguments, '') }
	with (obj) {
	__p += '<ul class="bus-list js_bus_list ">\r\n\r\n';
	 for(var i = 0, len = data.length; i < len; i++) {  ;
	__p += '\r\n';
	var _item = data[i]; ;
	__p += '\r\n';
	var _date = new Date (); ;
	__p += '\r\n';
	var _bookingTitle = '预订'; ;
	__p += '\r\n\r\n';
	_date.setTime(data[i].datetime * 1000); ;
	__p += '\r\n';
	 _date = _.dateUtil.getBeijingDate(_date); ;
	__p += '\r\n\r\n  <li data-key="' +
	((__t = (_item.id )) == null ? '' : __t) +
	'" class="bus-list-item ';
	 if(_item.cansellcount == '无票'){ _bookingTitle='已售完' ;
	__p += ' disabled ';
	} ;
	__p += ' ">\r\n    <div class="bus-time">\r\n      ' +
	((__t = (_.dateUtil.formatNum(_date.getHours()) + ':' + _.dateUtil.formatNum(_date.getMinutes()) )) == null ? '' : __t) +
	'</div>\r\n    <div class="tobooking">\r\n      ' +
	((__t = (_bookingTitle )) == null ? '' : __t) +
	'</div>\r\n    <div class="detail">\r\n      <div class="sub-list">\r\n        <span class="start"><span class="icon-circle s-icon1"></span>' +
	((__t = (_item.startstationname )) == null ? '' : __t) +
	'</span> <span class="fr price">\r\n          ￥' +
	((__t = (_item.price/100 )) == null ? '' : __t) +
	'</span>\r\n      </div>\r\n      <div class="sub-list">\r\n        <span class="end"><span class="icon-circle s-icon2"></span>' +
	((__t = (_item.arrivalstationname )) == null ? '' : __t) +
	'</span> <span class="fr b-tags js_tags"></span>\r\n      </div>\r\n    </div>\r\n  </li>\r\n';
	} ;
	__p += '\r\n\r\n</ul>\r\n\r\n';

	}
	return __p
	}

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(125), __webpack_require__(92), __webpack_require__(128),__webpack_require__(20)], __WEBPACK_AMD_DEFINE_RESULT__ = function (ModuleView, UICalendarBox, tpl,_) {
	    return _.inherit(ModuleView, {

	        //此处若是要使用model，处实例化时候一定要保证entity的存在，如果不存在便是业务BUG
	        initData: function () {

	            this.template = tpl;
	            this.events = {
	                'click .js_pre_day': 'preAction',
	                'click .js_next_day': 'nextAction',
	                'click .js_show_calendar': 'showCalendar'
	            };

	            //初始化时候需要执行的回调
	            this.dateEntity.subscribe('init', this.render, this);
	            this.dateEntity.subscribe(this.render, this);
	            this.dateEntity.subscribe(this.view.refreshList, this.view);

	        },

	        initDate: function () {
	            var t = new Date().getTime();
	            //默认情况下获取当前日期，也有过了18.00就设置为第二天日期
	            //当时一旦url上有startdatetime参数的话，便需要使用之
	            if (_.getUrlParam().startdatetime) t = _.getUrlParam().startdatetime;
	            this.dateEntity.initData({
	                date: t
	            });
	        },

	        getViewModel: function () {
	            var data = this.dateEntity.get();
	            data.formatStr = this.dateEntity.getDateStr();
	            data.canPreDay = this.dateEntity.canPreDay();
	            return data;
	        },

	        preAction: function () {
	            if (this.dateEntity.preDay()) return;
	            this.view.showToast('前一天不可预订');
	        },

	        nextAction: function () {
	            this.dateEntity.nextDay();
	        },

	        showCalendar: function () {
	            var scope = this, endDate = new Date();
	            var secDate = new Date();
	            secDate.setTime(this.dateEntity.getDate());

	            endDate.setTime(new Date().getTime() + 2592000000);

	            if (!this.calendar) {
	                this.calendar = new UICalendarBox({
	                    endTime: endDate,
	                    selectDate: secDate,
	                    onItemClick: function (date, el, e) {
	                        scope.dateEntity.set(date);
	                        this.hide();
	                    }
	                });
	            } else {
	                this.calendar.calendar.selectDate = secDate;
	                this.calendar.calendar.refresh();
	            }
	            this.calendar.show();
	        }

	    });

	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 128 */
/***/ function(module, exports) {

	module.exports = function (obj) {
	obj || (obj = {});
	var __t, __p = '';
	with (obj) {
	__p += '<ul class="bus-tabs calendar-bar">\r\n    <li class="tabs-item  js_pre_day ' +
	((__t = (!canPreDay ? 'disabled' : '' )) == null ? '' : __t) +
	'">前一天</li>\r\n    <li class="tabs-item js_show_calendar" style="-webkit-flex: 2; flex: 2;">' +
	((__t = (formatStr )) == null ? '' : __t) +
	'</li>\r\n    <li class="tabs-item js_next_day">后一天</li>\r\n</ul>\r\n';

	}
	return __p
	}

/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(125), __webpack_require__(98),__webpack_require__(20)], __WEBPACK_AMD_DEFINE_RESULT__ = function (ModuleView, UILayerList,_) {

	    return _.inherit(ModuleView, {

	        //此处若是要使用model，处实例化时候一定要保证entity的存在，如果不存在便是业务BUG
	        initData: function () {
	            this.events = {
	                'click ': 'showTimeAction'
	            };
	        },

	        showTimeAction: function () {

	            if (this.view.uiStationList && this.view.uiStationList.status == 'show') {
	                this.view.uiStationList.hide();
	            }
	            if (this.view.uiStationList2 && this.view.uiStationList2.status == 'show') {
	                this.view.uiStationList2.hide();
	            }
	            if (this.view.dateList && this.view.dateList.status == 'show') {
	                this.view.dateList.hide();
	                return;
	            }

	            var scope = this;
	            var data = this.timeEntity.getList();
	            if (!this.view.dateList) {
	                this.view.dateList = new UILayerList({
	                    list: data,
	                    index: 0,
	                    onShow: function () {
	                        scope.view.d_js_tabs.css('z-index', '3000');
	                        scope.view.d_js_show_setoutdate.addClass('active');
	                    },
	                    onHide: function () {
	                        scope.view.d_js_show_setoutdate.removeClass('active');
	                        scope.view.d_js_tabs.css('z-index', '500');
	                    },
	                    reposition: function () {
	                        this.$el.css({
	                            'position': 'fixed',
	                            '-webkit-box-sizing': 'border-box',
	                            'box-sizing': 'border-box',
	                            'width': '100%',
	                            'left': '0',
	                            'bottom': '45px'
	                        });
	                    },
	                    onItemAction: function (data, index) {
	                        scope.timeEntity.setIndex(index);
	                        this.hide();
	                    }
	                });
	            }
	            this.view.dateList.show();

	        }

	    });

	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(131);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(4)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../../../../node_modules/css-loader/index.js?minimize!./list.css", function() {
				var newContent = require("!!./../../../../../node_modules/css-loader/index.js?minimize!./list.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(3)();
	// imports


	// module
	exports.push([module.id, ".page-list{padding-bottom:45px}.page-list .icon-setout{margin:0 5px;border-color:#00b358}.page-list .icon-arrival{margin:0 5px;border-color:#f06463}.page-list .icon-sec{position:relative;top:-4px;display:inline-block;width:8px;height:8px;vertical-align:middle;border-left:1px solid;border-bottom:1px solid;-webkit-transform:rotate(-45deg);transform:rotate(-45deg);box-sizing:border-box;margin-left:5px}.page-list .active .icon-sec{top:1px;-webkit-transform:rotate(135deg);transform:rotate(135deg)}.page-list .active .icon-arrival,.page-list .active .icon-setout{border-color:#fff}.page-list .bus-tabs.list-filter{position:fixed;left:0;bottom:0;height:45px;line-height:45px;background-color:#fcfcfc}.page-list .bus-tabs.list-filter .tabs-item{font-size:13px;border-right:1px solid #d2d2d2;border-top:1px solid #d2d2d2}.page-list .bus-tabs.list-filter .tabs-item.active{color:#fff;background-color:#00b358}.page-list .bus-tabs.list-filter .tabs-item .line{height:22px;line-height:22px;text-align:center;font-size:12px}.page-list .bus-tabs.list-filter .tabs-item .line:last-child{color:#00b358}.page-list .bus-tabs.list-filter .tabs-item.active .line:last-child{color:#fff}.page-list .bus-tabs.list-filter .tabs-item .line .icon-time{top:2px;margin-right:4px}.page-list .bus-list .bus-list-item{position:relative;height:80px;background-color:#fff;margin:8px 0;border:1px solid #e5e5e5;border-width:1px 0}.page-list .bus-list .bus-list-item:after,.page-list .bus-list .bus-list-item:before{position:absolute;left:61px;content:'';width:12px;height:6px;background-color:#efefef;border:1px solid #e5e5e5}.page-list .bus-list .bus-list-item:before{border-radius:0 0 30px 30px;border-top:none;top:-1px}.page-list .bus-list .bus-list-item:after{border-radius:30px 30px 0 0;border-bottom:none;bottom:-1px}.page-list .bus-list .bus-list-item .bus-time{position:absolute;left:0;width:67px;height:50px;line-height:50px;margin:15px 0;color:#00b358;text-align:center;font-size:20px;font-family:Arial;border-right:1px dashed #e5e5e5}.page-list .bus-list .bus-list-item .tobooking{background-color:#00b358;position:absolute;right:0;width:60px;height:80px;line-height:80px;text-align:center;color:#fff;font-size:15px}.page-list .bus-list .bus-list-item.disabled .tobooking{background-color:#c5c5c5}.page-list .bus-list .bus-list-item .detail{height:40px;padding:18px 0;margin:0 70px 0 72px}.page-list .bus-list .bus-list-item .detail .sub-list{height:26px}.page-list .bus-list .bus-list-item .end,.page-list .bus-list .bus-list-item .start{color:#333;font-size:13px}.page-list .bus-list .bus-list-item .price{font-family:Arial;color:#fd8f01;font-size:16px;font-weight:600}.page-list .bus-list .bus-list-item.disabled .ticket{display:none}.page-list .bus-list .bus-list-item .ticket{color:#fd8f01;font-size:12px;border:1px solid #fd8f01;padding:1px 4px;border-radius:5px;font-family:Arial}.page-list .bus-list .bus-list-item.disabled .ticket{color:#c5c5c5}.page-list .bus-list .bus-list-item .s-icon1{margin:0 5px;border-color:#00b358}.page-list .bus-list .bus-list-item .s-icon2{margin:0 5px;border-color:#f06463}.page-list .calendar-bar-wrapper{height:36px}.page-list .calendar-bar{height:36px;line-height:36px;background-color:#08c563;color:#fff;top:50px;left:0;position:fixed}.page-list .calendar-bar .tabs-item{font-size:13px;border-right:1px solid #02ad56}.page-list .calendar-bar .tabs-item.disabled{color:#01994c}.baidubox .page-list .calendar-bar{top:0}.page-list.page-list--search .bus-list .bus-list-item .tobooking{display:none}.page-list.page-list--search .bus-list .bus-list-item .detail{margin-right:10px}.page-list .ad-wrapper{display:none}.page-list.page-list--search .ad-wrapper{display:block;position:fixed;bottom:45px;left:0;width:100%;z-index:500}.page-list.page-list--search .ad-wrapper img{width:100%}.page-list .b-tags{position:absolute;bottom:15px;right:70px}.page-list .bus-tips{background:#fff;padding:10px 15px;height:33px;overflow:hidden;border-bottom:1px solid #e5e5e5}.page-list .bus-tip-text{margin-right:150px;word-break:break-all;font-size:13px;line-height:17px;color:#8c8c8c;margin:0}.page-list .bus-tip-icon{border:1px solid #00b358;padding:2px 12px;color:#00b358;border-radius:22px}.c-row{width:auto;display:-webkit-box;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-webkit-box-pack:justify;-webkit-box-align:stretch;-webkit-box-lines:single;display:-webkit-flex;-webkit-flex-direction:row;-webkit-justify-content:space-between;-webkit-align-items:strecth;-webkit-align-content:flex-start;-webkit-flex-wrap:nowrap;padding:10px 20px}.c-span3{width:25%;-webkit-box-flex:3;-webkit-flex:3 3 auto}.c-span9{width:75%;-webkit-box-flex:9;-webkit-flex:9 9 auto}.search-line{position:relative;height:48px;line-height:48px;font-size:15px;font-weight:600;border-bottom:1px solid #e6e6e6}.search-line:after{content:\"\";display:inline-block;vertical-align:middle;width:10px;height:10px;border-top:2px solid #00b358;border-right:2px solid #00b358;position:absolute;right:30px;top:50%;margin-top:-2px;-webkit-transform:rotate(45deg) translateY(-50%);transform:rotate(45deg) translateY(-50%);box-sizing:border-box}.search-line-txt{text-align:right;padding-right:30px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}", ""]);

	// exports


/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(125), __webpack_require__(98),__webpack_require__(20)], __WEBPACK_AMD_DEFINE_RESULT__ = function (ModuleView, UILayerList,_) {

	    return _.inherit(ModuleView, {

	        //此处若是要使用model，处实例化时候一定要保证entity的存在，如果不存在便是业务BUG
	        initData: function () {
	            this.events = {
	                'click ': 'showArrivAction'
	            };
	        },

	        showArrivAction: function () {

	            if (this.view.dateList && this.view.dateList.status == 'show') {
	                this.view.dateList.hide();
	            }

	            if (this.view.uiStationList && this.view.uiStationList.status == 'show') {
	                this.view.uiStationList.hide();
	            }

	            if (this.view.uiStationList2 && this.view.uiStationList2.status == 'show') {
	                this.view.uiStationList2.hide();
	                return;
	            }

	            var scope = this;
	            var data = this.arriveEntity.getList();
	            var index = this.arriveEntity.getIndex();

	            if (!this.view.uiStationList2) {

	                //这里注释了车站地图需求
	                this.view.uiStationList2 = new UILayerList({
	                    list: data,
	                    onShow: function () {
	                        scope.view.d_js_tabs.css('z-index', '3000');
	                        scope.view.d_js_show_arrivalstation.addClass('active');
	                    },
	                    onHide: function () {
	                        scope.view.d_js_show_arrivalstation.removeClass('active');
	                        scope.view.d_js_tabs.css('z-index', '500');
	                    },
	                    reposition: function () {
	                        this.$el.css({
	                            'position': 'fixed',
	                            '-webkit-box-sizing': 'border-box',
	                            'box-sizing': 'border-box',
	                            'width': '100%',
	                            'left': '0',
	                            'bottom': '45px'
	                        });
	                    },
	                    onItemAction: function (data, index) {
	                        scope.arriveEntity.setIndex(index);
	                        this.hide();
	                    }
	                });
	            } else {
	                this.view.uiStationList2.list = data;
	                this.view.uiStationList2.refresh();
	            }
	            this.view.uiStationList2.show();
	            this.view.uiStationList2.setIndex(index);

	        }

	    });

	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 133 */
/***/ function(module, exports) {

	module.exports = function (obj) {
	obj || (obj = {});
	var __t, __p = '';
	with (obj) {
	__p += '<div class="calendar-bar-wrapper js_calendar_wrapper">\r\n    日历工具条模块\r\n</div>\r\n<div class="none-data js_none_data" style="display: none;">\r\n    当前暂无班次可预订</div>\r\n<div class="js_list_wrapper">\r\n    列表模块\r\n</div>\r\n<div class="js_list_loading" style="display: none; text-align: center; padding: 10px 0;">\r\n    正在加载...</div>\r\n<ul class="bus-tabs list-filter js_tabs">\r\n    <li class="tabs-item js_show_setoutdate">\r\n        <div class="line">\r\n            <i class="icon-time"></i>出发时段<i class="icon-sec"></i></div>\r\n        <div class="line js_day_sec">\r\n            全天</div>\r\n    </li>\r\n    <li class="tabs-item js_show_setstation">\r\n        <div class="line">\r\n            <i class="icon-circle icon-setout "></i>出发汽车站<i class="icon-sec"></i></div>\r\n        <div class="line js_start_sec">\r\n            全部车站</div>\r\n    </li>\r\n    <li class="tabs-item js_show_arrivalstation">\r\n        <div class="line">\r\n            <i class="icon-circle icon-arrival "></i>到达汽车站<i class="icon-sec"></i></div>\r\n        <div class="line js_arrival_sec">\r\n            全部车站</div>\r\n    </li>\r\n</ul>';

	}
	return __p
	}

/***/ },
/* 134 */
/***/ function(module, exports) {

	module.exports = function (obj) {
	obj || (obj = {});
	var __t, __p = '';
	with (obj) {
	__p += '<div class="c-row search-line" data-flag="start">\r\n    <div class="c-span3">\r\n        出发</div>\r\n    <div class="c-span9 js-start search-line-txt">\r\n        请选择出发地</div>\r\n</div>\r\n<div class="c-row search-line" data-flag="arrive">\r\n    <div class="c-span3">\r\n        到达</div>\r\n    <div class="c-span9 js-arrive search-line-txt">\r\n        请选择到达地</div>\r\n</div>\r\n<div class="c-row " data-flag="arrive">\r\n    <span class="btn-primary full-width js_search_list">查询</span>\r\n</div>\r\n';

	}
	return __p
	}

/***/ }
]);