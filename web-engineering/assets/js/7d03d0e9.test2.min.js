/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "../";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	var toast = __webpack_require__(238);
	toast.show("机会不错",3000);

	window.toast = toast;

	//小球动画
	var Animate = function(dom){

	    this.dom = dom;      //进行运动的dom节点
	    this.startTime = 0;  //动画开始时间
	    this.startPos = 0;   //动画开始时，dom节点的位置，即dom的初始位置
	    this.endPos = 0;     //动画结束时，dom节点的位置，即dom的目标位置
	    this.propertyName = null;   //dom节点需要被改变的css属性名
	    this.easing = null;    //缓动算法
	    this.duration = null;  //动画持续时间

	}

	Animate.prototype = {

	    constructor : Animate,

	    //各种动画公式
	    tween : {
	        //t:还剩多少时间,b:当前位置,c:总距离,d:持续时间
	        linear : function(t,b,c,d){
	            return c*t/d+b;
	        },

	        easeIn : function(t,b,c,d){
	            return c*(t/=d)*t+b;
	        },

	        strongEaseIn : function(t,b,c,d){
	            return c*(t/=d)*t*t*t*t+b;
	        },

	        strongEaseOut : function(t,b,c,d){
	            return c*((t=t/d-1)*t*t*t*t+1)+b;
	        },

	        sineaseOut : function(t,b,c,d){
	            return c*((t=t/d-1)*t*t+1)+b;
	        }
	    },

	    start : function(propertyName,endPos,duration,easing){

	        this.startTime = +new Date;  //动画启动时间
	        this.startPos = this.dom.getBoundingClientRect()[propertyName];  //dom节点初始位置
	        this.propertyName = propertyName;   //dom节点需要被改变的CSS属性名
	        this.endPos = endPos;    //dom节点目标位置
	        this.duration = duration;   //动画持续时间
	        this.easing = this.tween[easing];  //缓动算法

	        var self = this;
	        var timeId = setInterval(function(){

	            if(self.step() === false){
	                clearInterval(timeId);
	            }

	        },4)

	    },

	    step : function(){
	        var t = +new Date;
	        if( t>= this.startTime + this.duration){
	            this.update(this.endPos);
	            return false;
	        }
	        var pos = this.easing( t - this.startTime,this.startPos,this.endPos - this.startPos,this.duration);   //pos为小球当前位置
	        this.update(pos);
	    },

	    //更新小球的当前位置
	    update : function(pos){
	        this.dom.style[this.propertyName] = pos + 'px';
	    }

	}

	var div = $("#qiu")[0];
	var animate = new Animate(div);

	animate.start("left",200,8000,"easeIn");
	window.Animate = Animate;


/***/ },

/***/ 35:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function(require, exports){

	    //工具函数
	    Tools = {

	        //判断中英文字符长度
	        getStrLen : function(str){
	            var len = 0;
	            for (var i = 0; i < str.length; i++) {
	                var c = str.charCodeAt(i);
	                //单字节加1
	                if ((c >= 0x0001 && c <= 0x007e) || (0xff60 <= c && c <= 0xff9f)) {
	                    len++;
	                }
	                else {
	                    len += 2;
	                }
	            }
	            return len;
	        },

	        //截取中英文字符串
	        subString : function(str,num,ellipsis){

	            var newStr = "",len = 0;

	            for (var i = 0; i < str.length && len < num; i++) {
	                var c = str.charCodeAt(i);
	                //单字节加1
	                if ((c >= 0x0001 && c <= 0x007e) || (0xff60 <= c && c <= 0xff9f)) {
	                    len++;
	                }
	                else {
	                    len += 2;
	                }
	                newStr += str[i];
	            }

	            if(ellipsis) newStr+= "…";

	            return newStr;
	        },

	        //类继承
	        extend : function (supClass, childAttr) {

	            //若是传了第一个类，便继承之；否则实现新类
	            if (typeof supClass === 'object') {
	                childAttr = supClass;
	                supClass = function(){};
	            }

	            //定义我们创建的类
	            var newClass = function(){
	                this._propertys_();
	                this.init.apply(this, arguments);
	            };

	            newClass.prototype = new supClass();

	            var supInit = newClass.prototype.init || function () {
	                };
	            var childInit = childAttr.init || function () {
	                };
	            var _supAttr = newClass.prototype._propertys_ || function () {
	                };
	            var _childAttr = childAttr._propertys_ || function () {
	                };

	            for (var k in childAttr) {
	                //_propertys_中作为私有属性
	                childAttr.hasOwnProperty(k) && (newClass.prototype[k] = childAttr[k]);
	            }

	            //继承的属性有可能重写init方法
	            if (arguments.length && arguments[0].prototype && arguments[0].prototype.init === supInit) {
	                //重写新建类，初始化方法，传入其继承类的init方法
	                newClass.prototype.init = function () {
	                    var scope = this;
	                    var args = [function () {
	                        supInit.apply(scope, arguments);
	                    }];
	                    childInit.apply(scope, args.concat([].slice.call(arguments)));
	                };
	            }

	            //内部属性赋值
	            newClass.prototype._propertys_ = function () {
	                _supAttr.call(this);
	                _childAttr.call(this);
	            };

	            //成员属性
	            for (var k in supClass) {
	                supClass.hasOwnProperty(k) && (newClass[k] = supClass[k]);
	            }
	            return newClass;
	        }

	    }

	    //封装观察者模式类，需继承使用
	    function Observers(){

	        this.eventsList = [];

	        this.on = function(key,fn){

	            if(!this.eventsList[key]){
	                this.eventsList[key] = [];
	            }

	            this.eventsList[key].push(fn);

	        };

	        this.trigger = function(){

	            var key = Array.prototype.shift.call(arguments),
	                fns = this.eventsList[key];

	            if((!fns) || fns.length == 0){
	                return false;
	            }

	            for(var i= 0,fn;fn = fns[i++];){
	                fn.apply(this,arguments);
	            }

	        };

	        this.un = function(key,fn){

	            var fns = this.eventsList[key];

	            if((!fns) || fns.length == 0){
	                return false;
	            }

	            if(!fn){
	                fns.length = 0;
	            }

	            for(var i = 0,_fn;_fn = fns[i++];){
	                if(_fn === fn){
	                    fns.splice(i-1,1);
	                }
	            }

	        }

	    }

	    exports.Observers = Observers;
	    exports.Tools = Tools;

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },

/***/ 238:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(239);
	var Observers = __webpack_require__(35).Observers;
	var Tools = __webpack_require__(35).Tools;

	/*Toast组件*/
	/*
	 * 自定义了两个事件
	 *
	 * @name show
	 * 对话框显示触发
	 * @param config
	 *
	 * @name hide
	 * 对话框关闭触发
	 * @param config
	 */

	var Toast = (function(){

	    var instance;  //单例模式

	    return function(config) {

	        if(instance){
	            return instance;
	        }

	        Observers.call(this);  //继承观察者机制

	        this._initFlag = false;  //是否初始化
	        this.isShow = false;     //是否显示

	        /*公开方法：显示Toast*/
	        /* 可选配置项
	         * @param title：显示标题
	         * @param time：显示时间
	         */
	        this.show  = function(title,time){
	            var me = this;
	            if(this.isShow) return;
	            this.isShow = true;
	            this.config = {
	                "title" : "",
	                "time" : 3000
	            }
	            if(!this._initFlag){
	                this._init();
	                this._initFlag = true;
	            }
	            this._setTitle(title);
	            var _start = this.config.time / 4,
	                _duration = this.config.time / 2,
	                _end = this.config.time / 4;
	            $(".comp_toast").fadeIn(_start,function(){
	                setTimeout(function(){
	                    $(".comp_toast").fadeOut(_end,function(){
	                         me.isShow = false;
	                    });
	                },_duration);
	            });
	        };

	        /*初始化*/
	        this._init = function(){
	            this.$toast = $("<div class='comp_toast'></div>");
	            $("body").append(this.$toast);
	        };

	        /*设置Toast标题*/
	        this._setTitle = function(title){

	            var me = this,
	                _width,
	                _title;
	            _title = Tools.subString(title,25);
	            me.$toast.html(_title);

	        }

	        return instance = this;

	    }

	})();


	module.exports = new Toast();


/***/ },

/***/ 239:
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }

/******/ });